[
{"query": "How to play audio file", "url": "https://stackoverflow.com/questions/6045384/playing-mp3-and-wav-in-java", "url position": 1, "segments": [{"code": "String bip = \"bip.mp3\";\nMedia hit = new Media(new File(bip).toURI().toString());\nMediaPlayer mediaPlayer = new MediaPlayer(hit);\nmediaPlayer.play();\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "92", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import javafx.scene.media.Media;\nimport javafx.scene.media.MediaPlayer;\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "92", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "14", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "AudioInputStream audioIn = AudioSystem.getAudioInputStream(MyClazz.class.getResource(\"music.wav\"));\nClip clip = AudioSystem.getClip();\nclip.open(audioIn);\nclip.start();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "14", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String songName = \"HungryKidsofHungary-ScatteredDiamonds.mp3\";\nString pathToMp3 = System.getProperty(\"user.dir\") +\"/\"+ songName;\nBasicPlayer player = new BasicPlayer();\ntry {\n    player.open(new URL(\"file:///\" + pathToMp3));\n    player.play();\n} catch (BasicPlayerException | MalformedURLException e) {\n    e.printStackTrace();\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "11", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.net.MalformedURLException;\nimport java.net.URL;\nimport javazoom.jlgui.basicplayer.BasicPlayer;\nimport javazoom.jlgui.basicplayer.BasicPlayerException;\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "11", "answer_stars": 0, "length": true, "semicolon": true}, {"code": " <!-- \n    We have to explicitly instruct Maven to use tritonus-share 0.3.7-2 \n    and NOT 0.3.7-1, otherwise vorbisspi won't work.\n   -->\n<dependency>\n  <groupId>com.googlecode.soundlibs</groupId>\n  <artifactId>tritonus-share</artifactId>\n  <version>0.3.7-2</version>\n</dependency>\n<dependency>\n  <groupId>com.googlecode.soundlibs</groupId>\n  <artifactId>mp3spi</artifactId>\n  <version>1.9.5-1</version>\n</dependency>\n<dependency>\n  <groupId>com.googlecode.soundlibs</groupId>\n  <artifactId>vorbisspi</artifactId>\n  <version>1.0.3-1</version>\n</dependency>\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": "8", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "import java.io.File;\nimport java.io.IOException;\n\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine.Info;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.SourceDataLine;\nimport javax.sound.sampled.UnsupportedAudioFileException;\n\nimport static javax.sound.sampled.AudioSystem.getAudioInputStream;\nimport static javax.sound.sampled.AudioFormat.Encoding.PCM_SIGNED;\n\npublic class AudioFilePlayer {\n\n    public static void main(String[] args) {\n        final AudioFilePlayer player = new AudioFilePlayer ();\n        player.play(\"something.mp3\");\n        player.play(\"something.ogg\");\n    }\n\n    public void play(String filePath) {\n        final File file = new File(filePath);\n\n        try (final AudioInputStream in = getAudioInputStream(file)) {\n\n            final AudioFormat outFormat = getOutFormat(in.getFormat());\n            final Info info = new Info(SourceDataLine.class, outFormat);\n\n            try (final SourceDataLine line =\n                     (SourceDataLine) AudioSystem.getLine(info)) {\n\n                if (line != null) {\n                    line.open(outFormat);\n                    line.start();\n                    stream(getAudioInputStream(outFormat, in), line);\n                    line.drain();\n                    line.stop();\n                }\n            }\n\n        } catch (UnsupportedAudioFileException \n               | LineUnavailableException \n               | IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    private AudioFormat getOutFormat(AudioFormat inFormat) {\n        final int ch = inFormat.getChannels();\n\n        final float rate = inFormat.getSampleRate();\n        return new AudioFormat(PCM_SIGNED, rate, 16, ch, ch * 2, rate, false);\n    }\n\n    private void stream(AudioInputStream in, SourceDataLine line) \n        throws IOException {\n        final byte[] buffer = new byte[4096];\n        for (int n = 0; n != -1; n = in.read(buffer, 0, buffer.length)) {\n            line.write(buffer, 0, n);\n        }\n    }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": "8", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class SimplePlayer {\n\n    public SimplePlayer(){\n\n        try{\n\n             FileInputStream fis = new FileInputStream(\"File location.\");\n             Player playMP3 = new Player(fis);\n\n             playMP3.play();\n\n        }  catch(Exception e){\n             System.out.println(e);\n           }\n    } \n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": "4", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import javazoom.jl.player.*;\nimport java.io.FileInputStream;\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": "4", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import jaco.mp3.player.MP3Player;\nimport java.io.File;\n\npublic class Example1 {\n  public static void main(String[] args) {\n    new MP3Player(new File(\"test.mp3\")).play();\n  }\n}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": "3", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "File f = new File(\"D:/Songs/preview.mp3\");\nMediaLocator ml = new MediaLocator(f.toURL());\nPlayer p = Manager.createPlayer(ml);\np.start();\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": "2", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://docs.oracle.com/javase/tutorial/sound/playing.html", "url position": 12, "segments": [{"code": "\nvoid open(AudioInputStream stream)\nvoid open(AudioFormat format, byte[] data, int offset, int bufferSize)\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\nvoid open(AudioFormat format)\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid open(AudioFormat format, int bufferSize)\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint write(byte[] b, int offset, int length)\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n// read chunks from a stream and write them to a source data \nline \nline.start();\nwhile (total < totalToRead && !stopped)}\n    numBytesRead = stream.read(myData, 0, numBytesToRead);\n    if (numBytesRead == -1) break;\n    total += numBytesRead; \n    line.write(myData, 0, numBytesRead);\n\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nline.write(b, offset, numBytesToWrite); \n//this is the final invocation of write\nline.drain();\nline.stop();\nline.close();\nline = null;\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npublic void addLineListener(LineListener listener)\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nboolean isSynchronizationSupported(Line[] lines, boolean  maintainSync)\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to play audio file", "url": "https://stackoverflow.com/questions/41331288/java-how-to-play-an-audio-file-like-wav-and-mp3-from-a-file", "url position": 2, "segments": [{"code": "String soundFile = \"path/to/.wav/file\";\nInputStream in = new FileInputStream(soundFile );\n\n// create an audiostream from the inputstream\nAudioStream audioStream = new AudioStream(in);\n\n// play the audio clip with the audioplayer class\nAudioPlayer.player.start(audioStream);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.SourceDataLine;\nimport javax.sound.sampled.UnsupportedAudioFileException;\n\npublic class AePlayWave extends Thread {\n\n    protected static final boolean DEBUG = false;\n\n    protected InputStream inputStream;\n\n    public AePlayWave(InputStream inputStream) {\n        this.inputStream = inputStream;\n        if (DEBUG) System.out.println(\"AePlayWave constructor\");\n    }\n\n    @Override\n    public void run() {\n        if (DEBUG) System.out.println(\"AePlayWave running\");\n\n        AudioInputStream audioInputStream = verifyInputStream();\n        if (audioInputStream == null) {\n            return;\n        }\n\n        AudioFormat format = audioInputStream.getFormat();\n        SourceDataLine audioLine = openInputStream(format);\n\n        if (DEBUG) System.out.println(audioLine.getLineInfo());\n\n        if (audioLine != null) {\n            audioLine.start();\n            playInputStream(audioInputStream, audioLine);\n        }\n    }\n\n    protected AudioInputStream verifyInputStream() {\n        if (DEBUG) System.out.println(\"AePlayWave verifyInputStream\");\n        AudioInputStream audioInputStream = null;\n        try {\n            audioInputStream = AudioSystem.getAudioInputStream(inputStream);\n        } catch (UnsupportedAudioFileException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return audioInputStream;\n    }\n\n    protected SourceDataLine openInputStream(AudioFormat format) {\n        if (DEBUG) System.out.println(\"AePlayWave openInputStream\");\n        DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n        SourceDataLine audioLine = null;\n        if (DEBUG) System.out.println(\"AePlayWave openInputStream try\");\n        try {\n            audioLine = (SourceDataLine) AudioSystem.getLine(info);\n            if (DEBUG) System.out.println(\"AePlayWave openInputStream getLine\");\n            audioLine.open(format);\n            if (DEBUG) System.out.println(\"AePlayWave openInputStream open\");\n        } catch (LineUnavailableException e) {\n            e.printStackTrace();\n            return null;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n        return audioLine;\n    }\n\n    protected void playInputStream(AudioInputStream audioInputStream,\n            SourceDataLine audioLine) {\n        if (DEBUG) System.out.println(\"AePlayWave playInputStream\");\n        int externalBufferSize = (int) audioInputStream.getFrameLength() * 4;\n        if (DEBUG) System.out.println(\"AePlayWave playInputStream externalBufferSize: \" \n                + externalBufferSize);\n        int nBytesRead = 0;\n        byte[] abData = new byte[externalBufferSize];\n\n        try {\n            while (nBytesRead != -1) {\n                nBytesRead = audioInputStream.read(abData, 0, abData.length);\n                if (nBytesRead >= 0) {\n                    if (DEBUG) System.out.println(\"Bytes read: \" + nBytesRead);\n                    audioLine.write(abData, 0, nBytesRead);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        } finally {\n            audioLine.drain();\n            audioLine.close();\n        }\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "InputStream inputStream = getClass().getResourceAsStream(\"alarm-clock-1.wav\");\nAePlayWave playWave = new AePlayWave(inputStream);\nplayWave.run();\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://stackoverflow.com/questions/34534732/play-audio-files-in-java", "url position": 3, "segments": [{"code": " clip.start();\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "3", "answer_stars": 0, "length": false, "semicolon": true}, {"code": " clip.start();\n Thread.sleep(20000);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "3", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "long audioPlayTime = 1000; //clip duration in miliseconds.\ntry {\n           Thread.sleep(audioPlayTime);\n} catch (InterruptedException ex){\n            //TODO\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://rbwhitaker.wikidot.com/java-play-audio", "url position": 13, "segments": [{"code": "\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\n \nimport sun.audio.AudioPlayer;\nimport sun.audio.AudioStream;\n \npublic class AudioDemo \n{\n    public static void main(String[] args) throws Exception\n    {\n        String filename = args[0];\n \n        InputStream in = new FileInputStream(new File(filename));\n        AudioStream audioStream = new AudioStream(in);\n        AudioPlayer.player.start(audioStream);\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nAudioPlayer.player.stop(audioStream);\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://stackoverflow.com/questions/2416935/how-to-play-wav-files-with-java", "url position": 5, "segments": [{"code": "import java.io.File;\nimport java.io.IOException;\n\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.SourceDataLine;\n\npublic class MakeSound {\n\n    private final int BUFFER_SIZE = 128000;\n    private File soundFile;\n    private AudioInputStream audioStream;\n    private AudioFormat audioFormat;\n    private SourceDataLine sourceLine;\n\n    /**\n     * @param filename the name of the file that is going to be played\n     */\n    public void playSound(String filename){\n\n        String strFilename = filename;\n\n        try {\n            soundFile = new File(strFilename);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        try {\n            audioStream = AudioSystem.getAudioInputStream(soundFile);\n        } catch (Exception e){\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        audioFormat = audioStream.getFormat();\n\n        DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);\n        try {\n            sourceLine = (SourceDataLine) AudioSystem.getLine(info);\n            sourceLine.open(audioFormat);\n        } catch (LineUnavailableException e) {\n            e.printStackTrace();\n            System.exit(1);\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        sourceLine.start();\n\n        int nBytesRead = 0;\n        byte[] abData = new byte[BUFFER_SIZE];\n        while (nBytesRead != -1) {\n            try {\n                nBytesRead = audioStream.read(abData, 0, abData.length);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if (nBytesRead >= 0) {\n                @SuppressWarnings(\"unused\")\n                int nBytesWritten = sourceLine.write(abData, 0, nBytesRead);\n            }\n        }\n\n        sourceLine.drain();\n        sourceLine.close();\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "32", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\nimport javax.sound.sampled.*;\n\ntry {\n    File yourFile;\n    AudioInputStream stream;\n    AudioFormat format;\n    DataLine.Info info;\n    Clip clip;\n\n    stream = AudioSystem.getAudioInputStream(yourFile);\n    format = stream.getFormat();\n    info = new DataLine.Info(Clip.class, format);\n    clip = (Clip) AudioSystem.getLine(info);\n    clip.open(stream);\n    clip.start();\n}\ncatch (Exception e) {\n    //whatevers\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "25", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public static void play(String filename)\n{\n    try\n    {\n        Clip clip = AudioSystem.getClip();\n        clip.open(AudioSystem.getAudioInputStream(new File(filename)));\n        clip.start();\n    }\n    catch (Exception exc)\n    {\n        exc.printStackTrace(System.out);\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "15", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// ...\nclip.start();\nwhile (!clip.isRunning())\n    Thread.sleep(10);\nwhile (clip.isRunning())\n    Thread.sleep(10);\nclip.close();\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "15", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.File;\nimport javax.sound.sampled.*;\n\npublic void play(File file) \n{\n    try\n    {\n        final Clip clip = (Clip)AudioSystem.getLine(new Line.Info(Clip.class));\n\n        clip.addLineListener(new LineListener()\n        {\n            @Override\n            public void update(LineEvent event)\n            {\n                if (event.getType() == LineEvent.Type.STOP)\n                    clip.close();\n            }\n        });\n\n        clip.open(AudioSystem.getAudioInputStream(file));\n        clip.start();\n    }\n    catch (Exception exc)\n    {\n        exc.printStackTrace(System.out);\n    }\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "9", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public static void main(String[] args) {\n        AePlayWave aw = new AePlayWave( \"C:\\\\WINDOWS\\\\Media\\\\tada.wav\" );\n        aw.start();     \n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "3", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "class Sound implements Playable {\n\n    private final Path wavPath;\n    private final CyclicBarrier barrier = new CyclicBarrier(2);\n\n    Sound(final Path wavPath) {\n\n        this.wavPath = wavPath;\n    }\n\n    @Override\n    public void play() throws LineUnavailableException, IOException, UnsupportedAudioFileException {\n\n        try (final AudioInputStream audioIn = AudioSystem.getAudioInputStream(wavPath.toFile());\n             final Clip clip = AudioSystem.getClip()) {\n\n            listenForEndOf(clip);\n            clip.open(audioIn);\n            clip.start();\n            waitForSoundEnd();\n        }\n    }\n\n    private void listenForEndOf(final Clip clip) {\n\n        clip.addLineListener(event -> {\n            if (event.getType() == LineEvent.Type.STOP) waitOnBarrier();\n        });\n    }\n\n    private void waitOnBarrier() {\n\n        try {\n\n            barrier.await();\n        } catch (final InterruptedException ignored) {\n        } catch (final BrokenBarrierException e) {\n\n            throw new RuntimeException(e);\n        }\n    }\n\n    private void waitForSoundEnd() {\n\n        waitOnBarrier();\n    }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import javax.sound.sampled.*;\nimport java.io.*;\npublic class playsound\n{\n    public static void main (String args[]) throws Exception\n    {\n        playSound ( args [0] );\n    }\n    public static\n    void playSound\n    ( \n        String filename\n    ) throws Exception\n    {\n\n        AudioInputStream \n        audioStream = \n        AudioSystem.getAudioInputStream\n        ( new File (filename) );\n\n        int BUFFER_SIZE = 128000;\n        AudioFormat audioFormat = null;\n        SourceDataLine sourceLine = null;\n\n        audioFormat = audioStream.getFormat();\n\n        sourceLine = (SourceDataLine) \n        AudioSystem.getSourceDataLine\n        ( audioFormat );\n\n        sourceLine.open ( audioFormat );\n\n        sourceLine.start();\n\n        int nBytesRead = 0;\n        byte[] abData = new byte[BUFFER_SIZE];\n        while (nBytesRead != -1) \n        {\n            try \n            {\n                nBytesRead = \n                audioStream.read\n                ( abData, 0, abData.length );\n            } \n            catch (IOException e) \n            {\n                e.printStackTrace();\n            }\n            if (nBytesRead >= 0) \n            {\n                int nBytesWritten = \n                sourceLine.write\n                ( abData, 0, nBytesRead );\n            }\n        }\n\n        sourceLine.drain();\n        sourceLine.close();\n    }\n\n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\nimport sun.audio.AudioPlayer;\nimport sun.audio.AudioStream;\n\npublic class AudioWizz extends JPanel implements ActionListener {\n\n    private static final long serialVersionUID = 1L; //you like your cereal and the program likes their \"serial\"\n\n    static AudioWizz a;\n    static JButton playBuddon;\n    static JFrame frame;\n\n    public static void main(String arguments[]){\n\n        frame= new JFrame(\"AudioWizz\");\n        frame.setSize(300,300);\n        frame.setVisible(true);\n        a= new AudioWizz();\n        playBuddon= new JButton(\"PUSH ME\");\n        playBuddon.setBounds(10,10,80,30);\n        playBuddon.addActionListener(a);\n\n        frame.add(playBuddon);\n        frame.add(a);\n    }\n\n    public void actionPerformed(ActionEvent e){ //an eventListener\n        if (e.getSource() == playBuddon) {\n            try {\n                InputStream in = new FileInputStream(\"*.wav\");\n                AudioStream sound = new AudioStream(in);\n                AudioPlayer.player.start(sound);\n            } catch(FileNotFoundException e1) {\n                e1.printStackTrace();\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n    }\n\n}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.File;\n\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\nimport javax.sound.sampled.Line;\nimport javax.sound.sampled.LineEvent;\nimport javax.sound.sampled.LineListener;\nimport javax.swing.JDialog;\nimport javax.swing.JFileChooser;\n\npublic class CoreJavaSound extends Object implements LineListener {\n    File soundFile;\n\n    JDialog playingDialog;\n\n    Clip clip;\n\n    public static void main(String[] args) throws Exception {\n        CoreJavaSound s = new CoreJavaSound();\n    }\n\n    public CoreJavaSound() throws Exception {\n        JFileChooser chooser = new JFileChooser();\n        chooser.showOpenDialog(null);\n        soundFile = chooser.getSelectedFile();\n\n        System.out.println(\"Playing \" + soundFile.getName());\n\n        Line.Info linfo = new Line.Info(Clip.class);\n        Line line = AudioSystem.getLine(linfo);\n        clip = (Clip) line;\n        clip.addLineListener(this);\n        AudioInputStream ais = AudioSystem.getAudioInputStream(soundFile);\n        clip.open(ais);\n        clip.start();\n    }\n\n    public void update(LineEvent le) {\n        LineEvent.Type type = le.getType();\n        if (type == LineEvent.Type.OPEN) {\n            System.out.println(\"OPEN\");\n        } else if (type == LineEvent.Type.CLOSE) {\n            System.out.println(\"CLOSE\");\n            System.exit(0);\n        } else if (type == LineEvent.Type.START) {\n            System.out.println(\"START\");\n            playingDialog.setVisible(true);\n        } else if (type == LineEvent.Type.STOP) {\n            System.out.println(\"STOP\");\n            playingDialog.setVisible(false);\n            clip.close();\n        }\n    }\n}\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://stackoverflow.com/questions/16870064/how-to-play-an-mp3-file-in-java", "url position": 4, "segments": [{"code": "import javax.media.*;\nimport java.net.*;\nimport java.io.*;\nimport java.util.*;\nclass AudioPlay\n{\n public static void main(String args[]) throws Exception\n {\n\n\n // Take the path of the audio file from command line\n File f=new File(\"song.mp3\");\n\n\n // Create a Player object that realizes the audio\n final Player p=Manager.createRealizedPlayer(f.toURI().toURL());\n\n\n  // Start the music\n  p.start();\n\n\n  // Create a Scanner object for taking input from cmd\n  Scanner s=new Scanner(System.in);\n\n\n  // Read a line and store it in st\n  String st=s.nextLine();\n\n\n   // If user types 's', stop the audio\n   if(st.equals(\"s\"))\n   {\n   p.stop();\n   }\n }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "2", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class SimplePlayer {\n\npublic SimplePlayer(){\n\n    try{\n\n    FileInputStream fis = new FileInputStream(\"File location.\");\n    Player playMP3 = new Player(fis);\n\n    playMP3.play();\n\n    }catch(Exception e){System.out.println(e);}\n}\n\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import javazoom.jl.player.*;\nimport java.io.FileInputStream;\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.net.URL;\nimport javafx.application.Application;\nimport javafx.scene.media.Media;\nimport javafx.scene.media.MediaPlayer;\nimport javafx.stage.Stage;\n\npublic class VLC extends Application {\n    void playMedia() {\n        String mp3 = \"00- Tu Hi Mera.mp3\";\n        URL resource = getClass().getResource(mp3);\n        System.out.println(resource.toString());\n        Media media = new Media(resource.toString());\n        MediaPlayer mediaPlayer = new MediaPlayer(media);\n        mediaPlayer.play();\n    }\n    public static void main(String args[]) {\n        new VLC().playMedia();\n    }\n    @Override\n    public void start(Stage stage) throws Exception {\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://alvinalexander.com/java/java-audio-example-java-au-play-sound", "url position": 8, "segments": [{"code": "import java.io.*;\nimport sun.audio.*;\n\n/**\n * A simple Java sound file example (i.e., Java code to play a sound file).\n *AudioStream and AudioPlayer code comes from a javaworld.com example.\n * @author alvin alexander, devdaily.com.\n */\npublic class JavaAudioPlaySoundExample\n{\n  public static void main(String[] args) \n  throws Exception\n  {\n    // open the sound file as a Java input stream\n    String gongFile = \"/Users/al/DevDaily/Projects/MeditationApp/resources/gong.au\";\n    InputStream in = new FileInputStream(gongFile);\n\n    // create an audiostream from the inputstream\n    AudioStream audioStream = new AudioStream(in);\n\n    // play the audio clip with the audioplayer class\n    AudioPlayer.player.start(audioStream);\n  }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private void playSound() \n{\n  try\n  {\n    // get the sound file as a resource out of my jar file;\n    // the sound file must be in the same directory as this class file.\n    // the input stream portion of this recipe comes from a javaworld.com article.\n    InputStream inputStream = getClass().getResourceAsStream(SOUND_FILENAME);\n    AudioStream audioStream = new AudioStream(inputStream);\n    AudioPlayer.player.start(audioStream);\n  }\n  catch (Exception e)\n  {\n    // a special way i'm handling logging in this application\n    if (debugFileWriter!=null) e.printStackTrace(debugFileWriter);\n  }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://www.geeksforgeeks.org/play-audio-file-using-java/", "url position": 7, "segments": [{"code": "\r\n// Java program to play an Audio\r\n// file using Clip Object\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.sound.sampled.LineUnavailableException;\r\nimport javax.sound.sampled.UnsupportedAudioFileException;\r\n\r\npublic class SimpleAudioPlayer \r\n{\r\n\r\n    // to store current position\r\n    Long currentFrame;\r\n    Clip clip;\r\n    \r\n    // current status of clip\r\n    String status;\r\n    \r\n    AudioInputStream audioInputStream;\r\n    static String filePath;\r\n\r\n    // constructor to initialize streams and clip\r\n    public SimpleAudioPlayer()\r\n        throws UnsupportedAudioFileException,\r\n        IOException, LineUnavailableException \r\n    {\r\n        // create AudioInputStream object\r\n        audioInputStream = \r\n                AudioSystem.getAudioInputStream(new File(filePath).getAbsoluteFile());\r\n        \r\n        // create clip reference\r\n        clip = AudioSystem.getClip();\r\n        \r\n        // open audioInputStream to the clip\r\n        clip.open(audioInputStream);\r\n        \r\n        clip.loop(Clip.LOOP_CONTINUOUSLY);\r\n    }\r\n\r\n    public static void main(String[] args) \r\n    {\r\n        try\r\n        {\r\n            filePath = \"Your path for the file\";\r\n            SimpleAudioPlayer audioPlayer = \r\n                            new SimpleAudioPlayer();\r\n            \r\n            audioPlayer.play();\r\n            Scanner sc = new Scanner(System.in);\r\n            \r\n            while (true)\r\n            {\r\n                System.out.println(\"1. pause\");\r\n                System.out.println(\"2. resume\");\r\n                System.out.println(\"3. restart\");\r\n                System.out.println(\"4. stop\");\r\n                System.out.println(\"5. Jump to specific time\");\r\n                int c = sc.nextInt();\r\n                audioPlayer.gotoChoice(c);\r\n                if (c == 4)\r\n                break;\r\n            }\r\n            sc.close();\r\n        } \r\n        \r\n        catch (Exception ex) \r\n        {\r\n            System.out.println(\"Error with playing sound.\");\r\n            ex.printStackTrace();\r\n        \r\n          }\r\n    }\r\n    \r\n    // Work as the user enters his choice\r\n    \r\n    private void gotoChoice(int c)\r\n            throws IOException, LineUnavailableException, UnsupportedAudioFileException \r\n    {\r\n        switch (c) \r\n        {\r\n            case 1:\r\n                pause();\r\n                break;\r\n            case 2:\r\n                resumeAudio();\r\n                break;\r\n            case 3:\r\n                restart();\r\n                break;\r\n            case 4:\r\n                stop();\r\n                break;\r\n            case 5:\r\n                System.out.println(\"Enter time (\" + 0 + \r\n                \", \" + clip.getMicrosecondLength() + \")\");\r\n                Scanner sc = new Scanner(System.in);\r\n                long c1 = sc.nextLong();\r\n                jump(c1);\r\n                break;\r\n    \r\n        }\r\n    \r\n    }\r\n    \r\n    // Method to play the audio\r\n    public void play() \r\n    {\r\n        //start the clip\r\n        clip.start();\r\n        \r\n        status = \"play\";\r\n    }\r\n    \r\n    // Method to pause the audio\r\n    public void pause() \r\n    {\r\n        if (status.equals(\"paused\")) \r\n        {\r\n            System.out.println(\"audio is already paused\");\r\n            return;\r\n        }\r\n        this.currentFrame = \r\n        this.clip.getMicrosecondPosition();\r\n        clip.stop();\r\n        status = \"paused\";\r\n    }\r\n    \r\n    // Method to resume the audio\r\n    public void resumeAudio() throws UnsupportedAudioFileException,\r\n                                IOException, LineUnavailableException \r\n    {\r\n        if (status.equals(\"play\")) \r\n        {\r\n            System.out.println(\"Audio is already \"+\r\n            \"being played\");\r\n            return;\r\n        }\r\n        clip.close();\r\n        resetAudioStream();\r\n        clip.setMicrosecondPosition(currentFrame);\r\n        this.play();\r\n    }\r\n    \r\n    // Method to restart the audio\r\n    public void restart() throws IOException, LineUnavailableException,\r\n                                            UnsupportedAudioFileException \r\n    {\r\n        clip.stop();\r\n        clip.close();\r\n        resetAudioStream();\r\n        currentFrame = 0L;\r\n        clip.setMicrosecondPosition(0);\r\n        this.play();\r\n    }\r\n    \r\n    // Method to stop the audio\r\n    public void stop() throws UnsupportedAudioFileException,\r\n    IOException, LineUnavailableException \r\n    {\r\n        currentFrame = 0L;\r\n        clip.stop();\r\n        clip.close();\r\n    }\r\n    \r\n    // Method to jump over a specific part\r\n    public void jump(long c) throws UnsupportedAudioFileException, IOException,\r\n                                                        LineUnavailableException \r\n    {\r\n        if (c > 0 && c < clip.getMicrosecondLength()) \r\n        {\r\n            clip.stop();\r\n            clip.close();\r\n            resetAudioStream();\r\n            currentFrame = c;\r\n            clip.setMicrosecondPosition(c);\r\n            this.play();\r\n        }\r\n    }\r\n    \r\n    // Method to reset audio stream\r\n    public void resetAudioStream() throws UnsupportedAudioFileException, IOException,\r\n                                            LineUnavailableException \r\n    {\r\n        audioInputStream = AudioSystem.getAudioInputStream(\r\n        new File(filePath).getAbsoluteFile());\r\n        clip.open(audioInputStream);\r\n        clip.loop(Clip.LOOP_CONTINUOUSLY);\r\n    }\r\n\r\n}\r\n\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://stackoverflow.com/questions/42955509/how-to-play-a-simple-audio-file-java", "url position": 6, "segments": [{"code": "import javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public void sound() {\n    try {\n        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(this.getClass().getResource(\"NameOfFile.wav\"));\n        Clip clip = AudioSystem.getClip();\n        clip.open(audioInputStream);\n        clip.start();\n        // If you want the sound to loop infinitely, then put: clip.loop(Clip.LOOP_CONTINUOUSLY); \n        // If you want to stop the sound, then use clip.stop();\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://www.codejava.net/coding/how-to-play-back-audio-in-java-with-examples", "url position": 11, "segments": [{"code": "File audioFile = new File(audioFilePath);\n\nAudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile); ", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "AudioFormat format = audioStream.getFormat();\n\nDataLine.Info info = new DataLine.Info(Clip.class, format); ", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Clip audioClip = (Clip) AudioSystem.getLine(info); ", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "audioClip.open(audioStream);\naudioClip.start(); ", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "audioClip.close();\naudioStream.close();\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "package net.codejava.sound;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineEvent;\nimport javax.sound.sampled.LineListener;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.UnsupportedAudioFileException;\n\n/**\n * This is an example program that demonstrates how to play back an audio file\n * using the Clip in Java Sound API.\n * @author www.codejava.net\n *\n */\npublic class AudioPlayerExample1 implements LineListener {\n\t\n\t/**\n\t * this flag indicates whether the playback completes or not.\n\t */\n\tboolean playCompleted;\n\t\n\t/**\n\t * Play a given audio file.\n\t * @param audioFilePath Path of the audio file.\n\t */\n\tvoid play(String audioFilePath) {\n\t\tFile audioFile = new File(audioFilePath);\n\n\t\ttry {\n\t\t\tAudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);\n\n\t\t\tAudioFormat format = audioStream.getFormat();\n\n\t\t\tDataLine.Info info = new DataLine.Info(Clip.class, format);\n\n\t\t\tClip audioClip = (Clip) AudioSystem.getLine(info);\n\n\t\t\taudioClip.addLineListener(this);\n\n\t\t\taudioClip.open(audioStream);\n\t\t\t\n\t\t\taudioClip.start();\n\t\t\t\n\t\t\twhile (!playCompleted) {\n\t\t\t\t// wait for the playback completes\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t} catch (InterruptedException ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\taudioClip.close();\n\t\t\t\n\t\t} catch (UnsupportedAudioFileException ex) {\n\t\t\tSystem.out.println(\"The specified audio file is not supported.\");\n\t\t\tex.printStackTrace();\n\t\t} catch (LineUnavailableException ex) {\n\t\t\tSystem.out.println(\"Audio line for playing back is unavailable.\");\n\t\t\tex.printStackTrace();\n\t\t} catch (IOException ex) {\n\t\t\tSystem.out.println(\"Error playing the audio file.\");\n\t\t\tex.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * Listens to the START and STOP events of the audio line.\n\t */\n\t@Override\n\tpublic void update(LineEvent event) {\n\t\tLineEvent.Type type = event.getType();\n\t\t\n\t\tif (type == LineEvent.Type.START) {\n\t\t\tSystem.out.println(\"Playback started.\");\n\t\t\t\n\t\t} else if (type == LineEvent.Type.STOP) {\n\t\t\tplayCompleted = true;\n\t\t\tSystem.out.println(\"Playback completed.\");\n\t\t}\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tString audioFilePath = \"E:/Test/Audio.wav\";\n\t\tAudioPlayerExample1 player = new AudioPlayerExample1();\n\t\tplayer.play(audioFilePath);\n\t}\n\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "audioClip.addLineListener(this);\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "public class AudioPlayerExample1 implements LineListener\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "@Override\npublic void update(LineEvent event) {\n\tLineEvent.Type type = event.getType();\n\n\tif (type == LineEvent.Type.START) {\n\t\tSystem.out.println(\"Playback started.\");\n\n\t} else if (type == LineEvent.Type.STOP) {\n\t\tplayCompleted = true;\n\t\tSystem.out.println(\"Playback completed.\");\n\t}\n\n}\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "int frameLength = audioClip.getFrameLength();\t// length in frames\n\nlong duration = audioClip.getMicrosecondLength();\t// length in microseconds ", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "audioClip.setMicrosecondPosition(50_000_000); // start playing from the 50th second\n\naudioClip.setFramePosition(300_000); // start playing from the 300,000th frame ", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "audioClip.loop(2);\t// loop 2 times (total play 3 times) ", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "// loop from frame 10,000th to frame 500,000th\naudioClip.setLoopPoints(10_000, 500_000);\naudioClip.loop(1); ", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "audioClip.stop(); ", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "audioClip.open(audioStream);\n\nint frameLength = audioClip.getFrameLength();\nSystem.out.println(\"Frame length = \" + frameLength);\n\nlong duration = audioClip.getMicrosecondLength();\nSystem.out.println(\"Duration = \" + (duration / 1_000_000) + \" sec\");\n\naudioClip.setMicrosecondPosition(10_000_000); // start playing from the 10th second\n\naudioClip.loop(1);\t// loop 1 time\n\naudioClip.start(); ", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "File audioFile = new File(audioFilePath);\n\nAudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);\n\nAudioFormat format = audioStream.getFormat();\n\nDataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n\nSourceDataLine audioLine = (SourceDataLine) AudioSystem.getLine(info); ", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "audioLine.open(format);\n\naudioLine.start(); ", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "int BUFFER_SIZE = 4096;\n\nbyte[] bytesBuffer = new byte[BUFFER_SIZE];\nint bytesRead = -1;\n\nwhile ((bytesRead = audioStream.read(bytesBuffer)) != -1) {\n\taudioLine.write(bytesBuffer, 0, bytesRead);\n} ", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "audioLine.drain();\n\naudioLine.close();\n\naudioStream.close();\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "package net.codejava.sound;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.SourceDataLine;\nimport javax.sound.sampled.UnsupportedAudioFileException;\n\n/**\n * This is an example program that demonstrates how to play back an audio file\n * using the SourceDataLine in Java Sound API.\n * @author www.codejava.net\n *\n */\npublic class AudioPlayerExample2 {\n\n\t// size of the byte buffer used to read/write the audio stream\n\tprivate static final int BUFFER_SIZE = 4096;\n\t\n\t/**\n\t * Play a given audio file.\n\t * @param audioFilePath Path of the audio file.\n\t */\n\tvoid play(String audioFilePath) {\n\t\tFile audioFile = new File(audioFilePath);\n\t\ttry {\n\t\t\tAudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);\n\n\t\t\tAudioFormat format = audioStream.getFormat();\n\n\t\t\tDataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n\n\t\t\tSourceDataLine audioLine = (SourceDataLine) AudioSystem.getLine(info);\n\n\t\t\taudioLine.open(format);\n\n\t\t\taudioLine.start();\n\t\t\t\n\t\t\tSystem.out.println(\"Playback started.\");\n\t\t\t\n\t\t\tbyte[] bytesBuffer = new byte[BUFFER_SIZE];\n\t\t\tint bytesRead = -1;\n\n\t\t\twhile ((bytesRead = audioStream.read(bytesBuffer)) != -1) {\n\t\t\t\taudioLine.write(bytesBuffer, 0, bytesRead);\n\t\t\t}\n\t\t\t\n\t\t\taudioLine.drain();\n\t\t\taudioLine.close();\n\t\t\taudioStream.close();\n\t\t\t\n\t\t\tSystem.out.println(\"Playback completed.\");\n\t\t\t\n\t\t} catch (UnsupportedAudioFileException ex) {\n\t\t\tSystem.out.println(\"The specified audio file is not supported.\");\n\t\t\tex.printStackTrace();\n\t\t} catch (LineUnavailableException ex) {\n\t\t\tSystem.out.println(\"Audio line for playing back is unavailable.\");\n\t\t\tex.printStackTrace();\n\t\t} catch (IOException ex) {\n\t\t\tSystem.out.println(\"Error playing the audio file.\");\n\t\t\tex.printStackTrace();\n\t\t}\t\t\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tString audioFilePath = \"E:/Test/Audio.wav\";\n\t\tAudioPlayerExample1 player = new AudioPlayerExample1();\n\t\tplayer.play(audioFilePath);\n\t}\n\n}\n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://www.youtube.com/watch?v=VMSTTg5EEnY", "url position": 16, "segments": []},
{"query": "How to play audio file", "url": "https://www.youtube.com/watch?v=syGFTx7iQio", "url position": 15, "segments": []},
{"query": "How to play audio file", "url": "https://www.ntu.edu.sg/home/ehchua/programming/java/J8c_PlayingSound.html", "url position": 10, "segments": [{"code": "\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport javax.sound.sampled.*;\r\nimport javax.swing.*;\r\n   \r\n// To play sound using Clip, the process need to be alive.\r\n// Hence, we use a Swing application.\r\npublic class SoundClipTest extends JFrame {\r\n   \r\n   // Constructor\r\n   public SoundClipTest() {\r\n      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n      this.setTitle(\"Test Sound Clip\");\r\n      this.setSize(300, 200);\r\n      this.setVisible(true);\r\n   \r\n      try {\r\n         // Open an audio input stream.\r\n         URL url = this.getClass().getClassLoader().getResource(\"gameover.wav\");\r\n         AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);\r\n         // Get a sound clip resource.\r\n         Clip clip = AudioSystem.getClip();\r\n         // Open audio clip and load samples from the audio input stream.\r\n         clip.open(audioIn);\r\n         clip.start();\r\n      } catch (UnsupportedAudioFileException e) {\r\n         e.printStackTrace();\r\n      } catch (IOException e) {\r\n         e.printStackTrace();\r\n      } catch (LineUnavailableException e) {\r\n         e.printStackTrace();\r\n      }\r\n   }\r\n   \r\n   public static void main(String[] args) {\r\n      new SoundClipTest();\r\n   }\r\n}\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n// from a wave File\r\nFile soundFile = new File(\"eatfood.wav\");\r\nAudioInputStream audioIn = AudioSystem.getAudioInputStream(soundFile);\r\n// from a URL\r\nURL url = new URL(\"http://www.zzz.com/eatfood.wav\");\r\nAudioInputStream audioIn = AudioSystem.getAudioInputStream(url);\r\n// can read from a disk file and also a file contained inside a JAR (used for distribution)\r\n// recommended\r\nURL url = this.getClass().getClassLoader().getResource(\"eatfood.wav\");\r\nAudioInputStream audioIn = AudioSystem.getAudioInputStream(url);\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nClip clip = AudioSystem.getClip();\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nclip.open(audioIn);\r\n// For small-size file only. Do not use this to open a large file over slow network, as it blocks.\r\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n// start()\r\nclip.start();  // play once\r\n// Loop()\r\nclip.loop(0);  // repeat none (play once), can be used in place of start().\r\nclip.loop(5);  // repeat 5 times (play 6 times)\r\nclip.loop(Clip.LOOP_CONTINUOUSLY);  // repeat forever\r\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nif (clip.isRunning()) clip.stop();\r\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nimport java.io.*;\r\nimport java.net.URL;\r\nimport javax.sound.sampled.*;\r\n   \r\n/**\r\n * This enum encapsulates all the sound effects of a game, so as to separate the sound playing\r\n * codes from the game codes.\r\n * 1. Define all your sound effect names and the associated wave file.\r\n * 2. To play a specific sound, simply invoke SoundEffect.SOUND_NAME.play().\r\n * 3. You might optionally invoke the static method SoundEffect.init() to pre-load all the\r\n *    sound files, so that the play is not paused while loading the file for the first time.\r\n * 4. You can use the static variable SoundEffect.volume to mute the sound.\r\n */\r\npublic enum SoundEffect {\r\n   EXPLODE(\"explode.wav\"),   // explosion\r\n   GONG(\"gong.wav\"),         // gong\r\n   SHOOT(\"shoot.wav\");       // bullet\r\n   \r\n   // Nested class for specifying volume\r\n   public static enum Volume {\r\n      MUTE, LOW, MEDIUM, HIGH\r\n   }\r\n   \r\n   public static Volume volume = Volume.LOW;\r\n   \r\n   // Each sound effect has its own clip, loaded with its own sound file.\r\n   private Clip clip;\r\n   \r\n   // Constructor to construct each element of the enum with its own sound file.\r\n   SoundEffect(String soundFileName) {\r\n      try {\r\n         // Use URL (instead of File) to read from disk and JAR.\r\n         URL url = this.getClass().getClassLoader().getResource(soundFileName);\r\n         // Set up an audio input stream piped from the sound file.\r\n         AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(url);\r\n         // Get a clip resource.\r\n         clip = AudioSystem.getClip();\r\n         // Open audio clip and load samples from the audio input stream.\r\n         clip.open(audioInputStream);\r\n      } catch (UnsupportedAudioFileException e) {\r\n         e.printStackTrace();\r\n      } catch (IOException e) {\r\n         e.printStackTrace();\r\n      } catch (LineUnavailableException e) {\r\n         e.printStackTrace();\r\n      }\r\n   }\r\n   \r\n   // Play or Re-play the sound effect from the beginning, by rewinding.\r\n   public void play() {\r\n      if (volume != Volume.MUTE) {\r\n         if (clip.isRunning())\r\n            clip.stop();   // Stop the player if it is still running\r\n         clip.setFramePosition(0); // rewind to the beginning\r\n         clip.start();     // Start playing\r\n      }\r\n   }\r\n   \r\n   // Optional static method to pre-load all the sound files.\r\n   static void init() {\r\n      values(); // calls the constructor for all the elements\r\n   }\r\n}\r\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n   \r\n// Testing the SoundEffect enum in a Swing application\r\npublic class SoundEffectDemo extends JFrame {\r\n   \r\n   // Constructor\r\n   public SoundEffectDemo() {\r\n      // Pre-load all the sound files\r\n      SoundEffect.init();\r\n      SoundEffect.volume = SoundEffect.Volume.LOW;  // un-mute\r\n   \r\n      // Set up UI components\r\n      Container cp = this.getContentPane();\r\n      cp.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));\r\n      JButton btnSound1 = new JButton(\"Sound 1\");\r\n      btnSound1.addActionListener(new ActionListener() {\r\n         @Override\r\n         public void actionPerformed(ActionEvent e) {\r\n            SoundEffect.EXPLODE.play();\r\n         }\r\n      });\r\n      cp.add(btnSound1);\r\n      JButton btnSound2 = new JButton(\"Sound 2\");\r\n      btnSound2.addActionListener(new ActionListener() {\r\n         @Override\r\n         public void actionPerformed(ActionEvent e) {\r\n            SoundEffect.GONG.play();\r\n         }\r\n      });\r\n      cp.add(btnSound2);\r\n      JButton btnSound3 = new JButton(\"Sound 3\");\r\n      btnSound3.addActionListener(new ActionListener() {\r\n         @Override\r\n         public void actionPerformed(ActionEvent e) {\r\n            SoundEffect.SHOOT.play();\r\n         }\r\n      });\r\n      cp.add(btnSound3);\r\n      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n      this.setTitle(\"Test SoundEffct\");\r\n      this.pack();\r\n      this.setVisible(true);\r\n   }\r\n   \r\n   public static void main(String[] args) {\r\n      new SoundEffectDemo();\r\n   }\r\n}\r\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nimport java.io.*;\r\nimport javax.sound.sampled.*;\r\n/**\r\n * Use SourceDataLine to read line-by-line from the external sound file.\r\n * For computer game, use Clip to pre-load short-duration sound files.\r\n */\r\npublic class SoundLineTest {\r\n   public static void main(String[] args) {\r\n      SourceDataLine soundLine = null;\r\n      int BUFFER_SIZE = 64*1024;  // 64 KB\r\n   \r\n      // Set up an audio input stream piped from the sound file.\r\n      try {\r\n         File soundFile = new File(\"gameover.wav\");\r\n         AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(soundFile);\r\n         AudioFormat audioFormat = audioInputStream.getFormat();\r\n         DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);\r\n         soundLine = (SourceDataLine) AudioSystem.getLine(info);\r\n         soundLine.open(audioFormat);\r\n         soundLine.start();\r\n         int nBytesRead = 0;\r\n         byte[] sampledData = new byte[BUFFER_SIZE];\r\n         while (nBytesRead != -1) {\r\n            nBytesRead = audioInputStream.read(sampledData, 0, sampledData.length);\r\n            if (nBytesRead >= 0) {\r\n               // Writes audio data to the mixer via this source data line.\r\n               soundLine.write(sampledData, 0, nBytesRead);\r\n            }\r\n         }\r\n      } catch (UnsupportedAudioFileException ex) {\r\n         ex.printStackTrace();\r\n      } catch (IOException ex) {\r\n         ex.printStackTrace();\r\n      } catch (LineUnavailableException ex) {\r\n         ex.printStackTrace();\r\n      } finally {\r\n         soundLine.drain();\r\n         soundLine.close();\r\n      }\r\n   }\r\n}\r\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nSequence song = MidiSystem.getSequence(new File(\"song.mid\"));\r\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nSequencer player = MidiSystem.getSequencer();\r\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nplayer.setSequence(song);\r\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nplayer.open();\r\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nplayer.setLoopCount(0);  // repeat 0 times (play once)\r\nplayer.setLoopCount(Sequencer.LOOP_CONTINUOUSLY);  // repeat forever\r\nplayer.start();\r\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nplayer.setTempoFactor(1.0F);  // takes a factor (in float) - normal tempo\r\nplayer.setTempoFactor(1.5F);  // faster by 50%\r\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nif (player.isRunning()) player.stop();\r\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\nimport java.io.*;\r\nimport javax.sound.midi.*;\r\n   \r\npublic class MidiSoundTest {\r\n   private static Sequencer midiPlayer;\r\n   \r\n   // testing main method\r\n   public static void main(String[] args) {\r\n      startMidi(\"song1.mid\");     // start the midi player\r\n      try {\r\n         Thread.sleep(10000);   // delay\r\n      } catch (InterruptedException e) { }\r\n      System.out.println(\"faster\");\r\n      midiPlayer.setTempoFactor(2.0F);   // >1 to speed up the tempo\r\n      try {\r\n         Thread.sleep(10000);   // delay\r\n      } catch (InterruptedException e) { }\r\n   \r\n      // Do this on every move step, you could change to another song\r\n      if (!midiPlayer.isRunning()) {  // previous song finished\r\n         // reset midi player and start a new song\r\n         midiPlayer.stop();\r\n         midiPlayer.close();\r\n         startMidi(\"song2.mid\");\r\n      }\r\n   }\r\n   \r\n   public static void startMidi(String midFilename) {\r\n      try {\r\n         File midiFile = new File(midFilename);\r\n         Sequence song = MidiSystem.getSequence(midiFile);\r\n         midiPlayer = MidiSystem.getSequencer();\r\n         midiPlayer.open();\r\n         midiPlayer.setSequence(song);\r\n         midiPlayer.setLoopCount(0); // repeat 0 times (play once)\r\n         midiPlayer.start();\r\n      } catch (MidiUnavailableException e) {\r\n         e.printStackTrace();\r\n      } catch (InvalidMidiDataException e) {\r\n         e.printStackTrace();\r\n      } catch (IOException e) {\r\n         e.printStackTrace();\r\n      }\r\n   }\r\n}\r\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nimport javax.media.*;\r\nimport java.net.URL;\r\n   \r\npublic class Mp3PlayerDemo extends Thread {\r\n   \r\n   private String filename;\r\n   Player player;\r\n   \r\n   public Mp3PlayerDemo(String mp3Filename) {\r\n      this.filename = mp3Filename;\r\n   }\r\n   \r\n   public void run() {\r\n      try {\r\n         URL url = this.getClass().getClassLoader().getResource(filename);\r\n         MediaLocator locator = new MediaLocator(url);\r\n         player = Manager.createPlayer(locator);\r\n         player.addControllerListener(new ControllerListener() {\r\n            public void controllerUpdate(ControllerEvent event) {\r\n               if (event instanceof EndOfMediaEvent) {\r\n                  player.stop();\r\n                  player.close();\r\n               }\r\n            }\r\n         });\r\n         player.realize();\r\n         player.start();\r\n      } catch (Exception e) {\r\n         e.printStackTrace();\r\n      }\r\n   }\r\n   \r\n   public static void main(String[] args) {\r\n      new Mp3PlayerDemo(\"song.mp3\").start();\r\n   }\r\n}\r\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://www.javaworld.com/article/2077521/learn-java/java-tip-24--how-to-play-audio-in-applications.html", "url position": 9, "segments": [{"code": "import java.applet.*;\nAudioClip ac = getAudioClip(getCodeBase(), soundFile);\nac.play();   //play once\nac.stop();   //stop playing\nac.loop();   //play continuously\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import  sun.audio.*;    //import the sun.audio package\nimport  java.io.*;\n//** add this into your application code as appropriate\n// Open an input stream  to the audio file.\nInputStream in = new FileInputStream(Filename);\n// Create an AudioStream object from the input stream.\nAudioStream as = new AudioStream(in);         \n// Use the static class member \"player\" from class AudioPlayer to play\n// clip.\nAudioPlayer.player.start(as);            \n// Similarly, to stop the audio.\nAudioPlayer.player.stop(as); \n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "AudioStream as = new AudioStream (url.openStream());\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "// Create audio stream as discussed previously.\n// Create AudioData source.\nAudioData data = as.getData();\n// Create ContinuousAudioDataStream.\nContinuousAudioDataStream cas = new ContinuousAudioDataStream (data);\n// Play audio.\nAudioPlayer.player.play (cas);\n// Similarly, to stop the audio.\nAudioPlayer.player.stop (cas);\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://www.java2s.com/Code/Java/Development-Class/AnexampleofloadingandplayingasoundusingaClip.htm", "url position": 18, "segments": [{"code": " \n       /*\nDEVELOPING GAME IN JAVA \n\nCaracteristiques\n\nEditeur : NEW RIDERS \nAuteur : BRACKEEN \nParution : 09 2003 \nPages : 972 \nIsbn : 1-59273-005-1 \nReliure : Paperback \nDisponibilite : Disponible a la librairie \n*/\n        \n\nimport java.io.File;\n\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineEvent;\nimport javax.sound.sampled.LineListener;\n\n/**\n * An example of loading and playing a sound using a Clip. This complete class\n * isn't in the book ;)\n */\npublic class ClipTest {\n\n  public static void main(String[] args) throws Exception {\n\n    // specify the sound to play\n    // (assuming the sound can be played by the audio system)\n    File soundFile = new File(\"../sounds/voice.wav\");\n    AudioInputStream sound = AudioSystem.getAudioInputStream(soundFile);\n\n    // load the sound into memory (a Clip)\n    DataLine.Info info = new DataLine.Info(Clip.class, sound.getFormat());\n    Clip clip = (Clip) AudioSystem.getLine(info);\n    clip.open(sound);\n\n    // due to bug in Java Sound, explicitly exit the VM when\n    // the sound has stopped.\n    clip.addLineListener(new LineListener() {\n      public void update(LineEvent event) {\n        if (event.getType() == LineEvent.Type.STOP) {\n          event.getLine().close();\n          System.exit(0);\n        }\n      }\n    });\n\n    // play the sound clip\n    clip.start();\n  }\n}        \n           \n         \n  \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://www.deitel.com/articles/java_tutorials/20060422/LoadingPlayingAudioClips/index.html", "url position": 17, "segments": []},
{"query": "How to play audio file", "url": "https://www.developer.com/java/other/article.php/2173111/Java-Sound-Playing-Back-Audio-Files-using-Java.htm", "url position": 19, "segments": [{"code": "public class AudioPlayer02 extends JFrame{\n\n  AudioFormat audioFormat;\n  AudioInputStream audioInputStream;\n  SourceDataLine sourceDataLine;\n  boolean stopPlayback = false;\n\n  final JButton stopBtn = new JButton(\"Stop\");\n  final JButton playBtn = new JButton(\"Play\");\n  final JTextField textField =\n                       new JTextField(\"junk.au\");\n\nListing 1", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "  public static void main(String args[]){\n    new AudioPlayer02();\n  }//end main\n\nListing 2", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "  public AudioPlayer02(){//constructor\n\n    stopBtn.setEnabled(false);\n    playBtn.setEnabled(true);\n\nListing 3", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    playBtn.addActionListener(\n      new ActionListener(){\n        public void actionPerformed(\n                                  ActionEvent e){\n          stopBtn.setEnabled(true);\n          playBtn.setEnabled(false);\n          playAudio();//Play the file\n        }//end actionPerformed\n      }//end ActionListener\n    );//end addActionListener()\n\nListing 4", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    stopBtn.addActionListener(\n      new ActionListener(){\n        public void actionPerformed(\n                                  ActionEvent e){\n          //Terminate playback before EOF\n          stopPlayback = true;\n        }//end actionPerformed\n      }//end ActionListener\n    );//end addActionListener()\n\nListing 5", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    getContentPane().add(playBtn,\"West\");\n    getContentPane().add(stopBtn,\"East\");\n    getContentPane().add(textField,\"North\");\n\n    setTitle(\"Copyright 2003, R.G.Baldwin\");\n    setDefaultCloseOperation(EXIT_ON_CLOSE);\n    setSize(250,70);\n    setVisible(true);\n  }//end constructor\n\nListing 6", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "  private void playAudio() {\n    try{\n      File soundFile =\n                   new File(textField.getText());\n\nListing 7", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "      audioInputStream = AudioSystem.\n                  getAudioInputStream(soundFile);\n\nListing 8", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "      audioFormat = audioInputStream.getFormat();\n\n      System.out.println(audioFormat);\n\nListing 9", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "      DataLine.Info dataLineInfo =\n                          new DataLine.Info(\n                            SourceDataLine.class,\n                                    audioFormat);\n\nListing 10", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "      sourceDataLine =\n             (SourceDataLine)AudioSystem.getLine(\n                                   dataLineInfo);\n\nListing 11", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "      new PlayThread().start();\n    }catch (Exception e) {\n      e.printStackTrace();\n      System.exit(0);\n    }//end catch\n  }//end playAudio\n\nListing 12", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "class PlayThread extends Thread{\n  byte tempBuffer[] = new byte[10000];\n\n  public void run(){\n    try{\n      sourceDataLine.open(audioFormat);\n      sourceDataLine.start();\n\nListing 13", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "      int cnt;\n\n      while((cnt = audioInputStream.read(\n           tempBuffer,0,tempBuffer.length)) != -1\n                       && stopPlayback == false){\n        if(cnt > 0){\n          sourceDataLine.write(\n                             tempBuffer, 0, cnt);\n        }//end if\n      }//end while loop\n\nListing 14", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "      sourceDataLine.drain();\n      sourceDataLine.close();\n\nListing 15", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "      stopBtn.setEnabled(false);\n      playBtn.setEnabled(true);\n      stopPlayback = false;\n\nListing 16", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "/*File AudioPlayer02.java\nCopyright 2003 Richard G. Baldwin\n\nDemonstrates playback of an audio file.  The\npath and name of the audio file is specified by\nthe user in a text field.\n\nA GUI appears on the screen containing\nthe following components:\n  Text field for the file name\n  Play\n  Stop\n\nAfter entering an audio file name in the text\nfield, the user can click the Play button to\ncause the program to play the audio file.  By\ndefault, the program will play the entire file\nand then get ready to play another file, or to\nplay the same file again.\n\nIf the user clicks the Stop button while the file\nis being played, playback will terminate.\nHowever, because the audio data is buffered in a\nlarge buffer in the playback loop, there may be a\nnoticeable delay between the time that the Stop\nbutton is clicked and the time that the playback\nactually terminates.\n\nThe text field contains the default audio file\nname, junk.au, when the GUI first appears on the\nscreen.\n\nThe program displays the format of the audio\ndata in the file before playing the file.  The\nformat is displayed on the command- line screen.\n\nTested using SDK 1.4.1 under Win2000\n************************************************/\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport javax.sound.sampled.*;\n\npublic class AudioPlayer02 extends JFrame{\n\n  AudioFormat audioFormat;\n  AudioInputStream audioInputStream;\n  SourceDataLine sourceDataLine;\n  boolean stopPlayback = false;\n  final JButton stopBtn = new JButton(\"Stop\");\n  final JButton playBtn = new JButton(\"Play\");\n  final JTextField textField =\n                       new JTextField(\"junk.au\");\n\n  public static void main(String args[]){\n    new AudioPlayer02();\n  }//end main\n  //-------------------------------------------//\n\n  public AudioPlayer02(){//constructor\n\n    stopBtn.setEnabled(false);\n    playBtn.setEnabled(true);\n\n    //Instantiate and register action listeners\n    // on the Play and Stop buttons.\n    playBtn.addActionListener(\n      new ActionListener(){\n        public void actionPerformed(\n                                  ActionEvent e){\n          stopBtn.setEnabled(true);\n          playBtn.setEnabled(false);\n          playAudio();//Play the file\n        }//end actionPerformed\n      }//end ActionListener\n    );//end addActionListener()\n\n    stopBtn.addActionListener(\n      new ActionListener(){\n        public void actionPerformed(\n                                  ActionEvent e){\n          //Terminate playback before EOF\n          stopPlayback = true;\n        }//end actionPerformed\n      }//end ActionListener\n    );//end addActionListener()\n\n    getContentPane().add(playBtn,\"West\");\n    getContentPane().add(stopBtn,\"East\");\n    getContentPane().add(textField,\"North\");\n\n    setTitle(\"Copyright 2003, R.G.Baldwin\");\n    setDefaultCloseOperation(EXIT_ON_CLOSE);\n    setSize(250,70);\n    setVisible(true);\n  }//end constructor\n  //-------------------------------------------//\n\n  //This method plays back audio data from an\n  // audio file whose name is specified in the\n  // text field.\n  private void playAudio() {\n    try{\n      File soundFile =\n                   new File(textField.getText());\n      audioInputStream = AudioSystem.\n                  getAudioInputStream(soundFile);\n      audioFormat = audioInputStream.getFormat();\n      System.out.println(audioFormat);\n\n      DataLine.Info dataLineInfo =\n                          new DataLine.Info(\n                            SourceDataLine.class,\n                                    audioFormat);\n\n      sourceDataLine =\n             (SourceDataLine)AudioSystem.getLine(\n                                   dataLineInfo);\n\n      //Create a thread to play back the data and\n      // start it running.  It will run until the\n      // end of file, or the Stop button is\n      // clicked, whichever occurs first.\n      // Because of the data buffers involved,\n      // there will normally be a delay between\n      // the click on the Stop button and the\n      // actual termination of playback.\n      new PlayThread().start();\n    }catch (Exception e) {\n      e.printStackTrace();\n      System.exit(0);\n    }//end catch\n  }//end playAudio\n\n\n//=============================================//\n//Inner class to play back the data from the\n// audio file.\nclass PlayThread extends Thread{\n  byte tempBuffer[] = new byte[10000];\n\n  public void run(){\n    try{\n      sourceDataLine.open(audioFormat);\n      sourceDataLine.start();\n\n      int cnt;\n      //Keep looping until the input read method\n      // returns -1 for empty stream or the\n      // user clicks the Stop button causing\n      // stopPlayback to switch from false to\n      // true.\n      while((cnt = audioInputStream.read(\n           tempBuffer,0,tempBuffer.length)) != -1\n                       && stopPlayback == false){\n        if(cnt > 0){\n          //Write data to the internal buffer of\n          // the data line where it will be\n          // delivered to the speaker.\n          sourceDataLine.write(\n                             tempBuffer, 0, cnt);\n        }//end if\n      }//end while\n      //Block and wait for internal buffer of the\n      // data line to empty.\n      sourceDataLine.drain();\n      sourceDataLine.close();\n\n      //Prepare to playback another file\n      stopBtn.setEnabled(false);\n      playBtn.setEnabled(true);\n      stopPlayback = false;\n    }catch (Exception e) {\n      e.printStackTrace();\n      System.exit(0);\n    }//end catch\n  }//end run\n}//end inner class PlayThread\n//===================================//\n\n}//end outer class AudioPlayer02.java\n\nListing 17", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://forum.codecall.net/topic/58228-playing-simple-sampled-audio-in-java/", "url position": 21, "segments": [{"code": "\nClip clip = AudioSystem.getClip();\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nAudioInputStream audio = AudioSystem.getAudioInputStream(new File(\"x.wav\"));\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\npublic static void main(String[] args) {\n        JFrame frame = new JFrame();\n        frame.setSize(300,300);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        frame.setVisible(true);\n\n        KeyListener s;\n\n        try {\n            AudioInputStream audio = AudioSystem.getAudioInputStream(new File(\"x.wav\"));\n            Clip clip = AudioSystem.getClip();\n            clip.open(audio);\n            clip.start();\n        }\n        \n        catch(UnsupportedAudioFileException uae) {\n            System.out.println(uae);\n        }\n        catch(IOException ioe) {\n            System.out.println(ioe);\n        }\n        catch(LineUnavailableException lua) {\n            System.out.println(lua);\n        }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://ptolemy.eecs.berkeley.edu/java/audio/index.html", "url position": 20, "segments": [{"code": "\n         public static final AudioClip newAudioClip(URL r)\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nraw2audio < blockVox.au > blockVoxraw2audio.au\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nsox -t ul -r 8000 blockVox.au -t .au blockVoxsox.au\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to play audio file", "url": "https://www.newventuresoftware.com/blog/record-play-and-visualize-raw-audio-data-in-android", "url position": 22, "segments": []},
{"query": "How to play audio file", "url": "https://www.math.uni-hamburg.de/doc/java/tutorial/sound/playing.html", "url position": 28, "segments": [{"code": "\nAudioClip onceClip, loopClip;\nonceClip = soundList.getClip(chosenFile);\nloopClip = soundList.getClip(chosenFile);\nAudioClip audioClip = Applet.getAudioClip(baseURL, relativeURL);\nonceClip.play();\t//Play it once.\nloopClip.loop();\t//Start the sound loop.\nloopClip.stop();\t//Stop the sound loop.\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npublic void stop() {\n    onceClip.stop();        //Cut short the one-time sound.\n    if (looping) {\n        loopClip.stop();    //Stop the sound loop.\n    }\n}\n\npublic void start() {\n    if (looping) {\n        loopClip.loop();    //Restart the sound loop.\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npublic void run() {\n    AudioClip audioClip = Applet.getAudioClip(baseURL, relativeURL);\n    soundList.putClip(audioClip, relativeURL);\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npublic static final AudioClip newAudioClip(URL r)\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nAudioClip onceClip, loopClip;\nonceClip = soundList.getClip(chosenFile);\nloopClip = soundList.getClip(chosenFile);\nAudioClip audioClip = Applet.newAudioClip(completeURL);\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdAudio.java.html", "url position": 23, "segments": [{"code": "/******************************************************************************\n *  Compilation:  javac StdAudio.java\n *  Execution:    java StdAudio\n *  Dependencies: none\n *  \n *  Simple library for reading, writing, and manipulating .wav files.\n *\n *\n *  Limitations\n *  -----------\n *    - Does not seem to work properly when reading .wav files from a .jar file.\n *    - Assumes the audio is monaural, with sampling rate of 44,100.\n *\n ******************************************************************************/\n\npackage edu.princeton.cs.algs4;\n\nimport javax.sound.sampled.Clip;\n\n// for playing midi sound files on some older systems\nimport java.applet.Applet;\nimport java.applet.AudioClip;\nimport java.net.MalformedURLException;\n\nimport java.io.File;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\n\nimport java.net.URL;\n\nimport javax.sound.sampled.AudioFileFormat;\nimport javax.sound.sampled.AudioFormat;\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.DataLine;\nimport javax.sound.sampled.LineUnavailableException;\nimport javax.sound.sampled.SourceDataLine;\nimport javax.sound.sampled.UnsupportedAudioFileException;\n\n/**\n *  <i>Standard audio</i>. This class provides a basic capability for\n *  creating, reading, and saving audio. \n *  <p>\n *  The audio format uses a sampling rate of 44,100 (CD quality audio), 16-bit, monaural.\n *\n *  <p>\n *  For additional documentation, see <a href=\"https://introcs.cs.princeton.edu/15inout\">Section 1.5</a> of\n *  <i>Computer Science: An Interdisciplinary Approach</i> by Robert Sedgewick and Kevin Wayne.\n *\n *  @author Robert Sedgewick\n *  @author Kevin Wayne\n */\npublic final class StdAudio {\n\n    /**\n     *  The sample rate - 44,100 Hz for CD quality audio.\n     */\n    public static final int SAMPLE_RATE = 44100;\n\n    private static final int BYTES_PER_SAMPLE = 2;                // 16-bit audio\n    private static final int BITS_PER_SAMPLE = 16;                // 16-bit audio\n    private static final double MAX_16_BIT = Short.MAX_VALUE;     // 32,767\n    private static final int SAMPLE_BUFFER_SIZE = 4096;\n\n\n    private static SourceDataLine line;   // to play the sound\n    private static byte[] buffer;         // our internal buffer\n    private static int bufferSize = 0;    // number of samples currently in internal buffer\n\n    private StdAudio() {\n        // can not instantiate\n    }\n   \n    // static initializer\n    static {\n        init();\n    }\n\n    // open up an audio stream\n    private static void init() {\n        try {\n            // 44,100 samples per second, 16-bit audio, mono, signed PCM, little Endian\n            AudioFormat format = new AudioFormat((float) SAMPLE_RATE, BITS_PER_SAMPLE, 1, true, false);\n            DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n\n            line = (SourceDataLine) AudioSystem.getLine(info);\n            line.open(format, SAMPLE_BUFFER_SIZE * BYTES_PER_SAMPLE);\n            \n            // the internal buffer is a fraction of the actual buffer size, this choice is arbitrary\n            // it gets divided because we can't expect the buffered data to line up exactly with when\n            // the sound card decides to push out its samples.\n            buffer = new byte[SAMPLE_BUFFER_SIZE * BYTES_PER_SAMPLE/3];\n        }\n        catch (LineUnavailableException e) {\n            System.out.println(e.getMessage());\n        }\n\n        // no sound gets made before this call\n        line.start();\n    }\n\n\n    /**\n     * Closes standard audio.\n     */\n    public static void close() {\n        line.drain();\n        line.stop();\n    }\n    \n    /**\n     * Writes one sample (between -1.0 and +1.0) to standard audio.\n     * If the sample is outside the range, it will be clipped.\n     *\n     * @param  sample the sample to play\n     * @throws IllegalArgumentException if the sample is {@code Double.NaN}\n     */\n    public static void play(double sample) {\n\n        // clip if outside [-1, +1]\n        if (Double.isNaN(sample)) throw new IllegalArgumentException(\"sample is NaN\");\n        if (sample < -1.0) sample = -1.0;\n        if (sample > +1.0) sample = +1.0;\n\n        // convert to bytes\n        short s = (short) (MAX_16_BIT * sample);\n        buffer[bufferSize++] = (byte) s;\n        buffer[bufferSize++] = (byte) (s >> 8);   // little Endian\n\n        // send to sound card if buffer is full        \n        if (bufferSize >= buffer.length) {\n            line.write(buffer, 0, buffer.length);\n            bufferSize = 0;\n        }\n    }\n\n    /**\n     * Writes the array of samples (between -1.0 and +1.0) to standard audio.\n     * If a sample is outside the range, it will be clipped.\n     *\n     * @param  samples the array of samples to play\n     * @throws IllegalArgumentException if any sample is {@code Double.NaN}\n     * @throws IllegalArgumentException if {@code samples} is {@code null}\n     */\n    public static void play(double[] samples) {\n        if (samples == null) throw new IllegalArgumentException(\"argument to play() is null\");\n        for (int i = 0; i < samples.length; i++) {\n            play(samples[i]);\n        }\n    }\n\n    /**\n     * Reads audio samples from a file (in .wav or .au format) and returns\n     * them as a double array with values between -1.0 and +1.0.\n     *\n     * @param  filename the name of the audio file\n     * @return the array of samples\n     */\n    public static double[] read(String filename) {\n        byte[] data = readByte(filename);\n        int n = data.length;\n        double[] d = new double[n/2];\n        for (int i = 0; i < n/2; i++) {\n            d[i] = ((short) (((data[2*i+1] & 0xFF) << 8) + (data[2*i] & 0xFF))) / ((double) MAX_16_BIT);\n        }\n        return d;\n    }\n\n    // return data as a byte array\n    private static byte[] readByte(String filename) {\n        byte[] data = null;\n        AudioInputStream ais = null;\n        try {\n\n            // try to read from file\n            File file = new File(filename);\n            if (file.exists()) {\n                ais = AudioSystem.getAudioInputStream(file);\n                int bytesToRead = ais.available();\n                data = new byte[bytesToRead];\n                int bytesRead = ais.read(data);\n                if (bytesToRead != bytesRead)\n                    throw new IllegalStateException(\"read only \" + bytesRead + \" of \" + bytesToRead + \" bytes\"); \n            }\n\n            // try to read from URL\n            else {\n                URL url = StdAudio.class.getResource(filename);\n                ais = AudioSystem.getAudioInputStream(url);\n                int bytesToRead = ais.available();\n                data = new byte[bytesToRead];\n                int bytesRead = ais.read(data);\n                if (bytesToRead != bytesRead)\n                    throw new IllegalStateException(\"read only \" + bytesRead + \" of \" + bytesToRead + \" bytes\"); \n            }\n        }\n        catch (IOException e) {\n            throw new IllegalArgumentException(\"could not read '\" + filename + \"'\", e);\n        }\n\n        catch (UnsupportedAudioFileException e) {\n            throw new IllegalArgumentException(\"unsupported audio format: '\" + filename + \"'\", e);\n        }\n\n        return data;\n    }\n\n    /**\n     * Saves the double array as an audio file (using .wav or .au format).\n     *\n     * @param  filename the name of the audio file\n     * @param  samples the array of samples\n     * @throws IllegalArgumentException if unable to save {@code filename}\n     * @throws IllegalArgumentException if {@code samples} is {@code null}\n     */\n    public static void save(String filename, double[] samples) {\n        if (samples == null) {\n            throw new IllegalArgumentException(\"samples[] is null\");\n        }\n\n        // assumes 44,100 samples per second\n        // use 16-bit audio, mono, signed PCM, little Endian\n        AudioFormat format = new AudioFormat(SAMPLE_RATE, 16, 1, true, false);\n        byte[] data = new byte[2 * samples.length];\n        for (int i = 0; i < samples.length; i++) {\n            int temp = (short) (samples[i] * MAX_16_BIT);\n            data[2*i + 0] = (byte) temp;\n            data[2*i + 1] = (byte) (temp >> 8);\n        }\n\n        // now save the file\n        try {\n            ByteArrayInputStream bais = new ByteArrayInputStream(data);\n            AudioInputStream ais = new AudioInputStream(bais, format, samples.length);\n            if (filename.endsWith(\".wav\") || filename.endsWith(\".WAV\")) {\n                AudioSystem.write(ais, AudioFileFormat.Type.WAVE, new File(filename));\n            }\n            else if (filename.endsWith(\".au\") || filename.endsWith(\".AU\")) {\n                AudioSystem.write(ais, AudioFileFormat.Type.AU, new File(filename));\n            }\n            else {\n                throw new IllegalArgumentException(\"unsupported audio format: '\" + filename + \"'\");\n            }\n        }\n        catch (IOException ioe) {\n            throw new IllegalArgumentException(\"unable to save file '\" + filename + \"'\", ioe);\n        }\n    }\n\n\n\n    /**\n     * Plays an audio file (in .wav, .mid, or .au format) in a background thread.\n     *\n     * @param filename the name of the audio file\n     * @throws IllegalArgumentException if unable to play {@code filename}\n     * @throws IllegalArgumentException if {@code filename} is {@code null}\n     */\n    public static synchronized void play(final String filename) {\n        if (filename == null) throw new IllegalArgumentException();\n\n        InputStream is = StdAudio.class.getResourceAsStream(filename);\n        if (is == null) {\n            throw new IllegalArgumentException(\"could not read '\" + filename + \"'\");\n        }\n\n        // code adapted from: http://stackoverflow.com/questions/26305/how-can-i-play-sound-in-java\n        try {\n            // check if file format is supported\n            // (if not, will throw an UnsupportedAudioFileException)\n            AudioSystem.getAudioInputStream(is);\n\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    stream(filename);\n                }\n           }).start();\n        }\n\n        // let's try Applet.newAudioClip() instead\n        catch (UnsupportedAudioFileException e) {\n            playApplet(filename);\n            return;\n        }\n\n        // something else went wrong\n        catch (IOException ioe) {\n            throw new IllegalArgumentException(\"could not play '\" + filename + \"'\", ioe);\n        }\n\n    }\n\n\n    // play sound file using Applet.newAudioClip();\n    private static void playApplet(String filename) {\n        URL url = null;\n        try {\n            File file = new File(filename);\n            if(file.canRead()) url = file.toURI().toURL();\n        }\n        catch (MalformedURLException e) {\n            throw new IllegalArgumentException(\"could not play '\" + filename + \"'\", e);\n        }\n\n        // URL url = StdAudio.class.getResource(filename);\n        if (url == null) {\n            throw new IllegalArgumentException(\"could not play '\" + filename + \"'\");\n        }\n\n        AudioClip clip = Applet.newAudioClip(url);\n        clip.play();\n    }\n\n    // https://www3.ntu.edu.sg/home/ehchua/programming/java/J8c_PlayingSound.html\n    // play a wav or aif file\n    // javax.sound.sampled.Clip fails for long clips (on some systems)\n    private static void stream(String filename) {\n        SourceDataLine line = null;\n        int BUFFER_SIZE = 4096; // 4K buffer\n\n        try {\n            InputStream is = StdAudio.class.getResourceAsStream(filename);\n            AudioInputStream ais = AudioSystem.getAudioInputStream(is);\n            AudioFormat audioFormat = ais.getFormat();\n            DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);\n            line = (SourceDataLine) AudioSystem.getLine(info);\n            line.open(audioFormat);\n            line.start();\n            byte[] samples = new byte[BUFFER_SIZE];\n            int count = 0;\n            while ((count = ais.read(samples, 0, BUFFER_SIZE)) != -1) {\n                line.write(samples, 0, count);\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n        catch (UnsupportedAudioFileException e) {\n            e.printStackTrace();\n        }\n        catch (LineUnavailableException e) {\n            e.printStackTrace();\n        }\n        finally {\n            if (line != null) {\n                line.drain();\n                line.close();\n            }\n        }\n    }\n\n    /**\n     * Loops an audio file (in .wav, .mid, or .au format) in a background thread.\n     *\n     * @param filename the name of the audio file\n     * @throws IllegalArgumentException if {@code filename} is {@code null}\n     */\n    public static synchronized void loop(String filename) {\n        if (filename == null) throw new IllegalArgumentException();\n\n        // code adapted from: http://stackoverflow.com/questions/26305/how-can-i-play-sound-in-java\n        try {\n            Clip clip = AudioSystem.getClip();\n            InputStream is = StdAudio.class.getResourceAsStream(filename);\n            AudioInputStream ais = AudioSystem.getAudioInputStream(is);\n            clip.open(ais);\n            clip.loop(Clip.LOOP_CONTINUOUSLY);\n        }\n        catch (UnsupportedAudioFileException e) {\n            throw new IllegalArgumentException(\"unsupported audio format: '\" + filename + \"'\", e);\n        }\n        catch (LineUnavailableException e) {\n            throw new IllegalArgumentException(\"could not play '\" + filename + \"'\", e);\n        }\n        catch (IOException e) {\n            throw new IllegalArgumentException(\"could not play '\" + filename + \"'\", e);\n        }\n    }\n\n\n   /***************************************************************************\n    * Unit tests {@code StdAudio}.\n    ***************************************************************************/\n\n    // create a note (sine wave) of the given frequency (Hz), for the given\n    // duration (seconds) scaled to the given volume (amplitude)\n    private static double[] note(double hz, double duration, double amplitude) {\n        int n = (int) (StdAudio.SAMPLE_RATE * duration);\n        double[] a = new double[n+1];\n        for (int i = 0; i <= n; i++)\n            a[i] = amplitude * Math.sin(2 * Math.PI * i * hz / StdAudio.SAMPLE_RATE);\n        return a;\n    }\n\n    /**\n     * Test client - play an A major scale to standard audio.\n     *\n     * @param args the command-line arguments\n     */\n    /**\n     * Test client - play an A major scale to standard audio.\n     *\n     * @param args the command-line arguments\n     */\n    public static void main(String[] args) {\n        \n        // 440 Hz for 1 sec\n        double freq = 440.0;\n        for (int i = 0; i <= StdAudio.SAMPLE_RATE; i++) {\n            StdAudio.play(0.5 * Math.sin(2*Math.PI * freq * i / StdAudio.SAMPLE_RATE));\n        }\n        \n        // scale increments\n        int[] steps = { 0, 2, 4, 5, 7, 9, 11, 12 };\n        for (int i = 0; i < steps.length; i++) {\n            double hz = 440.0 * Math.pow(2, steps[i] / 12.0);\n            StdAudio.play(note(hz, 1.0, 0.5));\n        }\n\n\n        // need to call this in non-interactive stuff so the program doesn't terminate\n        // until all the sound leaves the speaker.\n        StdAudio.close(); \n    }\n}\n\n/******************************************************************************\n *  Copyright 2002-2016, Robert Sedgewick and Kevin Wayne.\n *\n *  This file is part of algs4.jar, which accompanies the textbook\n *\n *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne,\n *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X.\n *      http://algs4.cs.princeton.edu\n *\n *\n *  algs4.jar is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  algs4.jar is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with algs4.jar.  If not, see http://www.gnu.org/licenses.\n ******************************************************************************/\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://www.onjava.com/pub/a/onjava/excerpt/jenut3_ch17/index.html", "url position": 27, "segments": [{"code": "package je3.sound;\r\n\r\n/**\r\n * Play a sound file from the network using the java.applet.Applet API.\r\n */\r\npublic class PlaySound {\r\n    public static void main(String[  ] args)\r\n        throws java.net.MalformedURLException\r\n    {\r\n        java.applet.AudioClip clip =\r\n            java.applet.Applet.newAudioClip(new java.net.URL(args[0]));\r\n        clip.play( );\r\n    }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://support.mozilla.org/en-US/kb/fix-common-audio-and-video-issues", "url position": 25, "segments": []},
{"query": "How to play audio file", "url": "https://developer.android.com/guide/topics/media/mediarecorder.html", "url position": 30, "segments": [{"code": "\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_2_TS);", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\npackage com.android.audiorecordtest;\n\nimport android.Manifest;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.media.MediaPlayer;\nimport android.media.MediaRecorder;\nimport android.os.Bundle;\nimport android.support.annotation.NonNull;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\n\nimport java.io.IOException;\n\npublic class AudioRecordTest extends AppCompatActivity {\n\n    private static final String LOG_TAG = \"AudioRecordTest\";\n    private static final int REQUEST_RECORD_AUDIO_PERMISSION = 200;\n    private static String mFileName = null;\n\n    private RecordButton mRecordButton = null;\n    private MediaRecorder mRecorder = null;\n\n    private PlayButton   mPlayButton = null;\n    private MediaPlayer   mPlayer = null;\n\n    // Requesting permission to RECORD_AUDIO\n    private boolean permissionToRecordAccepted = false;\n    private String [] permissions = {Manifest.permission.RECORD_AUDIO};\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        switch (requestCode){\n            case REQUEST_RECORD_AUDIO_PERMISSION:\n                permissionToRecordAccepted  = grantResults[0] == PackageManager.PERMISSION_GRANTED;\n                break;\n        }\n        if (!permissionToRecordAccepted ) finish();\n\n    }\n\n    private void onRecord(boolean start) {\n        if (start) {\n            startRecording();\n        } else {\n            stopRecording();\n        }\n    }\n\n    private void onPlay(boolean start) {\n        if (start) {\n            startPlaying();\n        } else {\n            stopPlaying();\n        }\n    }\n\n    private void startPlaying() {\n        mPlayer = new MediaPlayer();\n        try {\n            mPlayer.setDataSource(mFileName);\n            mPlayer.prepare();\n            mPlayer.start();\n        } catch (IOException e) {\n            Log.e(LOG_TAG, \"prepare() failed\");\n        }\n    }\n\n    private void stopPlaying() {\n        mPlayer.release();\n        mPlayer = null;\n    }\n\n    private void startRecording() {\n        mRecorder = new MediaRecorder();\n        mRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\n        mRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);\n        mRecorder.setOutputFile(mFileName);\n        mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);\n\n        try {\n            mRecorder.prepare();\n        } catch (IOException e) {\n            Log.e(LOG_TAG, \"prepare() failed\");\n        }\n\n        mRecorder.start();\n    }\n\n    private void stopRecording() {\n        mRecorder.stop();\n        mRecorder.release();\n        mRecorder = null;\n    }\n\n    class RecordButton extends Button {\n        boolean mStartRecording = true;\n\n        OnClickListener clicker = new OnClickListener() {\n            public void onClick(View v) {\n                onRecord(mStartRecording);\n                if (mStartRecording) {\n                    setText(\"Stop recording\");\n                } else {\n                    setText(\"Start recording\");\n                }\n                mStartRecording = !mStartRecording;\n            }\n        };\n\n        public RecordButton(Context ctx) {\n            super(ctx);\n            setText(\"Start recording\");\n            setOnClickListener(clicker);\n        }\n    }\n\n    class PlayButton extends Button {\n        boolean mStartPlaying = true;\n\n        OnClickListener clicker = new OnClickListener() {\n            public void onClick(View v) {\n                onPlay(mStartPlaying);\n                if (mStartPlaying) {\n                    setText(\"Stop playing\");\n                } else {\n                    setText(\"Start playing\");\n                }\n                mStartPlaying = !mStartPlaying;\n            }\n        };\n\n        public PlayButton(Context ctx) {\n            super(ctx);\n            setText(\"Start playing\");\n            setOnClickListener(clicker);\n        }\n    }\n\n    @Override\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n\n        // Record to the external cache directory for visibility\n        mFileName = getExternalCacheDir().getAbsolutePath();\n        mFileName += \"/audiorecordtest.3gp\";\n\n        ActivityCompat.requestPermissions(this, permissions, REQUEST_RECORD_AUDIO_PERMISSION);\n\n        LinearLayout ll = new LinearLayout(this);\n        mRecordButton = new RecordButton(this);\n        ll.addView(mRecordButton,\n                new LinearLayout.LayoutParams(\n                        ViewGroup.LayoutParams.WRAP_CONTENT,\n                        ViewGroup.LayoutParams.WRAP_CONTENT,\n                        0));\n        mPlayButton = new PlayButton(this);\n        ll.addView(mPlayButton,\n                new LinearLayout.LayoutParams(\n                        ViewGroup.LayoutParams.WRAP_CONTENT,\n                        ViewGroup.LayoutParams.WRAP_CONTENT,\n                        0));\n        setContentView(ll);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        if (mRecorder != null) {\n            mRecorder.release();\n            mRecorder = null;\n        }\n\n        if (mPlayer != null) {\n            mPlayer.release();\n            mPlayer = null;\n        }\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://www.ibm.com/developerworks/community/forums/html/topic?id=77777777-0000-0000-0000-000014154095", "url position": 24, "segments": []},
{"query": "How to play audio file", "url": "https://www.greenfoot.org/files/javadoc/greenfoot/GreenfootSound.html", "url position": 34, "segments": [{"code": "public class GreenfootSound\nextends java.lang.Object", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicGreenfootSound(java.lang.Stringfilename)", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicvoidplay()", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicvoidplayLoop()", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicvoidstop()", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicvoidpause()", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicbooleanisPlaying()", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicintgetVolume()", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicvoidsetVolume(intlevel)", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicjava.lang.StringtoString()", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to play audio file", "url": "http://www.landofcode.com/java-tutorials/java-sounds.php", "url position": 32, "segments": []},
{"query": "How to play audio file", "url": "http://dave-reed.com/csc321.F16/Code/StdAudio.java", "url position": 33, "segments": []},
{"query": "How to play audio file", "url": "https://www.java-tips.org/java-se-tips-100019/35-java-util-jar/2319-play-an-audio-file-from-a-jar-file.html", "url position": 35, "segments": [{"code": " import java.io.*;\r\nimport java.net.*;\r\n\r\nimport sun.audio.*;\r\n\r\npublic class AppAudio {\r\n  public static void main(String args[]) throws Throwable {\r\n    InputStream in = AppAudio.class.getResourceAsStream(args[0]);\r\n    AudioStream as = new AudioStream(in);\r\n    AudioPlayer.player.start(as);\r\n    Thread.sleep(5000);\r\n  }\r\n}\r\n\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "http://www.beadsproject.net/", "url position": 40, "segments": []},
{"query": "How to play audio file", "url": "https://docstore.mik.ua/orelly/java/awt/ch14_05.htm", "url position": 37, "segments": [{"code": "\nFileInputStream fis = new FileInputStream (\"/usr/openwin/demo/sounds/1.au\");\nAudioStream audiostream = new AudioStream (fis);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nAudioStream audiostream = new AudioStream (savedUrl.openStream());\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nAudioData audiodata = new AudioStream (aUrl.openStream()).getData();\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nVector v = new Vector ();\nv.addElement (new AudioStream (url1.openStream ());\nv.addElement (new AudioStream (url2.openStream ());\nAudioStreamSequence audiostream = new AudioStreamSequence (v.elements ());\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.net.URL;\nimport java.io.FileInputStream;\nimport sun.audio.*;\npublic class SunAudioClip implements java.applet.AudioClip {\n    private AudioData audiodata;\n    private AudioDataStream audiostream;\n    private ContinuousAudioDataStream continuousaudiostream;\n    static int length;\n    public SunAudioClip (URL url) throws java.io.IOException {\n        audiodata = new AudioStream (url.openStream()).getData();\n        audiostream = null;\n        continuousaudiostream = null;\n    }\n    public SunAudioClip (String filename) throws java.io.IOException {\n        FileInputStream fis = new FileInputStream (filename);\n        AudioStream audioStream = new AudioStream (fis);\n        audiodata = audioStream.getData();\n        audiostream = null;\n        continuousaudiostream = null;\n    }\n    public void play () {\n        audiostream = new AudioDataStream (audiodata);\n        AudioPlayer.player.start (audiostream);\n    }\n    public void loop () {\n        continuousaudiostream = new ContinuousAudioDataStream (audiodata);\n        AudioPlayer.player.start (continuousaudiostream);\n    }\n    public void stop () {\n        if (audiostream != null)\n            AudioPlayer.player.stop (audiostream);\n        if (continuousaudiostream != null)\n            AudioPlayer.player.stop (continuousaudiostream);\n    }\n    public static void main (String args[]) throws Exception {\n        URL url1 = new URL (\"http://localhost:8080/audio/1.au\");\n        URL url2 = new URL (\"http://localhost:8080/audio/2.au\");\n        SunAudioClip sac1 = new SunAudioClip (url1);\n        SunAudioClip sac2 = new SunAudioClip (url2);\n        SunAudioClip sac3 = new SunAudioClip (\"1.au\");\n        sac1.play ();\n        sac2.loop ();\n        sac3.play ();\n        try {// Delay for loop\n            Thread.sleep (2000);\n        } catch (InterruptedException ie) {}\n        sac2.stop();\n    }\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://www.daniweb.com/programming/software-development/threads/475808/how-to-play-mp3-files-in-java-using-eclipse", "url position": 31, "segments": [{"code": "import javax.sound.sampled.AudioInputStream;\n   import javax.sound.sampled.AudioSystem;\n    import javax.sound.sampled.Clip;\n\n       try{\n      AudioInputStream audioInputStream =AudioSystem.getAudioInputStream(this.getClass().getResource(\"path of relative sound file in src folder\"));\n     Clip clip = AudioSystem.getClip();\n     clip.open(audioInputStream);\n     clip.start( );\n    }\n   catch(Exception ex)\n   {  }\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import javax.media.*;\nimport java.net.*;\nimport java.io.*;\nimport java.util.*;\n\nclass MP3Play\n\n{\n public static void main(String args[]) throws Exception\n\n {\n//File Path\n File f=new File(args[0]);\n // Create a Player object that realizes the audio\n final Player p=Manager.createRealizedPlayer(f.toURI().toURL());\n\n  p.start();\n  Scanner s=new Scanner(System.in);\n  String st=s.nextLine();\n   // If user types 'stop', stop the audio\n\n   if(st.equals(\"stop\"))\n\n   {\n   p.stop();\n\n   }\n }\n\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "catch(Exception ex)\n{ }\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "String uriString = new File(fileName).toURI().toString();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "MediaPlayer player = new MediaPlayer(new Media(uriString));\nplayer.play(); // or stop() or pause() etc etc\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "new javafx.embed.swing.JFXPanel(); // forces JavaFX init\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "void playMP3(String fileName) {\n    new javafx.embed.swing.JFXPanel();\n    String uriString = new File(fileName).toURI().toString();\n    new MediaPlayer(new Media(uriString)).play();\n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.File;\nimport javafx.scene.media.MediaPlayer;\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://processing.org/reference/libraries/sound/SoundFile.html", "url position": 36, "segments": [{"code": "\nimport processing.sound.*;\nSoundFile file;\n\nvoid setup() {\n  size(640, 360);\n  background(255);\n    \n  // Load a soundfile from the /data folder of the sketch and play it back\n  file = new SoundFile(this, \"sample.mp3\");\n  file.play();\n}      \n\nvoid draw() {\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "SoundFile(theParent, path)\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to play audio file", "url": "http://www.jsresources.org/faq_audio.html", "url position": 41, "segments": [{"code": "\nAudioFormat format = ...;\nDataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n// line is *capable* of being opened in format\nSourceDataLine line = (SourceDataLine) AudioSystem.getLine(info);\n// open in default format, not necessarily the same as format\nline.open();", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nAudioFormat format = ...;\nDataLine.Info info = new DataLine.Info(SourceDataLine.class, format);\n// line is *capable* of being opened in format\nSourceDataLine line = (SourceDataLine) AudioSystem.getLine(info);\n// open in desired format\nline.open(format);", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nTDL.stop();\ndo\n{\n    count = TDL.read();\n}\nwhile (count > 0);\nTDL.close();", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\npublic void drain()\n{\n    while (isActive() && (available() > 0))\n    {\n        Thread.sleep(100);\n    }\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ncurrentFrame = clip.getFramePosition() %\nclip.getFrameLength();", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nLine.Info[] infos = AudioSystem.getSourceLineInfo();\n// or:\n// Line.Info[] infos = AudioSystem.getTargetLineInfo();\nfor (int i = 0; i < infos.length; i++)\n{\n  if (infos[i] instanceof DataLine.Info)\n  {\n    DataLine.Info dataLineInfo = (DataLine.Info) infos[i];\n    AudioFormat[] supportedFormats = dataLineInfo.getFormats();\n  }\n}", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nsnd-mixer-oss          12672   1 (autoclean) [snd-pcm-oss]\nsnd-seq                38348   0 (autoclean) (unused)\nsnd-emu10k1            65956   1 (autoclean)\nsnd-hwdep               5024   0 (autoclean) [snd-emu10k1]\nsnd-rawmidi            13792   0 (autoclean) [snd-emu10k1]\nsnd-pcm                64416   0 (autoclean) [snd-pcm-oss snd-emu10k1]\nsnd-page-alloc          6148   0 (autoclean) [snd-emu10k1 snd-pcm]\nsnd-timer              15040   0 (autoclean) [snd-seq snd-pcm]\nsnd-ac97-codec         42200   0 (autoclean) [snd-emu10k1]\nsnd-seq-device          4116   0 (autoclean) [snd-seq snd-emu10k1 snd-rawmidi]\nsnd-util-mem            1504   0 (autoclean) [snd-emu10k1]\nsnd                    36832   0 (autoclean) [snd-pcm-oss snd-mixer-oss snd-seq\nsnd-emu10k1 snd-hwdep snd-rawmidi snd-pcm snd-timer snd-ac97-codec\nsnd-seq-device snd-util-mem]\nsoundcore               3556   6 (autoclean) [snd]\n\t\t  ", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\nFile file = new File(\"headerless_audio_data.dat\");\nInputStream is = new FileInputStream(file);\nis = new BufferedInputStream(is);\nAudioFormat format = new AudioFormat(...);\nlong lLengthInFrames = file.length() / format.getFrameSize();\nAudioInputStream ais = new AudioInputStream(is, format,\n               lLengthInFrames);", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nFile file = new File(\"my_file.ext\");\nAudioFileFormat audioFileFormat = AudioSystem.getAudioFileFormat(file);\n// get all properties\nMap<String, Object> properties = audioFileFormat.properties();\n// duration is in microseconds\nLong duration = (Long) properties.get(\"duration\");\n}", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport org.tritonus.share.sampled.file.TAudioFileFormat\n\nFile file = new File(\"my_file.ext\");\nAudioFileFormat audioFileFormat = AudioSystem.getAudioFileFormat(file);\nif (audioFileFormat instanceof TAudioFileFormat)\n{\n    // Tritonus SPI compliant audio file format.\n    Map properties = ((TAudioFileFormat) audioFileFormat).properties();\n    // duration is in microseconds\n    Long duration = (Long) properties.get(\"duration\");\n}", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nbyte unsigned = (byte) (signed + 128);", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nbyte signed = (byte) (unsigned - 128);", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nbyte changed = (byte) (original ^ 0x80);", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nshort sample = ...;\nbyte high = (byte) (sample >> 8) & 0xFF;\nbyte low = (byte) (sample & 0xFF);", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nshort sample = ...;\nbyte[] buffer = ...;\nint offset = ...;\n// high byte\nbuffer[offset + 0] = (byte) (sample >> 8) & 0xFF;\n// low byte\nbuffer[offset + 1] = (byte) (sample & 0xFF);", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nshort sample = ...;\nbyte[] buffer = ...;\nint offset = ...;\n// low byte\nbuffer[offset + 0] = (byte) (sample & 0xFF);\n// high byte\nbuffer[offset + 1] = (byte) (sample >> 8) & 0xFF;", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n// the sample to process\nfloat fSample = ...;\n// saturation\nfSample = Math.min(1.0F, Math.max(-1.0F, fSample);\n// scaling and conversion to integer\nint nSample = Math.round(fSample * 32767.0F);\nbyte high = (byte) (nSample >> 8) & 0xFF;\nbyte low = (byte) (nSample & 0xFF);", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n// the sample to process\ndouble dSample = ...;\n// saturation\ndSample = Math.min(1.0, Math.max(-1.0, dSample);\n// scaling and conversion to integer\nint nSample = (int) Math.round(dSample * 32767.0);\nbyte high = (byte) (nSample >> 8) & 0xFF;\nbyte low = (byte) (nSample & 0xFF);", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nshort sample = (short)\n(buffer[offset] << 8);", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nshort sample = (short)\n( (buffer[offset] ^ 0x80 ) << 8);", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nfloat sample =\nbuffer[offset] / 128.0F;", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nfloat sample =\n( (buffer[offset] & 0xFF) - 128)\n/ 128.0F;", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ndouble sample =\nbuffer[offset] / 128.0;", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ndouble sample =\n( (buffer[offset] & 0xFF) - 128)\n/ 128.0;", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nshort sample = (short)\n(  (buffer[offset + 0] & 0xFF)\n | (buffer[offset + 1] << 8)  );", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nshort sample = (short)\n(  (buffer[offset + 0] << 8)\n | (buffer[offset + 1] & 0xFF) );", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nint sample =\n  (buffer[offset + 0] & 0xFF)\n| (buffer[offset + 1] << 8);", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nint sample =\n  (buffer[offset + 0] << 8)\n| (buffer[offset + 1] & 0xFF);", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nfloat sample =\n(  (buffer[offset + 0] & 0xFF)\n | (buffer[offset + 1] << 8) )\n/ 32768.0F;", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nfloat sample =\n(  (buffer[offset + 0] << 8)\n | (buffer[offset + 1] & 0xFF) )\n/ 32768.0F;", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ndouble sample =\n(  (buffer[offset + 0] & 0xFF)\n | (buffer[offset + 1] << 8) )\n/ 32768.0;", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ndouble sample =\n(  (buffer[offset + 0] << 8)\n | (buffer[offset + 1] & 0xFF) )\n/ 32768.0;", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nint sample =\n   (buffer[offset + 0] & 0xFF)\n| ((buffer[offset + 1] & 0xFF) << 8)\n|  (buffer[offset + 2] << 16);", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nint sample =\n   (buffer[offset + 0] << 16)\n| ((buffer[offset + 1] & 0xFF) << 8)\n|  (buffer[offset + 2] & 0xFF);", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nfloat sample =\n(   (buffer[offset + 0] & 0xFF)\n | ((buffer[offset + 1] & 0xFF) << 8)\n |  (buffer[offset + 2] << 16) )\n/ 8388606.0F;", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nfloat sample =\n(   (buffer[offset + 0] << 16)\n | ((buffer[offset + 1] & 0xFF) << 8)\n |  (buffer[offset + 2] & 0xFF) )\n/ 8388606.0F;", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ndouble sample =\n(   (buffer[offset + 0] & 0xFF)\n | ((buffer[offset + 1] & 0xFF) << 8)\n |  (buffer[offset + 2] << 16) )\n/ 8388606.0;", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ndouble sample =\n(   (buffer[offset + 0] << 16)\n | ((buffer[offset + 1] & 0xFF) << 8)\n |  (buffer[offset + 2] & 0xFF) )\n/ 8388606.0;", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nint sample =\n   (buffer[offset + 0] & 0xFF)\n| ((buffer[offset + 1] & 0xFF) << 8)\n| ((buffer[offset + 2] & 0xFF) << 16)\n|  (buffer[offset + 3] << 24);", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nint sample =\n   (buffer[offset + 0] << 24)\n| ((buffer[offset + 1] & 0xFF) << 16)\n| ((buffer[offset + 2] & 0xFF) << 8)\n|  (buffer[offset + 3] & 0xFF);", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nfloat sample =\n(   (buffer[offset + 0] & 0xFF)\n | ((buffer[offset + 1] & 0xFF) << 8)\n | ((buffer[offset + 2] & 0xFF) << 16)\n |  (buffer[offset + 3] << 24) )\n/ 2147483648.0F;", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nfloat sample =\n(   (buffer[offset + 0] << 24)\n | ((buffer[offset + 1] & 0xFF) << 16)\n | ((buffer[offset + 2] & 0xFF) << 8)\n |  (buffer[offset + 3] & 0xFF) )\n/ 2147483648.0F;", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ndouble sample =\n(   (buffer[offset + 0] & 0xFF)\n | ((buffer[offset + 1] & 0xFF) << 8)\n | ((buffer[offset + 2] & 0xFF) << 16)\n |  (buffer[offset + 3] << 24) )\n/ 2147483648.0;", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ndouble sample =\n(   (buffer[offset + 0] << 24)\n | ((buffer[offset + 1] & 0xFF) << 16)\n | ((buffer[offset + 2] & 0xFF) << 8)\n |  (buffer[offset + 3] & 0xFF) )\n/ 2147483648.0;", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n// incoming: mono input stream\n// outgoing: stereo output stream\nvoid monoToSingleSideStereo(byte[] incoming, byte[] outgoing)\n{\n    int nSignalOffset;\n    int nSilenceOffset;\n    // this is for unsigned data. For signed data, use the value 0.\n    int nSilenceValue = -128;\n\n    if (copyToLeftChannel)\n    {\n        nSignalOffset = 0;\n        nSilenceOffset = 1;\n    }\n    else // signal to the right channel\n    {\n        nSignalOffset = 1;\n        nSilenceOffset = 0;\n    }\n    for (int i = 0; i < incoming.length; i++)\n    {\n        outgoing[(i * 2) + nSignalOffset] = incoming[i];\n        outgoing[(i * 2) + nSilenceOffset] = nSilenceValue;\n    }\n} ", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nAudioInputStream originalAIS = ...\nint start = ...; // in frames\nint length = ...; // in frames\n\nint frameSize = originalAIS.getFormat().getFrameSize();\noriginalAIS.skip(start * frameSize);\nAudioInputStream derivedAIS = new AudioInputStream(originalAIS,\n                                     originalAIS.getFormat(), length);", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.io.*;\nimport javazoom.jl.decoder.*;\nimport javax.sound.sampled.*;\n\npublic class TestMP3Duration\n{\n    public static void main(String args[])\n    {\n\n        try\n        {\n            File f = new File(args[0]);\n            Bitstream m_bitstream = new Bitstream(\n                              new FileInputStream(f));\n            Header m_header = m_bitstream.readFrame();\n\n            int mediaLength = (int)f.length();\n \n            int nTotalMS = 0;\n            if (mediaLength != AudioSystem.NOT_SPECIFIED) {\n               nTotalMS = Math.round(m_header.total_ms(mediaLength));\n            }\n\n            System.out.println(\"Length in ms: \" + nTotalMS);\n        } catch(Exception e) {\n            e.printStackTrace();\n        } \n    }\n}", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nlong length_of_data = ...; // in bytes\nlong number_of_frames = length_of_data / 33;\nlong duration = number_of_frames * 20; // in milliseconds", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nPort port = ...;\nport.open();\nControl[] controls = port.getControls();", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to play audio file", "url": "https://github.com/orsjb/beads/blob/master/packages/Beads/beads_tutorial/Lesson09_RecordToSample.java", "url position": 39, "segments": [{"code": "<td id=\"LC1\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.IOException</span>;</td>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC3\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.core.AudioContext</span>;</td>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.core.Bead</span>;</td>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC6\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.data.Buffer</span>;</td>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.data.Sample</span>;</td>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.data.audiofile.AudioFileType</span>;</td>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC9\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.events.KillTrigger</span>;</td>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.ugens.Clock</span>;</td>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.ugens.Envelope</span>;</td>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.ugens.Gain</span>;</td>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC13\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.ugens.RecordToSample</span>;</td>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC14\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">net.beadsproject.beads.ugens.WavePlayer</span>;</td>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC15\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC16\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"><span class=\"pl-c\">/**</span></span></td>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC17\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"> * This lesson shows how to use the RecordToSample class so that instead of</span></td>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC18\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"> * generating audio that is played over the speakers, an AudioContext generates</span></td>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC19\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"> * audio that is saved to a file.</span></td>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC20\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\"> <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC21\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Lesson09_RecordToSample</span> {</td>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC22\" class=\"blob-code blob-code-inner js-file-line\">\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) {</td>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC23\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span></td>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC24\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * This example shows how to save the audio an AudioContext generates to</span></td>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC25\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * a file. You need two additional objects:</span></td>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC26\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * </span></td>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC27\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * 1. The Sample object provides a buffer for storing the generated</span></td>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC28\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * audio stream. In previous lessons, you've seen the Sample class used</span></td>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC29\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * to store the information from opening an audio file. Samples can also</span></td>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC30\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * be used to store information from audio generated at runtime.</span></td>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC31\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * </span></td>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC32\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * 2. The RecordToSample class is a UGen that records the audio it</span></td>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC33\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * receives into a Sample. You can think of it as the tool in the UGen</span></td>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC34\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * chain that redirects the audio going through the chain into a</span></td>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC35\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * buffer to be saved to a file later.</span></td>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC36\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC37\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">AudioContext</span> ac <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AudioContext</span>();</td>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC38\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Create the Sample we'll use for our recording buffer</span></td>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC39\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Sample</span> outputSample <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Sample</span>(<span class=\"pl-c1\">5000D</span>);</td>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC40\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Create the RecordToSample we'll use to take the audio generated by</span></td>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC41\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> the AudioContect and send it to the Sample.</span></td>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC42\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">RecordToSample</span> recordToSample <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RecordToSample</span>(ac,</td>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC43\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\toutputSample, <span class=\"pl-smi\">RecordToSample</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Mode</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INFINITE</span>);</td>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC44\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC45\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span></td>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC46\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * This clock is very similar to the one used in Lesson 07: Music. It</span></td>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC47\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * contains a Bead() that plays a tone every time the Clock ticks.</span></td>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC48\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * </span></td>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC49\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * Notice that inside the Clock, we tell the AudioContext to stop. We</span></td>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC50\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * don't necessarily have to do that inside of the clock, but when you</span></td>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC51\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * record a sound to a file, it's wise to programmatically stop the</span></td>", "in_page_order": 51, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC52\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * AudioContext when you're done generating whatever audio you want to</span></td>", "in_page_order": 52, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC53\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * save to a file. This is because all of the audio that the</span></td>", "in_page_order": 53, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC54\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * RecordToSample listens to is stored in memory in its Sample, taking</span></td>", "in_page_order": 54, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC55\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * up a lot of memory, so you don't want to record any more audio than</span></td>", "in_page_order": 55, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC56\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * you actually intend to use.</span></td>", "in_page_order": 56, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC57\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 57, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC58\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-smi\">Clock</span> clock <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Clock</span>(ac, <span class=\"pl-c1\">700</span>);</td>", "in_page_order": 58, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC59\" class=\"blob-code blob-code-inner js-file-line\">\t\tclock<span class=\"pl-k\">.</span>addMessageListener(</td>", "in_page_order": 59, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC60\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> this is the on-the-fly bead</span></td>", "in_page_order": 60, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC61\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Bead</span>() {</td>", "in_page_order": 61, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC62\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">messageReceived</span>(<span class=\"pl-smi\">Bead</span> <span class=\"pl-v\">message</span>) {</td>", "in_page_order": 62, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC63\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t<span class=\"pl-smi\">Clock</span> c <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">Clock</span>) message;</td>", "in_page_order": 63, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC64\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t<span class=\"pl-k\">if</span> (c<span class=\"pl-k\">.</span>isBeat()) {</td>", "in_page_order": 64, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC65\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Play a tone about once a second</span></td>", "in_page_order": 65, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC66\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-smi\">WavePlayer</span> wp <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">WavePlayer</span>(ac, <span class=\"pl-c1\">660</span>, <span class=\"pl-smi\">Buffer</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SQUARE</span>);</td>", "in_page_order": 66, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC67\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-smi\">Gain</span> g <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gain</span>(ac, <span class=\"pl-c1\">1</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Envelope</span>(ac, <span class=\"pl-c1\">0</span>));</td>", "in_page_order": 67, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC68\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\tg<span class=\"pl-k\">.</span>addInput(wp);</td>", "in_page_order": 68, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC69\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\tac<span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>addInput(g);</td>", "in_page_order": 69, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC70\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t((<span class=\"pl-smi\">Envelope</span>) g<span class=\"pl-k\">.</span>getGainUGen())<span class=\"pl-k\">.</span>addSegment(<span class=\"pl-c1\">0.1f</span>, <span class=\"pl-c1\">200</span>);</td>", "in_page_order": 70, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC71\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t((<span class=\"pl-smi\">Envelope</span>) g<span class=\"pl-k\">.</span>getGainUGen())<span class=\"pl-k\">.</span>addSegment(<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">500</span>,</td>", "in_page_order": 71, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC72\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t\t<span class=\"pl-k\">new</span> <span class=\"pl-smi\">KillTrigger</span>(g));</td>", "in_page_order": 72, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC73\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t}</td>", "in_page_order": 73, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC74\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t<span class=\"pl-k\">if</span> (c<span class=\"pl-k\">.</span>getCount() <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">80</span>) {</td>", "in_page_order": 74, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC75\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span></span></td>", "in_page_order": 75, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC76\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * At some point, we need to tell the recordToSample to stop</span></td>", "in_page_order": 76, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC77\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * recording. In this example, we do so after several clock</span></td>", "in_page_order": 77, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC78\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * ticks.</span></td>", "in_page_order": 78, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC79\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * </span></td>", "in_page_order": 79, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC80\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * There are three steps to saving the recorded audio:</span></td>", "in_page_order": 80, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC81\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * 1. Clip the recorded sample. Internally, the sample's</span></td>", "in_page_order": 81, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC82\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * buffer is implemented as an array that increases in</span></td>", "in_page_order": 82, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC83\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * size when needed. This means that the buffer has an</span></td>", "in_page_order": 83, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC84\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * indeterminate amount of silence at the end, which we want</span></td>", "in_page_order": 84, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC85\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * to remove.</span></td>", "in_page_order": 85, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC86\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * 2. Write the sample to a file.</span></td>", "in_page_order": 86, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC87\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * 3. Stop the AudioContext since we won't be using any of</span></td>", "in_page_order": 87, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC88\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t * the audio it generates after we save the audio to a file.</span></td>", "in_page_order": 88, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC89\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t\t\t\t <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 89, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC90\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\trecordToSample<span class=\"pl-k\">.</span>clip();</td>", "in_page_order": 90, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC91\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-smi\">Sample</span> sample <span class=\"pl-k\">=</span> recordToSample<span class=\"pl-k\">.</span>getSample();</td>", "in_page_order": 91, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC92\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-k\">try</span> {</td>", "in_page_order": 92, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC93\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Writes sound to file</span></td>", "in_page_order": 93, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC94\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> In this example, we save the file to the same</span></td>", "in_page_order": 94, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC95\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> location that you can find the 1234.aif file used</span></td>", "in_page_order": 95, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC96\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> by some of the previous lessons.</span></td>", "in_page_order": 96, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC97\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\tsample<span class=\"pl-k\">.</span>write(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>audio/lesson_09_out.wav<span class=\"pl-pds\">\"</span></span>,</td>", "in_page_order": 97, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC98\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t\t\t<span class=\"pl-smi\">AudioFileType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>WAV</span>);</td>", "in_page_order": 98, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC99\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> e) {</td>", "in_page_order": 99, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC100\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\t<span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Couldn't save sonification:<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 100, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC101\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t\te<span class=\"pl-k\">.</span>printStackTrace();</td>", "in_page_order": 101, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC102\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t}</td>", "in_page_order": 102, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC103\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 103, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC104\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Since we've saved the audio to a file and don't</span></td>", "in_page_order": 104, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC105\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> intend to use it for anything else, stop the</span></td>", "in_page_order": 105, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC106\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> AudioContext. If we don't, the program will eat</span></td>", "in_page_order": 106, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC107\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> up a lot of memory as it continues to generate</span></td>", "in_page_order": 107, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC108\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> audio and store it in the Sample's buffer!</span></td>", "in_page_order": 108, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC109\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t\tac<span class=\"pl-k\">.</span>stop();</td>", "in_page_order": 109, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC110\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t\t}</td>", "in_page_order": 110, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC111\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t}</td>", "in_page_order": 111, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC112\" class=\"blob-code blob-code-inner js-file-line\">\t\t});</td>", "in_page_order": 112, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC113\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 113, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC114\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Before we start the AudioContext, we need to make sure that the</span></td>", "in_page_order": 114, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC115\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> RecordToSample is listening to the AudioContext's output. So we add</span></td>", "in_page_order": 115, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC116\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> it to the UGen chain after the AudioContext's output UGen.</span></td>", "in_page_order": 116, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC117\" class=\"blob-code blob-code-inner js-file-line\">\t\trecordToSample<span class=\"pl-k\">.</span>addInput(ac<span class=\"pl-k\">.</span>out);</td>", "in_page_order": 117, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC118\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> Also add the RecordToSample as a dependent to the AudioContext so</span></td>", "in_page_order": 118, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC119\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> that it starts recording when the AudioContext is started and is</span></td>", "in_page_order": 119, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC120\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span> killed when the AudioContext is stopped.</span></td>", "in_page_order": 120, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC121\" class=\"blob-code blob-code-inner js-file-line\">\t\tac<span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>addDependent(recordToSample);</td>", "in_page_order": 121, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC122\" class=\"blob-code blob-code-inner js-file-line\">\t\tac<span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>addDependent(clock);</td>", "in_page_order": 122, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC123\" class=\"blob-code blob-code-inner js-file-line\">\t\t</td>", "in_page_order": 123, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC124\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span> </span></td>", "in_page_order": 124, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC125\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * How you start the AudioContext determines whether you will hear the</span></td>", "in_page_order": 125, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC126\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * audio being generated as the RecordToSample records it, or if the</span></td>", "in_page_order": 126, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC127\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * AudioContext generates the audio without playing it through the</span></td>", "in_page_order": 127, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC128\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * user's speakers.</span></td>", "in_page_order": 128, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC129\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 129, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC130\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span> AudioContext.start() will always play the sound through the user's</span></td>", "in_page_order": 130, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC131\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * speakers. <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 131, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC132\" class=\"blob-code blob-code-inner js-file-line\">\t\tac<span class=\"pl-k\">.</span>start();</td>", "in_page_order": 132, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC133\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">/*</span> AudioContext.runNonRealtime() will generate the audio stream</span></td>", "in_page_order": 133, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC134\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * silently. One major advantage of starting an AudioContext with</span></td>", "in_page_order": 134, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC135\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * runNonRealtime is that the AudioContext will generate the audio</span></td>", "in_page_order": 135, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC136\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * stream as quickly as possible, not at the rate one would listen to</span></td>", "in_page_order": 136, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC137\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * the stream. For example, it should take a typical computer a fraction</span></td>", "in_page_order": 137, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC138\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * of a second to generate several second's worth of audio</span></td>", "in_page_order": 138, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC139\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c\">\t\t * information. <span class=\"pl-c\">*/</span></span></td>", "in_page_order": 139, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC140\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">//</span>ac.runNonRealTime();</span></td>", "in_page_order": 140, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC141\" class=\"blob-code blob-code-inner js-file-line\">\t}</td>", "in_page_order": 141, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}, {"code": "<td id=\"LC142\" class=\"blob-code blob-code-inner js-file-line\">}</td>", "in_page_order": 142, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "24", "length": false, "semicolon": false}]},
{"query": "How to play audio file", "url": "https://github.com/sedmelluq/lavaplayer", "url position": 38, "segments": []},
{"query": "How to play audio file", "url": "http://www.lejos.org/ev3/docs/lejos/hardware/Audio.html", "url position": 42, "segments": [{"code": "public interface Audio\r\nextends Sounds", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "voidsystemSound(intaCode)", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "voidplayTone(intaFrequency,\r\n              intaDuration,\r\n              intaVolume)", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "voidplayTone(intfreq,\r\n              intduration)", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "intplaySample(java.io.Filefile,\r\n               intvol)", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "intplaySample(java.io.Filefile)", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "intplaySample(byte[]data,\r\n               intoffset,\r\n               intlen,\r\n               intfreq,\r\n               intvol)", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "voidplayNote(int[]inst,\r\n              intfreq,\r\n              intlen)", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "voidsetVolume(intvol)", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "intgetVolume()", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "voidloadSettings()", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to play audio file", "url": "http://www.javazoom.net/mp3spi/documents.html", "url position": 44, "segments": [{"code": "Standard parameters : - duration : [Long], duration in microseconds.  - title : [String], Title of the stream.  - author : [String], Name of the artist of the stream.  - album : [String], Name of the album of the stream.  - date : [String], The date (year) of the recording or release of the stream.  - copyright : [String], Copyright message of the stream.  - comment : [String], Comment of the stream.  Extended MP3 parameters : - mp3.version.mpeg : [String], mpeg version : 1,2 or 2.5  - mp3.version.layer : [String], layer version 1, 2 or 3  - mp3.version.encoding : [String], mpeg encoding : MPEG1, MPEG2-LSF, MPEG2.5-LSF  - mp3.channels : [Integer], number of channels 1 : mono, 2 : stereo.  - mp3.frequency.hz : [Integer], sampling rate in hz.  - mp3.bitrate.nominal.bps : [Integer], nominal bitrate in bps.  - mp3.length.bytes : [Integer], length in bytes.  - mp3.length.frames : [Integer], length in frames.  - mp3.framesize.bytes : [Integer], framesize of the first frame.  framesize is not constant for VBR streams.  - mp3.framerate.fps : [Float], framerate in frames per seconds.  - mp3.header.pos : [Integer], position of first audio header (or ID3v2 size).  - mp3.vbr : [Boolean], vbr flag.  - mp3.vbr.scale : [Integer], vbr scale.  - mp3.crc : [Boolean], crc flag.  - mp3.original : [Boolean], original flag.  - mp3.copyright : [Boolean], copyright flag.  - mp3.padding : [Boolean], padding flag.  - mp3.mode : [Integer], mode 0:STEREO 1:JOINT_STEREO 2:DUAL_CHANNEL 3:SINGLE_CHANNEL  - mp3.id3tag.genre : [String], ID3 tag (v1 or v2) genre.  - mp3.id3tag.track : [String], ID3 tag (v1 or v2) track info.  - mp3.id3tag.v2 : [InputStream], ID3v2 frames.  - mp3.shoutcast.metadata.key : [String], Shoutcast meta key with matching value.     For instance : mp3.shoutcast.metadata.icy-irc=#shoutcast mp3.shoutcast.metadata.icy-metaint=8192 mp3.shoutcast.metadata.icy-genre=Trance Techno Dance mp3.shoutcast.metadata.icy-url=http://www.di.fm", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to play audio file", "url": "http://www.java-gaming.org/index.php/topic,10548.", "url position": 43, "segments": [{"code": "/** Created on Aug 5, 2005*/package Samples.audio;import java.io.File;import java.io.IOException;import java.net.URL;import javax.sound.sampled.AudioFormat;import javax.sound.sampled.AudioInputStream;import javax.sound.sampled.AudioSystem;import javax.sound.sampled.DataLine;import javax.sound.sampled.LineUnavailableException;import javax.sound.sampled.SourceDataLine;import javax.sound.sampled.UnsupportedAudioFileException;import javax.sound.sampled.FloatControl;/*** @author vinesh*/public class FoundationAudioStream  implements  Runnable{   // better size   private static final int  EXTERNAL_BUFFER_SIZE = 4000 * 4;   private Thread      m_thread = null;   private Object      m_dataSource;   private AudioInputStream  m_audioInputStream;   private SourceDataLine   m_sourceDataLine;   public static long     lastMicrosecondPosition=0;   public static long     currentMicrosecondPosition=0;      private boolean     pauseFlag=false;   private int       pauseCount;   private int       bufferSize;   private int       audioLength;      // Length of the sound.   public static  int    audioPosition = 0;   // Current position within the sound   /**  This variable is used to distinguish stopped state from paused state. */   private boolean     m_bRunning;   protected FoundationAudioStream()   {    m_dataSource = null;    m_audioInputStream = null;    m_sourceDataLine = null;    m_gainControl = null;    m_panControl = null;   }   protected void setDataSource(File file)    throws  UnsupportedAudioFileException, LineUnavailableException, IOException   {    m_dataSource = file;    initAudioInputStream();   }   private void initAudioInputStream()    throws  UnsupportedAudioFileException, LineUnavailableException, IOException{    if (m_dataSource instanceof File)initAudioInputStream((File) m_dataSource);   }   private void initAudioInputStream(File file)    throws  UnsupportedAudioFileException, IOException{      m_audioInputStream = AudioSystem.getAudioInputStream(file);      bufferSize = (int)file.length();   }   protected void initLine()    throws  LineUnavailableException{    if (m_sourceDataLine == null){      createLine();      openLine();    }else{      AudioFormat  lineAudioFormat = m_sourceDataLine.getFormat();      AudioFormat  audioInputStreamFormat = m_audioInputStream == null ? null : m_audioInputStream.getFormat();      if (!lineAudioFormat.equals(audioInputStreamFormat)){       m_sourceDataLine.close();       openLine();      }    }   }   private void createLine()    throws  LineUnavailableException{    if (m_sourceDataLine != null)return;    AudioFormat  audioFormat = m_audioInputStream.getFormat();    DataLine.Info  info =       new DataLine.Info(SourceDataLine.class, audioFormat, AudioSystem.NOT_SPECIFIED);    m_sourceDataLine = (SourceDataLine) AudioSystem.getLine(info);        /** reseting the lastMicrosecondPosition for progress bar. */    lastMicrosecondPosition=0;   }   private void openLine()    throws  LineUnavailableException{    if (m_sourceDataLine == null)return;    AudioFormat  audioFormat = m_audioInputStream.getFormat();    m_sourceDataLine.open(audioFormat, m_sourceDataLine.getBufferSize());   }   /** Start the audio */   public void start()   {    if (!(m_thread == null || !m_thread.isAlive()))       out(\"WARNING: old thread still running!!\");    m_thread = new Thread(this);    m_thread.start();    m_sourceDataLine.start();   }   /** Stop the audio. */   protected void stop()   {    if (m_bRunning)    {      if (m_sourceDataLine != null)      {       lastMicrosecondPosition=m_sourceDataLine.getMicrosecondPosition();       m_sourceDataLine.stop();       m_sourceDataLine.flush();      }      m_bRunning = false;      /**  We re-initialize the AudioInputStream. */      try{       initAudioInputStream();      }catch (UnsupportedAudioFileException e){}      catch (LineUnavailableException e){}      catch (IOException e){}    }   }   /** Pause the audio */   public void pause(){    m_sourceDataLine.stop();}   /** Continue playing audio after pause */   public void resume(){    m_sourceDataLine.start();}   /** Stop playing the audio and reset the position to 0 on progress bar */   public void resetAudio( ) {     stop( );     audioPosition = 0;      TestAudioPlayer.songPerMillisecond.setValue(0);   }      public void run()   {    int  nBytesRead = 0;    m_bRunning = true;    byte[]  abData = new byte[EXTERNAL_BUFFER_SIZE];    int currentCount=0;    while (nBytesRead != -1 && m_bRunning)    {      try{       nBytesRead = m_audioInputStream.read(abData, 0, abData.length);      }catch (IOException e){       e.printStackTrace();}      if (nBytesRead >= 0 )       int  nBytesWritten = m_sourceDataLine.write(abData, 0, nBytesRead);    }    /** for pause to lock the song played */    if(pauseFlag)pauseCount=currentCount;    m_sourceDataLine.drain();    stop();    /** Reset the progress bar position after audio is completed. */    lastMicrosecondPosition=m_sourceDataLine.getMicrosecondPosition();    if(!TestAudioPlayer.start.isEnabled())TestAudioPlayer.start.setEnabled(true);    if(!TestAudioPlayer.select.isEnabled())TestAudioPlayer.select.setEnabled(true);   }   private static void out(String strMessage){    System.out.println(strMessage);   }}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]}
]