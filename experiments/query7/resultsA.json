[
{"query": "How to connect to a JDBC database", "url": "https://www.mkyong.com/jdbc/connect-to-oracle-db-via-jdbc-driver-java/", "url position": 12, "segments": [{"code": "\r\nClass.forName(\"oracle.jdbc.driver.OracleDriver\");\r\nConnection connection = null;\r\nconnection = DriverManager.getConnection(\"jdbc:oracle:thin:@localhost:1521:SID\",\"username\",\"password\");\r\nconnection.close();\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\npackage com.mkyong;\r\n\r\nimport java.sql.DriverManager;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\n\r\npublic class OracleJDBCExample {\r\n\r\n    public static void main(String[] argv) {\r\n\r\n        System.out.println(\"-------- Oracle JDBC Connection Testing ------\");\r\n\r\n        try {\r\n\r\n            Class.forName(\"oracle.jdbc.driver.OracleDriver\");\r\n\r\n        } catch (ClassNotFoundException e) {\r\n\r\n            System.out.println(\"Where is your Oracle JDBC Driver?\");\r\n            e.printStackTrace();\r\n            return;\r\n\r\n        }\r\n\r\n        System.out.println(\"Oracle JDBC Driver Registered!\");\r\n\r\n        Connection connection = null;\r\n\r\n        try {\r\n\r\n            connection = DriverManager.getConnection(\r\n                    \"jdbc:oracle:thin:@localhost:1521:xe\", \"system\", \"password\");\r\n\r\n        } catch (SQLException e) {\r\n\r\n            System.out.println(\"Connection Failed! Check output console\");\r\n            e.printStackTrace();\r\n            return;\r\n\r\n        }\r\n\r\n        if (connection != null) {\r\n            System.out.println(\"You made it, take control your database now!\");\r\n        } else {\r\n            System.out.println(\"Failed to make connection!\");\r\n        }\r\n    }\r\n\r\n}\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nC:\\jdbc-test>javac OracleJDBCExample.java\r\n\r\nC:\\jdbc-test>java -cp c:\\jdbc-test\\ojdbc7.jar;c:\\jdbc-test OracleJDBCExample\r\n-------- Oracle JDBC Connection Testing ------------\r\nOracle JDBC Driver Registered!\r\nYou made it, take control your database now!\r\n\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "http://www.vogella.com/tutorials/MySQLJava/article.html", "url position": 11, "segments": [{"code": "create database feedback;\nuse feedback;", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "CREATE USER sqluser IDENTIFIED BY 'sqluserpw';\n\ngrant usage on *.* to sqluser@localhost identified by 'sqluserpw';\ngrant all privileges on feedback.* to sqluser@localhost;", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "CREATE TABLE comments (\n        id INT NOT NULL AUTO_INCREMENT,\n        MYUSER VARCHAR(30) NOT NULL,\n        EMAIL VARCHAR(30),\n        WEBPAGE VARCHAR(100) NOT NULL,\n        DATUM DATE NOT NULL,\n        SUMMARY VARCHAR(40) NOT NULL,\n        COMMENTS VARCHAR(400) NOT NULL,\n        PRIMARY KEY (ID)\n    );\n\nINSERT INTO comments values (default, 'lars', 'myemail@gmail.com','http://www.vogella.com', '2009-09-14 10:33:11', 'Summary','My first comment' );", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package de.vogella.mysql.first;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Date;\n\npublic class MySQLAccess {\n    private Connection connect = null;\n    private Statement statement = null;\n    private PreparedStatement preparedStatement = null;\n    private ResultSet resultSet = null;\n\n    public void readDataBase() throws Exception {\n        try {\n            // This will load the MySQL driver, each DB has its own driver\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            // Setup the connection with the DB\n            connect = DriverManager\n                    .getConnection(\"jdbc:mysql://localhost/feedback?\"\n                            + \"user=sqluser&password=sqluserpw\");\n\n            // Statements allow to issue SQL queries to the database\n            statement = connect.createStatement();\n            // Result set get the result of the SQL query\n            resultSet = statement\n                    .executeQuery(\"select * from feedback.comments\");\n            writeResultSet(resultSet);\n\n            // PreparedStatements can use variables and are more efficient\n            preparedStatement = connect\n                    .prepareStatement(\"insert into  feedback.comments values (default, ?, ?, ?, ? , ?, ?)\");\n            // \"myuser, webpage, datum, summary, COMMENTS from feedback.comments\");\n            // Parameters start with 1\n            preparedStatement.setString(1, \"Test\");\n            preparedStatement.setString(2, \"TestEmail\");\n            preparedStatement.setString(3, \"TestWebpage\");\n            preparedStatement.setDate(4, new java.sql.Date(2009, 12, 11));\n            preparedStatement.setString(5, \"TestSummary\");\n            preparedStatement.setString(6, \"TestComment\");\n            preparedStatement.executeUpdate();\n\n            preparedStatement = connect\n                    .prepareStatement(\"SELECT myuser, webpage, datum, summary, COMMENTS from feedback.comments\");\n            resultSet = preparedStatement.executeQuery();\n            writeResultSet(resultSet);\n\n            // Remove again the insert comment\n            preparedStatement = connect\n            .prepareStatement(\"delete from feedback.comments where myuser= ? ; \");\n            preparedStatement.setString(1, \"Test\");\n            preparedStatement.executeUpdate();\n\n            resultSet = statement\n            .executeQuery(\"select * from feedback.comments\");\n            writeMetaData(resultSet);\n\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            close();\n        }\n\n    }\n\n    private void writeMetaData(ResultSet resultSet) throws SQLException {\n        //  Now get some metadata from the database\n        // Result set get the result of the SQL query\n\n        System.out.println(\"The columns in the table are: \");\n\n        System.out.println(\"Table: \" + resultSet.getMetaData().getTableName(1));\n        for  (int i = 1; i<= resultSet.getMetaData().getColumnCount(); i++){\n            System.out.println(\"Column \" +i  + \" \"+ resultSet.getMetaData().getColumnName(i));\n        }\n    }\n\n    private void writeResultSet(ResultSet resultSet) throws SQLException {\n        // ResultSet is initially before the first data set\n        while (resultSet.next()) {\n            // It is possible to get the columns via name\n            // also possible to get the columns via the column number\n            // which starts at 1\n            // e.g. resultSet.getSTring(2);\n            String user = resultSet.getString(\"myuser\");\n            String website = resultSet.getString(\"webpage\");\n            String summary = resultSet.getString(\"summary\");\n            Date date = resultSet.getDate(\"datum\");\n            String comment = resultSet.getString(\"comments\");\n            System.out.println(\"User: \" + user);\n            System.out.println(\"Website: \" + website);\n            System.out.println(\"summary: \" + summary);\n            System.out.println(\"Date: \" + date);\n            System.out.println(\"Comment: \" + comment);\n        }\n    }\n\n    // You need to close the resultSet\n    private void close() {\n        try {\n            if (resultSet != null) {\n                resultSet.close();\n            }\n\n            if (statement != null) {\n                statement.close();\n            }\n\n            if (connect != null) {\n                connect.close();\n            }\n        } catch (Exception e) {\n\n        }\n    }\n\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "package de.vogella.mysql.first.test;\n\nimport de.vogella.mysql.first.MySQLAccess;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        MySQLAccess dao = new MySQLAccess();\n        dao.readDataBase();\n    }\n\n}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.tutorialspoint.com/jdbc/jdbc-db-connections.htm", "url position": 2, "segments": [{"code": "\nimport java.sql.* ;  // for standard JDBC programs\nimport java.math.* ; // for BigDecimal and BigInteger support\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ntry {\n   Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n}\ncatch(ClassNotFoundException ex) {\n   System.out.println(\"Error: unable to load driver class!\");\n   System.exit(1);\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ntry {\n   Class.forName(\"oracle.jdbc.driver.OracleDriver\").newInstance();\n}\ncatch(ClassNotFoundException ex) {\n   System.out.println(\"Error: unable to load driver class!\");\n   System.exit(1);\ncatch(IllegalAccessException ex) {\n   System.out.println(\"Error: access problem while loading!\");\n   System.exit(2);\ncatch(InstantiationException ex) {\n   System.out.println(\"Error: unable to instantiate driver!\");\n   System.exit(3);\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ntry {\n   Driver myDriver = new oracle.jdbc.driver.OracleDriver();\n   DriverManager.registerDriver( myDriver );\n}\ncatch(ClassNotFoundException ex) {\n   System.out.println(\"Error: unable to load driver class!\");\n   System.exit(1);\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\njdbc:oracle:thin:@amrood:1521:EMP\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nString URL = \"jdbc:oracle:thin:@amrood:1521:EMP\";\nString USER = \"username\";\nString PASS = \"password\"\nConnection conn = DriverManager.getConnection(URL, USER, PASS);\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDriverManager.getConnection(String url);\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\njdbc:oracle:driver:username/password@database\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nString URL = \"jdbc:oracle:thin:username/password@amrood:1521:EMP\";\nConnection conn = DriverManager.getConnection(URL);\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDriverManager.getConnection(String url, Properties info);\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nimport java.util.*;\n\nString URL = \"jdbc:oracle:thin:@amrood:1521:EMP\";\nProperties info = new Properties( );\ninfo.put( \"user\", \"username\" );\ninfo.put( \"password\", \"password\" );\n\nConnection conn = DriverManager.getConnection(URL, info);\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nconn.close();\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html", "url position": 1, "segments": [{"code": "\npublic Connection getConnection() throws SQLException {\n\n    Connection conn = null;\n    Properties connectionProps = new Properties();\n    connectionProps.put(\"user\", this.userName);\n    connectionProps.put(\"password\", this.password);\n\n    if (this.dbms.equals(\"mysql\")) {\n        conn = DriverManager.getConnection(\n                   \"jdbc:\" + this.dbms + \"://\" +\n                   this.serverName +\n                   \":\" + this.portNumber + \"/\",\n                   connectionProps);\n    } else if (this.dbms.equals(\"derby\")) {\n        conn = DriverManager.getConnection(\n                   \"jdbc:\" + this.dbms + \":\" +\n                   this.dbName +\n                   \";create=true\",\n                   connectionProps);\n    }\n    System.out.println(\"Connected to database\");\n    return conn;\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\njdbc:derby:[subsubprotocol:][databaseName]\n    [;attribute=value]*\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\njdbc:mysql://[host][,failoverhost...]\n    [:port]/[database]\n    [?propertyName1][=propertyValue1]\n    [&propertyName2][=propertyValue2]...\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://stackoverflow.com/questions/10915375/create-a-class-to-connect-to-any-database-using-jdbc", "url position": 5, "segments": [{"code": "public class ConnectionManager {\n    private static String url = \"jdbc:mysql://localhost:3306/prototypeeop\";    \n    private static String driverName = \"com.mysql.jdbc.Driver\";   \n    private static String username = \"root\";   \n    private static String password = \"triala\";\n    private static Connection con;\n    private static String urlstring;\n\n    public static Connection getConnection() {\n        try {\n            Class.forName(driverName);\n            try {\n                con = DriverManager.getConnection(urlstring, username, password);\n            } catch (SQLException ex) {\n                // log an exception. fro example:\n                System.out.println(\"Failed to create the database connection.\"); \n            }\n        } catch (ClassNotFoundException ex) {\n            // log an exception. for example:\n            System.out.println(\"Driver not found.\"); \n        }\n        return con;\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "10", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private Connection con = null;\nprivate Statement stmt = null;\nprivate ResultSet rs = null;\n\ncon = ConnectionManager.getConnection();\nstmt = con.createStatement();\nrs = stmt.executeQuery(sql);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "10", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://stackoverflow.com/questions/4832056/java-jdbc-how-to-connect-to-oracle-using-service-name-instead-of-sid", "url position": 6, "segments": [{"code": "jdbc:oracle:thin:@//HOSTNAME:PORT/SERVICENAME\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "71", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:oracle:thin:@(description=(address=(host=HOSTNAME)(protocol=tcp)(port=PORT))(connect_data=(service_name=SERVICENAME)(server=SHARED)))\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "71", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST =(ADDRESS =(PROTOCOL=TCP)(HOST=blah.example.com)(PORT=1521)))(CONNECT_DATA=(SID=BLAHSID)(GLOBAL_NAME=BLAHSID.WORLD)(SERVER=DEDICATED)))\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "19", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "import java.sql.*; \n\npublic class MyDBConnect {\n\n    public static void main(String[] args) throws SQLException {\n\n        try { \n            String dbURL = \"jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=whatEverYourHostNameIs)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=yourServiceName)))\";\n            String strUserID = \"yourUserId\";\n            String strPassword = \"yourPassword\";\n            Connection myConnection=DriverManager.getConnection(dbURL,strUserID,strPassword);\n\n            Statement sqlStatement = myConnection.createStatement();\n            String readRecordSQL = \"select * from sa_work_order where WORK_ORDER_NO = '1503090' \";  \n            ResultSet myResultSet = sqlStatement.executeQuery(readRecordSQL);\n            while (myResultSet.next()) {\n                System.out.println(\"Record values: \" + myResultSet.getString(\"WORK_ORDER_NO\"));\n            }\n            myResultSet.close();\n            myConnection.close();\n\n        } catch (Exception e) {\n            System.out.println(e);\n        }       \n    }\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "5", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://stackoverflow.com/questions/4320623/connecting-a-microsoft-access-database-to-java-using-jdbc-and-compiling", "url position": 7, "segments": [{"code": "String database = \"jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=TLDATABASEDBM.mdb\";\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "package javaapplication1;\n\nimport java.sql.*;\n\npublic class MSaccess_archive {\npublic static void main(String[] args) {\n\n    try {\n\n       Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\");\n// set this to a MS Access DB you have on your machine\nString filename = \"mdbTEST.mdb\";\nString database = \"jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=\";\ndatabase+= filename.trim() + \";DriverID=22;}\"; // add on to the end \n// now we can get the connection from the DriverManager\nConnection con = DriverManager.getConnection( database ,\"\",\"\");\n\n        Statement stmt = con.createStatement();\n\n        stmt.execute(\"select * from student\"); // execute query in table student\n\n        ResultSet rs = stmt.getResultSet(); // get any Result that came from our query\n\n        if (rs != null)\n         while ( rs.next() ){\n\n            System.out.println(\"Name: \" + rs.getInt(\"Age\") + \" ID:       \"+rs.getString(\"Course\"));\n            }\n\n            stmt.close();\n            con.close();\n        }\n        catch (Exception err) {\n            System.out.println(\"ERROR: \" + err);\n        }\n   }\n\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://stackoverflow.com/questions/2839321/connect-java-to-a-mysql-database", "url position": 8, "segments": [{"code": "Context context = new InitialContext();\nDataSource dataSource = (DataSource) context.lookup(\"java:comp/env/jdbc/myDB\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "155", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "MysqlDataSource dataSource = new MysqlDataSource();\ndataSource.setUser(\"scott\");\ndataSource.setPassword(\"tiger\");\ndataSource.setServerName(\"myDBHost.example.org\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "155", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection conn = dataSource.getConnection();\nStatement stmt = conn.createStatement();\nResultSet rs = stmt.executeQuery(\"SELECT ID FROM USERS\");\n...\nrs.close();\nstmt.close();\nconn.close();\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "155", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "java -cp .;/path/to/mysql-connector.jar com.example.YourClass", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "CREATE DATABASE javabase DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "CREATE USER 'java'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL ON javabase.* TO 'java'@'localhost' IDENTIFIED BY 'password';\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "jdbc:mysql://hostname:port/databasename", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:mysql://localhost:3306/javabase", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "String url = \"jdbc:mysql://localhost:3306/javabase\";\nString username = \"java\";\nString password = \"password\";\n\nSystem.out.println(\"Connecting database...\");\n\ntry (Connection connection = DriverManager.getConnection(url, username, password)) {\n    System.out.println(\"Database connected!\");\n} catch (SQLException e) {\n    throw new IllegalStateException(\"Cannot connect the database!\", e);\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "System.out.println(\"Loading driver...\");\n\ntry {\n    Class.forName(\"com.mysql.jdbc.Driver\");\n    System.out.println(\"Driver loaded!\");\n} catch (ClassNotFoundException e) {\n    throw new IllegalStateException(\"Cannot find the driver in the classpath!\", e);\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "374", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// init database constants\nprivate static final String DATABASE_DRIVER = \"com.mysql.jdbc.Driver\";\nprivate static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/database_name\";\nprivate static final String USERNAME = \"root\";\nprivate static final String PASSWORD = \"\";\nprivate static final String MAX_POOL = \"250\"; // set your own limit\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// init connection object\nprivate Connection connection;\n// init properties object\nprivate Properties properties;\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// create properties\nprivate Properties getProperties() {\n    if (properties == null) {\n        properties = new Properties();\n        properties.setProperty(\"user\", USERNAME);\n        properties.setProperty(\"password\", PASSWORD);\n        properties.setProperty(\"MaxPooledStatements\", MAX_POOL);\n    }\n    return properties;\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// connect database\npublic Connection connect() {\n    if (connection == null) {\n        try {\n            Class.forName(DATABASE_DRIVER);\n            connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n        } catch (ClassNotFoundException | SQLException e) {\n            // Java 7+\n            e.printStackTrace();\n        }\n    }\n    return connection;\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// disconnect database\npublic void disconnect() {\n    if (connection != null) {\n        try {\n            connection.close();\n            connection = null;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\npublic class MysqlConnect {\n    // init database constants\n    private static final String DATABASE_DRIVER = \"com.mysql.jdbc.Driver\";\n    private static final String DATABASE_URL = \"jdbc:mysql://localhost:3306/database_name\";\n    private static final String USERNAME = \"root\";\n    private static final String PASSWORD = \"\";\n    private static final String MAX_POOL = \"250\";\n\n    // init connection object\n    private Connection connection;\n    // init properties object\n    private Properties properties;\n\n    // create properties\n    private Properties getProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            properties.setProperty(\"user\", USERNAME);\n            properties.setProperty(\"password\", PASSWORD);\n            properties.setProperty(\"MaxPooledStatements\", MAX_POOL);\n        }\n        return properties;\n    }\n\n    // connect database\n    public Connection connect() {\n        if (connection == null) {\n            try {\n                Class.forName(DATABASE_DRIVER);\n                connection = DriverManager.getConnection(DATABASE_URL, getProperties());\n            } catch (ClassNotFoundException | SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        return connection;\n    }\n\n    // disconnect database\n    public void disconnect() {\n        if (connection != null) {\n            try {\n                connection.close();\n                connection = null;\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// !_ note _! this is just init\n// it will not create a connection\nMysqlConnect mysqlConnect = new MysqlConnect();\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String sql = \"SELECT * FROM `stackoverflow`\";\ntry {\n    PreparedStatement statement = mysqlConnect.connect().prepareStatement(sql);\n    ... go on ...\n    ... go on ...\n    ... DONE ....\n} catch (SQLException e) {\n    e.printStackTrace();\n} finally {\n    mysqlConnect.disconnect();\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "23", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String url = \"jdbc:mysql://127.0.0.1:3306/yourdatabase\";\nString user = \"username\";\nString password = \"password\";\n\n// Load the Connector/J driver\nClass.forName(\"com.mysql.jdbc.Driver\").newInstance();\n// Establish connection to MySQL\nConnection conn = DriverManager.getConnection(url, user, password);\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "18", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\nConnection conn = DriverManager.getConnection\n   (\"jdbc:mysql://localhost:3306/foo\", \"root\", \"password\");\n\nStatement stmt = conn.createStatement();\nstmt.execute(\"SELECT * FROM `FOO.BAR`\");\nstmt.close();\nconn.close();\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "11", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try\n    {       \n        Class.forName(\"com.mysql.jdbc.Driver\");\n        System.out.println(\"Driver Loaded\");\n        conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/testDB\",\"root\",\"\");\n        //Database Name - testDB, Username - \"root\", Password - \"\"\n        System.out.println(\"Connected...\");         \n    }\n    catch(Exception e)\n    {\n        e.printStackTrace();\n    }\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": "2", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try\n    {\n        String url = \"jdbc:sqlserver://KHILAN:1433;databaseName=testDB;user=Khilan;password=Tuxedo123\"; \n       //KHILAN is Host and 1433 is port number     \n        Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n        System.out.println(\"Driver Loaded\");\n        conn = DriverManager.getConnection(url);\n        System.out.println(\"Connected...\");\n    }\n    catch(Exception e)\n    {\n        e.printStackTrace();\n    }\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": "2", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection con = DriverManager.getConnection(\n                     \"jdbc:myDriver:DatabaseName\",\n                     dBuserName,\n                     dBuserPassword);\n\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(\"SELECT a, b, c FROM Table\");\n\nwhile (rs.next()) {\n    int x = rs.getInt(\"a\");\n    String s = rs.getString(\"b\");\n    float f = rs.getFloat(\"c\");\n}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection con = DriverManager.getConnection(\n                     \"jdbc:myDriver:DatabaseName\",\n                     dBuserName,\n                     dBuserPassword);\nif (con != null){\n //..handle your code there \n}\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private String db_server = BaseMethods.getSystemData(\"db_server\");\nprivate String db_user = BaseMethods.getSystemData(\"db_user\");\nprivate String db_password = BaseMethods.getSystemData(\"db_password\");\n\nprivate String connectToDb() throws Exception {\n   String jdbcDriver = \"com.mysql.jdbc.Driver\";\n   String dbUrl = \"jdbc:mysql://\" + db_server  +\n        \"?verifyServerCertificate=false\" +\n        \"&useSSL=true\" +\n        \"&requireSSL=true\";\n    System.setProperty(jdbcDriver, \"\");\n    Class.forName(jdbcDriver).newInstance();\n\n    Connection conn = DriverManager.getConnection(dbUrl, db_user, db_password);\n    Statement statement = conn.createStatement();\n    String query = \"SELECT EXTERNAL_ID FROM offer_letter where ID =\" + \"\\\"\" + letterID + \"\\\"\";\n    ResultSet resultSet = statement.executeQuery(query);\n    resultSet.next();\n    return resultSet.getString(1);\n}\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Class.forName(\"com.mysql.jdbc.Driver\");     \n\nConnection con=DriverManager.getConnection(\"jdbc:mysql://localhost:3306/DatabaseName\",\"Username\",\"Password\");         \nStatement stmt=con.createStatement();            \nstmt = con.createStatement();\nResultSet rs=stmt.executeQuery(\"Select * from Table\");  \n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class DB {\n\n    public static Connection c;\n\n    public static Connection getConnection() throws Exception {\n        if (c == null) {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            c =DriverManager.getConnection(\"jdbc:mysql://localhost:3306/DATABASE\", \"USERNAME\", \"Password\");\n        }\n        return c;\n    }\n\n    // Send data TO Database\n    public static void setData(String sql) throws Exception {\n        DB.getConnection().createStatement().executeUpdate(sql);\n    }\n\n    // Get Data From Database\n    public static ResultSet getData(String sql) throws Exception {\n        ResultSet rs = DB.getConnection().createStatement().executeQuery(sql);\n        return rs;\n    }\n}\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://stackoverflow.com/questions/2451892/how-do-i-connect-to-a-sql-server-2008-database-using-jdbc", "url position": 9, "segments": [{"code": "String userName = \"username\";\nString password = \"password\";\n\nString url = \"jdbc:sqlserver://MYPC\\\\SQLEXPRESS;databaseName=MYDB\";\n\nClass.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\nConnection conn = DriverManager.getConnection(url, userName, password);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "58", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String url = \"jdbc:sqlserver://MYPC\\\\SQLEXPRESS;databaseName=MYDB;integratedSecurity=true\";\nClass.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\nConnection conn = DriverManager.getConnection(url);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "58", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class ConnectMSSQLServer\n{\n   public void dbConnect(String db_connect_string,\n            String db_userid,\n            String db_password)\n   {\n      try {\n         Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n         Connection conn = DriverManager.getConnection(db_connect_string,\n                  db_userid, db_password);\n         System.out.println(\"connected\");\n         Statement statement = conn.createStatement();\n         String queryString = \"select * from sysobjects where type='u'\";\n         ResultSet rs = statement.executeQuery(queryString);\n         while (rs.next()) {\n            System.out.println(rs.getString(1));\n         }\n      } catch (Exception e) {\n         e.printStackTrace();\n      }\n   }\n\n   public static void main(String[] args)\n   {\n      ConnectMSSQLServer connServer = new ConnectMSSQLServer();\n      connServer.dbConnect(\"jdbc:sqlserver://<hostname>\", \"<user>\",\n               \"<password>\");\n   }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "24", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Class.forName( \"net.sourceforge.jtds.jdbc.Driver\" );\nConnection con = DriverManager.getConnection( \"jdbc:jtds:sqlserver://<your server ip     \naddress>:1433/zacmpf\", userName, password );\nStatement stmt = con.createStatement();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "5", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.*;\nimport javax.sql.*;\n\npublic class jdbcdemo{\n\npublic static void main(String args[]){\nString dbtime;\nString dbUrl = \"jdbc:mysql://your.database.domain/yourDBname\";\nString dbClass = \"com.mysql.jdbc.Driver\";\nString query = \"Select * FROM users\";\n\ntry {\n\nClass.forName(\"com.mysql.jdbc.Driver\");\nConnection con = DriverManager.getConnection (dbUrl);\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(query);\n\nwhile (rs.next()) {\ndbtime = rs.getString(1);\nSystem.out.println(dbtime);\n} //end while\n\ncon.close();\n} //end try\n\ncatch(ClassNotFoundException e) {\ne.printStackTrace();\n}\n\ncatch(SQLException e) {\ne.printStackTrace();\n}\n\n}  //end main\n\n}  //end class\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": "-7", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://db.apache.org/derby/integrate/plugin_help/derby_app.html", "url position": 19, "segments": [{"code": "package myapp;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.sql.ResultSetMetaData;\n\n\npublic class Restaurants\n{\n    private static String dbURL = \"jdbc:derby://localhost:1527/myDB;create=true;user=me;password=mine\";\n    private static String tableName = \"restaurants\";\n    // jdbc Connection\n    private static Connection conn = null;\n    private static Statement stmt = null;\n\n    public static void main(String[] args)\n    {\n        createConnection();\n        insertRestaurants(5, \"LaVals\", \"Berkeley\");\n        selectRestaurants();\n        shutdown();\n    }\n    \n    private static void createConnection()\n    {\n        try\n        {\n            Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\n            //Get a connection\n            conn = DriverManager.getConnection(dbURL); \n        }\n        catch (Exception except)\n        {\n            except.printStackTrace();\n        }\n    }\n    \n    private static void insertRestaurants(int id, String restName, String cityName)\n    {\n        try\n        {\n            stmt = conn.createStatement();\n            stmt.execute(\"insert into \" + tableName + \" values (\" +\n                    id + \",'\" + restName + \"','\" + cityName +\"')\");\n            stmt.close();\n        }\n        catch (SQLException sqlExcept)\n        {\n            sqlExcept.printStackTrace();\n        }\n    }\n    \n    private static void selectRestaurants()\n    {\n        try\n        {\n            stmt = conn.createStatement();\n            ResultSet results = stmt.executeQuery(\"select * from \" + tableName);\n            ResultSetMetaData rsmd = results.getMetaData();\n            int numberCols = rsmd.getColumnCount();\n            for (int i=1; i<=numberCols; i++)\n            {\n                //print Column Names\n                System.out.print(rsmd.getColumnLabel(i)+\"\\t\\t\");  \n            }\n\n            System.out.println(\"\\n-------------------------------------------------\");\n\n            while(results.next())\n            {\n                int id = results.getInt(1);\n                String restName = results.getString(2);\n                String cityName = results.getString(3);\n                System.out.println(id + \"\\t\\t\" + restName + \"\\t\\t\" + cityName);\n            }\n            results.close();\n            stmt.close();\n        }\n        catch (SQLException sqlExcept)\n        {\n            sqlExcept.printStackTrace();\n        }\n    }\n    \n    private static void shutdown()\n    {\n        try\n        {\n            if (stmt != null)\n            {\n                stmt.close();\n            }\n            if (conn != null)\n            {\n                DriverManager.getConnection(dbURL + \";shutdown=true\");\n                conn.close();\n            }           \n        }\n        catch (SQLException sqlExcept)\n        {\n            \n        }\n\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "// variables\nprivate static String dbURL = \"jdbc:derby://localhost:1527/myDB;create=true;user=me;password=mine\";\n\n// from the createConnection method\nClass.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// variables\nprivate static String dbURL = \"jdbc:derby:myDB;create=true;user=me;password=mine\";\n\n// from the createConnection method\nClass.forName(\"org.apache.derby.jdbc.EmbeddedDriver\");\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://docs.microsoft.com/en-us/sql/connect/jdbc/connecting-to-sql-server-with-the-jdbc-driver", "url position": 16, "segments": [{"code": "System.setProperty(\"java.net.preferIPv6Addresses\", \"true\");  \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://docs.microsoft.com/en-us/azure/mysql/connect-java", "url position": 17, "segments": [{"code": "import java.sql.*;\nimport java.util.Properties;\n\npublic class CreateTableInsertRows {\n\n    public static void main (String[] args)  throws Exception\n    {\n        // Initialize connection variables. \n        String host = \"myserver4demo.mysql.database.azure.com\";\n        String database = \"quickstartdb\";\n        String user = \"myadmin@myserver4demo\";\n        String password = \"<server_admin_password>\";\n\n        // check that the driver is installed\n        try\n        {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n        }\n        catch (ClassNotFoundException e)\n        {\n            throw new ClassNotFoundException(\"MySQL JDBC driver NOT detected in library path.\", e);\n        }\n\n        System.out.println(\"MySQL JDBC driver detected in library path.\");\n\n        Connection connection = null;\n\n        // Initialize connection object\n        try\n        {\n            String url = String.format(\"jdbc:mysql://%s/%s\", host, database);\n\n            // Set connection properties.\n            Properties properties = new Properties();\n            properties.setProperty(\"user\", user);\n            properties.setProperty(\"password\", password);\n            properties.setProperty(\"useSSL\", \"true\");\n            properties.setProperty(\"verifyServerCertificate\", \"true\");\n            properties.setProperty(\"requireSSL\", \"false\");\n\n            // get connection\n            connection = DriverManager.getConnection(url, properties);\n        }\n        catch (SQLException e)\n        {\n            throw new SQLException(\"Failed to create connection to database.\", e);\n        }\n        if (connection != null) \n        { \n            System.out.println(\"Successfully created connection to database.\");\n\n            // Perform some SQL queries over the connection.\n            try\n            {\n                // Drop previous table of same name if one exists.\n                Statement statement = connection.createStatement();\n                statement.execute(\"DROP TABLE IF EXISTS inventory;\");\n                System.out.println(\"Finished dropping table (if existed).\");\n\n                // Create table.\n                statement.execute(\"CREATE TABLE inventory (id serial PRIMARY KEY, name VARCHAR(50), quantity INTEGER);\");\n                System.out.println(\"Created table.\");\n\n                // Insert some data into table.\n                int nRowsInserted = 0;\n                PreparedStatement preparedStatement = connection.prepareStatement(\"INSERT INTO inventory (name, quantity) VALUES (?, ?);\");\n                preparedStatement.setString(1, \"banana\");\n                preparedStatement.setInt(2, 150);\n                nRowsInserted += preparedStatement.executeUpdate();\n\n                preparedStatement.setString(1, \"orange\");\n                preparedStatement.setInt(2, 154);\n                nRowsInserted += preparedStatement.executeUpdate();\n\n                preparedStatement.setString(1, \"apple\");\n                preparedStatement.setInt(2, 100);\n                nRowsInserted += preparedStatement.executeUpdate();\n                System.out.println(String.format(\"Inserted %d row(s) of data.\", nRowsInserted));\n\n                // NOTE No need to commit all changes to database, as auto-commit is enabled by default.\n\n            }\n            catch (SQLException e)\n            {\n                throw new SQLException(\"Encountered an error when executing given sql statement.\", e);\n            }       \n        }\n        else {\n            System.out.println(\"Failed to create connection to database.\");\n        }\n        System.out.println(\"Execution finished.\");\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.sql.*;\nimport java.util.Properties;\n\npublic class ReadTable {\n\n    public static void main (String[] args)  throws Exception\n    {\n        // Initialize connection variables.\n        String host = \"myserver4demo.mysql.database.azure.com\";\n        String database = \"quickstartdb\";\n        String user = \"myadmin@myserver4demo\";\n        String password = \"<server_admin_password>\";\n\n        // check that the driver is installed\n        try\n        {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n        }\n        catch (ClassNotFoundException e)\n        {\n            throw new ClassNotFoundException(\"MySQL JDBC driver NOT detected in library path.\", e);\n        }\n\n        System.out.println(\"MySQL JDBC driver detected in library path.\");\n\n        Connection connection = null;\n\n        // Initialize connection object\n        try\n        {\n            String url = String.format(\"jdbc:mysql://%s/%s\", host, database);\n\n            // Set connection properties.\n            Properties properties = new Properties();\n            properties.setProperty(\"user\", user);\n            properties.setProperty(\"password\", password);\n            properties.setProperty(\"useSSL\", \"true\");\n            properties.setProperty(\"verifyServerCertificate\", \"true\");\n            properties.setProperty(\"requireSSL\", \"false\");\n\n            // get connection\n            connection = DriverManager.getConnection(url, properties);\n        }\n        catch (SQLException e)\n        {\n            throw new SQLException(\"Failed to create connection to database\", e);\n        }\n        if (connection != null) \n        { \n            System.out.println(\"Successfully created connection to database.\");\n\n            // Perform some SQL queries over the connection.\n            try\n            {\n\n                Statement statement = connection.createStatement();\n                ResultSet results = statement.executeQuery(\"SELECT * from inventory;\");\n                while (results.next())\n                {\n                    String outputString = \n                        String.format(\n                            \"Data row = (%s, %s, %s)\",\n                            results.getString(1),\n                            results.getString(2),\n                            results.getString(3));\n                    System.out.println(outputString);\n                }\n            }\n            catch (SQLException e)\n            {\n                throw new SQLException(\"Encountered an error when executing given sql statement\", e);\n            }       \n        }\n        else {\n            System.out.println(\"Failed to create connection to database.\"); \n        }\n        System.out.println(\"Execution finished.\");\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.sql.*;\nimport java.util.Properties;\n\npublic class UpdateTable {\n    public static void main (String[] args)  throws Exception\n    {\n        // Initialize connection variables. \n        String host = \"myserver4demo.mysql.database.azure.com\";\n        String database = \"quickstartdb\";\n        String user = \"myadmin@myserver4demo\";\n        String password = \"<server_admin_password>\";\n\n        // check that the driver is installed\n        try\n        {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n        }\n        catch (ClassNotFoundException e)\n        {\n            throw new ClassNotFoundException(\"MySQL JDBC driver NOT detected in library path.\", e);\n        }\n        System.out.println(\"MySQL JDBC driver detected in library path.\");\n\n        Connection connection = null;\n\n        // Initialize connection object\n        try\n        {\n            String url = String.format(\"jdbc:mysql://%s/%s\", host, database);\n\n            // set up the connection properties\n            Properties properties = new Properties();\n            properties.setProperty(\"user\", user);\n            properties.setProperty(\"password\", password);\n            properties.setProperty(\"useSSL\", \"true\");\n            properties.setProperty(\"verifyServerCertificate\", \"true\");\n            properties.setProperty(\"requireSSL\", \"false\");\n\n            // get connection\n            connection = DriverManager.getConnection(url, properties);\n        }\n        catch (SQLException e)\n        {\n            throw new SQLException(\"Failed to create connection to database.\", e);\n        }\n        if (connection != null) \n        { \n            System.out.println(\"Successfully created connection to database.\");\n\n            // Perform some SQL queries over the connection.\n            try\n            {\n                // Modify some data in table.\n                int nRowsUpdated = 0;\n                PreparedStatement preparedStatement = connection.prepareStatement(\"UPDATE inventory SET quantity = ? WHERE name = ?;\");\n                preparedStatement.setInt(1, 200);\n                preparedStatement.setString(2, \"banana\");\n                nRowsUpdated += preparedStatement.executeUpdate();\n                System.out.println(String.format(\"Updated %d row(s) of data.\", nRowsUpdated));\n\n                // NOTE No need to commit all changes to database, as auto-commit is enabled by default.\n            }\n            catch (SQLException e)\n            {\n                throw new SQLException(\"Encountered an error when executing given sql statement.\", e);\n            }       \n        }\n        else {\n            System.out.println(\"Failed to create connection to database.\");\n        }\n        System.out.println(\"Execution finished.\");\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.sql.*;\nimport java.util.Properties;\n\npublic class DeleteTable {\n    public static void main (String[] args)  throws Exception\n    {\n        // Initialize connection variables.\n        String host = \"myserver4demo.mysql.database.azure.com\";\n        String database = \"quickstartdb\";\n        String user = \"myadmin@myserver4demo\";\n        String password = \"<server_admin_password>\";\n\n        // check that the driver is installed\n        try\n        {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n        }\n        catch (ClassNotFoundException e)\n        {\n            throw new ClassNotFoundException(\"MySQL JDBC driver NOT detected in library path.\", e);\n        }\n\n        System.out.println(\"MySQL JDBC driver detected in library path.\");\n\n        Connection connection = null;\n\n        // Initialize connection object\n        try\n        {\n            String url = String.format(\"jdbc:mysql://%s/%s\", host, database);\n\n            // set up the connection properties\n            Properties properties = new Properties();\n            properties.setProperty(\"user\", user);\n            properties.setProperty(\"password\", password);\n            properties.setProperty(\"useSSL\", \"true\");\n            properties.setProperty(\"verifyServerCertificate\", \"true\");\n            properties.setProperty(\"requireSSL\", \"false\");\n\n            // get connection\n            connection = DriverManager.getConnection(url, properties);\n        }\n        catch (SQLException e)\n        {\n            throw new SQLException(\"Failed to create connection to database\", e);\n        }\n        if (connection != null) \n        { \n            System.out.println(\"Successfully created connection to database.\");\n\n            // Perform some SQL queries over the connection.\n            try\n            {\n                // Delete some data from table.\n                int nRowsDeleted = 0;\n                PreparedStatement preparedStatement = connection.prepareStatement(\"DELETE FROM inventory WHERE name = ?;\");\n                preparedStatement.setString(1, \"orange\");\n                nRowsDeleted += preparedStatement.executeUpdate();\n                System.out.println(String.format(\"Deleted %d row(s) of data.\", nRowsDeleted));\n\n                // NOTE No need to commit all changes to database, as auto-commit is enabled by default.\n            }\n            catch (SQLException e)\n            {\n                throw new SQLException(\"Encountered an error when executing given sql statement.\", e);\n            }       \n        }\n        else {\n            System.out.println(\"Failed to create connection to database.\");\n        }\n        System.out.println(\"Execution finished.\");\n    }\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://docs.microsoft.com/en-us/sql/connect/jdbc/connection-url-sample", "url position": 15, "segments": [{"code": "import java.sql.*;  \n\npublic class connectURL {  \n\n   public static void main(String[] args) {  \n\n      // Create a variable for the connection string.  \n      String connectionUrl = \"jdbc:sqlserver://localhost:1433;\" +  \n         \"databaseName=AdventureWorks;user=UserName;password=*****\";  \n\n      // Declare the JDBC objects.  \n      Connection con = null;  \n      Statement stmt = null;  \n      ResultSet rs = null;  \n\n      try {  \n         // Establish the connection.  \n         Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");  \n         con = DriverManager.getConnection(connectionUrl);  \n\n         // Create and execute an SQL statement that returns some data.  \n         String SQL = \"SELECT TOP 10 * FROM Person.Contact\";  \n         stmt = con.createStatement();  \n         rs = stmt.executeQuery(SQL);  \n\n         // Iterate through the data in the result set and display it.  \n         while (rs.next()) {  \n            System.out.println(rs.getString(4) + \" \" + rs.getString(6));  \n         }  \n      }  \n\n      // Handle any errors that may have occurred.  \n      catch (Exception e) {  \n         e.printStackTrace();  \n      }  \n      finally {  \n         if (rs != null) try { rs.close(); } catch(Exception e) {}  \n         if (stmt != null) try { stmt.close(); } catch(Exception e) {}  \n         if (con != null) try { con.close(); } catch(Exception e) {}  \n      }  \n   }  \n}  \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://docs.databricks.com/spark/latest/data-sources/sql-databases.html", "url position": 21, "segments": [{"code": "%sh nc -vz db_hostname db_port\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "//Class.forName(\"org.postgresql.Driver\")\nClass.forName(\"com.mysql.jdbc.Driver\")\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "import java.util.Properties\n\n// Option 1: Build the parameters into a JDBC url to pass into the DataFrame APIs\nval jdbcUsername = \"USER_NAME\"\nval jdbcPassword = \"PASSWORD\"\nval jdbcHostname = \"HOSTNAME\"\nval jdbcPort = 3306\nval jdbcDatabase =\"DATABASE\"\nval jdbcUrl = s\"jdbc:mysql://${jdbcHostname}:${jdbcPort}/${jdbcDatabase}?user=${jdbcUsername}&password=${jdbcPassword}\"\n\n// Option 2: Create a Properties() object to hold the parameters. You can create the JDBC URL without passing in the user/password parameters directly.\nval connectionProperties = new Properties()\nconnectionProperties.put(\"user\", \"USER_NAME\")\nconnectionProperties.put(\"password\", \"PASSWORD\")\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "import java.sql.DriverManager\nval connection = DriverManager.getConnection(jdbcUrl, jdbcUsername, jdbcPassword)\nconnection.isClosed()\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "val jdbc_url = s\"jdbc:mysql://${jdbcHostname}:${jdbcPort}/${jdbcDatabase}\"\nval employees_table = spark.read.jdbc(jdbc_url, \"employees\", connectionProperties)\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "employees_table.printSchema\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "display(employees_table.select(\"age\", \"salary\").groupBy(\"age\").avg(\"salary\"))\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "%sql -- quick test that this test table exists\nselect * from diamonds limit 5\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "// Create a dataframe from a Spark SQL Table\n// Reserved words in SQL (like \"table\") will trigger an exception if used as column names.\n// The solution is to rename the column prior to writing via jdbc\nval jdbc_url = s\"jdbc:mysql://${jdbcHostname}:${jdbcPort}/${jdbcDatabase}\"\nspark.table(\"diamonds\").withColumnRenamed(\"table\", \"table_number\")\n    .write\n    .jdbc(jdbc_url, \"diamonds_mysql\", connectionProperties)\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "import org.apache.spark.sql.SaveMode\n\nspark.sql(\"select * from diamonds limit 10\").withColumnRenamed(\"table\", \"table_number\")\n  .write\n  .mode(SaveMode.Append) // <--- Append to the existing table\n  .jdbc(jdbc_url, \"diamonds_mysql\", connectionProperties)\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "spark.table(\"diamonds\").withColumnRenamed(\"table\", \"table_number\")\n  .write\n  .mode(SaveMode.Overwrite) // <--- Append to the existing table\n  .jdbc(jdbc_url, \"diamonds_mysql\", connectionProperties)\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "// Note: The parantheses are necessary.\nval pushdown_query = \"(select * from employees where emp_no < 10008) emp_alias\"\nval df = spark.read.jdbc(url=jdbcUrl, dbtable=pushdown_query, properties=connectionProperties)\ndisplay(df)\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "val df = (spark.read.jdbc(url=jdbcUrl,\n    table=\"employees\",\n    columnName=\"emp_no\",\n    lowerBound=1L,\n    upperBound=100000L,\n    numPartitions=100,\n    connectionProperties=connectionProperties))\ndisplay(df)\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "import org.apache.spark.sql.SaveMode\n\nval df = spark.table(\"diamonds\")\nprintln(df.rdd.partitions.length)\n\n// given the number of partitions above, users can reduce the partition value by calling coalesce() or increase it by calling repartition() to manage the number of connections.\ndf.repartition(10).write.mode(SaveMode.Append).jdbc(jdbcUrl, \"diamonds_mysql\", connectionProperties)\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "# setting up the jdbc url and parameters\nhostname = \"example.databricks.rds.amazonaws.com\"\ndbname = \"employees\"\njdbcPort = 3306\n\njdbcUrl = \"jdbc:mysql://{0}:{1}/{2}?user={3}&password={4}\".format(hostname, jdbcPort, dbname, username, password)\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "jdbc_url = \"jdbc:mysql://{0}:{1}/{2}\".format(hostname, jdbcPort, dbname)\n# For SQLServer, pass in the \"driver\" option\n# driverClass = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n# Add \"driver\" : driverClass\nconnectionProperties = {\n  \"user\" : username,\n  \"password\" : password\n}\n\npushdown_query = \"(select * from employees where emp_no < 10008) emp_alias\"\ndf = spark.read.jdbc(url=jdbc_url, dbtable=pushdown_query, properties=connectionProperties)\ndisplay(df)\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "df = spark.read.\\\n      jdbc(url=jdbcUrl, \\\n              table='employees',\\\n              column='emp_no',\\\n              lowerBound=1,\\\n              upperBound=100000, \\\n              numPartitions=100)\ndisplay(df)\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "// Testing for the JDBC Driver Class\nClass.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\n\n// Define the credentials and parameters\nval (user, passwd) = get_sqlserver_creds\nval hostname = \"example.databricks.sqlserver.com\"\nval dbName = \"mydb\"\nval jdbcPort = 1433\n\nval jdbcUrl = (s\"jdbc:sqlserver://${hostname}:${jdbcPort};database=${dbName};user=${user};password=${passwd}\")\n\nval driverClass = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\nval connectionProperties = new java.util.Properties()\nconnectionProperties.setProperty(\"Driver\",driverClass)\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// Explain plan with no column selection returns all columns\nspark.read.jdbc(jdbcUrl, \"diamonds_mysql\", connectionProperties).explain(true)\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "// Explain plan with column selection will prune columns and just return the ones specified\n// Notice that only the 3 specified columns are in the explain plan\nspark.read.jdbc(jdbcUrl, \"diamonds_mysql\", connectionProperties).select(\"carat\", \"cut\", \"price\").explain(true)\n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "// You can push query predicates down too\n// Notice the Filter at the top of the Physical Plan\nspark.read.jdbc(jdbcUrl, \"diamonds_mysql\", connectionProperties).select(\"carat\", \"cut\", \"price\").where(\"cut = 'Good'\").explain(true)\n", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "CREATE TABLE jdbcTable\nUSING org.apache.spark.sql.jdbc\nOPTIONS (\n  url \"jdbc:mysql://jdbcHostname:jdbcPort\",\n  dbtable \"database.tablename\",\n  user 'username',\n  password 'password'\n)\n", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "%sql\nINSERT INTO diamonds_mysql\nSELECT * FROM diamonds LIMIT 10 -- append 10 records to the table\n", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "%sql\nSELECT count(*) record_count FROM diamonds_mysql --count increased by 10\n", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "%sql\nINSERT OVERWRITE TABLE diamonds_mysql\nSELECT carat, cut, color, clarity, depth, TABLE AS table_number, price, x, y, z FROM diamonds\n", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "%sql\nSELECT count(*) record_count FROM diamonds_mysql --count returned to original value (10 less)\n", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://en.wikipedia.org/wiki/Java_Database_Connectivity", "url position": 25, "segments": [{"code": "\nConnection conn = DriverManager.getConnection(\n     \"jdbc:somejdbcvendor:other data needed by some jdbc vendor\",\n     \"myLogin\",\n     \"myPassword\" );\ntry {\n     /* you use the connection here */\n} finally {\n    //It's important to close the connection when you are done with it\n    try { conn.close(); } catch (Throwable e) { /* Propagate the original exception\ninstead of this one that you want just logged */ logger.warn(\"Could not close JDBC Connection\",e); }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ntry (Connection conn = DriverManager.getConnection(\n     \"jdbc:somejdbcvendor:other data needed by some jdbc vendor\",\n     \"myLogin\",\n     \"myPassword\" ) ) {\n     /* you use the connection here */\n}  // the VM will take care of closing the connection\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\ntry (Statement stmt = conn.createStatement()) {\n    stmt.executeUpdate( \"INSERT INTO MyTable( name ) VALUES ( 'my name' ) \" );\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ntry (Statement stmt = conn.createStatement();\n    ResultSet rs = stmt.executeQuery( \"SELECT * FROM MyTable\" )\n) {\n    while ( rs.next() ) {\n        int numColumns = rs.getMetaData().getColumnCount();\n        for ( int i = 1 ; i <= numColumns ; i++ ) {\n           // Column numbers start at 1.\n           // Also there are many methods on the result set to return\n           //  the column as a particular type. Refer to the Sun documentation\n           //  for the list of valid conversions.\n           System.out.println( \"COLUMN \" + i + \" = \" + rs.getObject(i) );\n        }\n    }\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ntry (PreparedStatement ps =\n    conn.prepareStatement( \"SELECT i.*, j.* FROM Omega i, Zappa j WHERE i.name = ? AND j.num = ?\" )\n){\n    // In the SQL statement being prepared, each question mark is a placeholder\n    // that must be replaced with a value you provide through a \"set\" method invocation.\n    // The following two method calls replace the two placeholders; the first is\n    // replaced by a string value, and the second by an integer value.\n    ps.setString(1, \"Poor Yorick\");\n    ps.setInt(2, 8008);\n\n    // The ResultSet, rs, conveys the result of executing the SQL statement.\n    // Each time you call rs.next(), an internal row pointer, or cursor,\n    // is advanced to the next row of the result.  The cursor initially is\n    // positioned before the first row.\n    try (ResultSet rs = ps.executeQuery()) {\n        while ( rs.next() ) {\n            int numColumns = rs.getMetaData().getColumnCount();\n            for ( int i = 1 ; i <= numColumns ; i++ ) {\n                // Column numbers start at 1.\n                // Also there are many methods on the result set to return\n                // the column as a particular type. Refer to the Sun documentation\n                // for the list of valid conversions.\n                System.out.println( \"COLUMN \" + i + \" = \" + rs.getObject(i) );\n            } // for\n        } // while\n    } // try\n} // try\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nboolean autoCommitDefault = conn.getAutoCommit();\ntry {\n    conn.setAutoCommit(false);\n\n    /* You execute statements against conn here transactionally */\n\n    conn.commit();\n} catch (Throwable e) {\n    try { conn.rollback(); } catch (Throwable e) { logger.warn(\"Could not rollback transaction\",e); }\n    throw e;\n} finally {\n    try { conn.setAutoCommit(autoCommitDefault); } catch (Throwable e) { logger.warn(\"Could not restore AutoCommit setting\",e); }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.Statement;\n\npublic class Mydb1 {\n   static String URL = \"jdbc:mysql://localhost/mydb\";\n\n   public static void main(String[] args) {\n      try{\n        Class.forName(\"com.mysql.jdbc.Driver\");\n\n        Connection conn = DriverManager.getConnection(URL,\"root\",\"root\");\n        Statement stmt = conn.createStatement();\n      \n        String sql = \"INSERT INTO emp1 VALUES ('pctb5361','gajanan','krpuram',968666668)\";\n        stmt.executeUpdate(sql);\n           \n        System.out.println(\"Inserted records into the table...\");\n      } catch (Exception e) {\n         e.printStackTrace();\n      }\n   }\n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_72/rzaha/rzahajdbcdriver.htm", "url position": 24, "segments": []},
{"query": "How to connect to a JDBC database", "url": "https://www.udemy.com/how-to-connect-java-jdbc-to-mysql/", "url position": 18, "segments": []},
{"query": "How to connect to a JDBC database", "url": "https://jdbc.postgresql.org/documentation/80/connect.html", "url position": 14, "segments": [{"code": "\njdbc:postgresql:database\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\njdbc:postgresql://host/database\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\njdbc:postgresql://host:port/database\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\njdbc:postgresql://[::1]:5740/accounting\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nConnection db = DriverManager.getConnection(url, username, password);\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nString url = \"jdbc:postgresql://localhost/test\";\nProperties props = new Properties();\nprops.setProperty(\"user\",\"fred\");\nprops.setProperty(\"password\",\"secret\");\nprops.setProperty(\"ssl\",\"true\");\nConnection conn = DriverManager.getConnection(url, props);\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nString url = \"jdbc:postgresql://localhost/test?user=fred&password=secret&ssl=true\";\nConnection conn = DriverManager.getConnection(url);\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "http://www.java2novice.com/jdbc/create-connection/", "url position": 23, "segments": [{"code": "package com.java2novice.jdbc;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class JdbcConnection {\n\n\tpublic static void main(String a[]){\n\t\t\n\t\ttry {\n\t\t\tClass.forName(\"oracle.jdbc.driver.OracleDriver\");\n\t\t\tConnection con = DriverManager.\n\t\t\t\tgetConnection(\"jdbc:oracle:thin:@<hostname>:<port num>:<DB name>\"\n\t\t\t\t\t,\"user\",\"password\");\n\t\t\tStatement stmt = con.createStatement();\n\t\t\tSystem.out.println(\"Created DB Connection....\");\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-usagenotes-connect-drivermanager.html", "url position": 13, "segments": [{"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\n// Notice, do not import com.mysql.jdbc.*\n// or you will have problems!\n\npublic class LoadDriver {\n    public static void main(String[] args) {\n        try {\n            // The newInstance() call is a work around for some\n            // broken Java implementations\n\n            Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n        } catch (Exception ex) {\n            // handle the error\n        }\n    }\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\nConnection conn = null;\n...\ntry {\n    conn =\n       DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n                                   \"user=minty&password=greatsqldb\");\n\n    // Do something with the Connection\n\n   ...\n} catch (SQLException ex) {\n    // handle any errors\n    System.out.println(\"SQLException: \" + ex.getMessage());\n    System.out.println(\"SQLState: \" + ex.getSQLState());\n    System.out.println(\"VendorError: \" + ex.getErrorCode());\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://medium.com/modernnerd-code/connecting-to-mysql-db-on-aws-ec2-with-jdbc-for-java-91dba3003abb", "url position": 26, "segments": [{"code": "public static void connectJDBCToAWSEC2() {    System.out.println(\"----MySQL JDBC Connection Testing -------\");        try {        Class.forName(\"com.mysql.jdbc.Driver\");    } catch (ClassNotFoundException e) {        System.out.println(\"Where is your MySQL JDBC Driver?\");        e.printStackTrace();        return;    }    System.out.println(\"MySQL JDBC Driver Registered!\");    Connection connection = null;    try {        connection = DriverManager.                getConnection(\"jdbc:mysql://\" + PUBLIC_DNS + \":\" + PORT + \"/\" + DATABASE, REMOTE_DATABASE_USERNAME, DATABASE_USER_PASSWORD);    } catch (SQLException e) {        System.out.println(\"Connection Failed!:\\n\" + e.getMessage());    }    if (connection != null) {        System.out.println(\"SUCCESS!!!! You made it, take control     your database now!\");    } else {        System.out.println(\"FAILURE! Failed to make connection!\");    }}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "GRANT ALL PRIVILEGES ON dbTest.* To 'remoteu'@'%' IDENTIFIED BY 'password';", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "locate my.cnfwhereis my.cnffind . -name my.cnf", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "ubuntu@ip-xxx-xx-xx-xx:~$ locate my.cnf", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "sudoedit /etc/mysql/my.cnf", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "ubuntu@ip-xxx-xx-xx-xx:~$ sudoedit /etc/mysql/my.cnf", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "sudo service mysql restart", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "ubuntu@ip-xxx-xx-xx-xx:~$ sudo service mysql restart", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "public static void connectJDBCToAWSEC2() {    System.out.println(\"----MySQL JDBC Connection Testing -------\");        try {        Class.forName(\"com.mysql.jdbc.Driver\");    } catch (ClassNotFoundException e) {        System.out.println(\"Where is your MySQL JDBC Driver?\");        e.printStackTrace();        return;    }    System.out.println(\"MySQL JDBC Driver Registered!\");    Connection connection = null;    try {        connection = DriverManager.                getConnection(\"jdbc:mysql://\" + PUBLIC_DNS + \":3306/dbTest\", \"remoteu\", \"password\");    } catch (SQLException e) {        System.out.println(\"Connection Failed!:\\n\" + e.getMessage());    }    if (connection != null) {        System.out.println(\"SUCCESS!!!! You made it, take control     your database now!\");    } else {        System.out.println(\"FAILURE! Failed to make connection!\");    }}", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private static void runTestQuery(Connection conn) {    Statement statement = null;    try {        System.out.println(\"Creating statement...\");        statement = conn.createStatement();        String sql;        sql = \"SELECT * FROM user\";        ResultSet rs = statement.executeQuery(sql);        //STEP 5: Extract data from result set        while (rs.next()) {            //Retrieve by column name            int id = rs.getInt(\"id\");            String email = rs.getString(\"email\");            //Display values            System.out.print(\"ID: \" + id);            System.out.print(\", Email: \" + email);        }        //STEP 6: Clean-up environment        rs.close();        statement.close();        conn.close();    } catch (SQLException se) {        //Handle errors for JDBC        se.printStackTrace();    } catch (Exception e) {        //Handle errors for Class.forName        e.printStackTrace();    } finally {        //finally block used to close resources        try {            if (statement != null)                statement.close();        } catch (SQLException se2) {        }// nothing we can do        try {            if (conn != null)                conn.close();        } catch (SQLException se) {            se.printStackTrace();        }//end finally try    }//end try}", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "http://www.sqlitetutorial.net/sqlite-java/sqlite-jdbc-driver/", "url position": 20, "segments": [{"code": "jdbc:sqlite:sqlite_database_file_path", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:sqlite:sample.db", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:sqlite:C:/sqlite/db/chinook.db", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:sqlite::memory", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "package net.sqlitetutorial;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;/** * * @author sqlitetutorial.net */public class SQLiteJDBCDriverConnection { /** * Connect to a sample database */public static void connect() {Connection conn = null;try {// db parametersString url = \"jdbc:sqlite:C:/sqlite/db/chinook.db\";// create a connection to the databaseconn = DriverManager.getConnection(url);System.out.println(\"Connection to SQLite has been established.\");} catch (SQLException e) {System.out.println(e.getMessage());} finally {try {if (conn != null) {conn.close();}} catch (SQLException ex) {System.out.println(ex.getMessage());}}}/** * @param args the command line arguments */public static void main(String[] args) {connect();}}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection to SQLite has been established.", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "http://www.informit.com/articles/article.aspx?p=26251&seqNum=3", "url position": 10, "segments": [{"code": "import java.sql.*;", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import oracle.jdbc.driver.*;\rimport oracle.sql.*;", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "Class.forName(\"oracle.jdbc.driver.OracleDriver\");", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "Connection conn = DriverManager.getConnection(URL, username, passwd);\rConnection conn = DriverManager.getConnection(URL);", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection conn = DriverManager.getConnection(\"jdbc:oracle:oci8:\r@oracle.world\", \"oratest\", \"oratest\");", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection conn = DriverManager.getConnection\r                 (\"jdbc:oracle:thin:@training:1521:Oracle\",\r \"oratest\", \"oratest\");", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Connection conn = DriverManager.getConnection\r           (\"jdbc:oracle:thin@(description=(address=\r           (host=training)(protocol=tcp)(port=1521))\r           (connect_data=(sid=Oracle))) \", _\"oratest\", \"oratest\");", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Statement sql_stmt = conn.createStatement();", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "ResultSet rset = sql_stmt.executeQuery\r      (\"SELECT empno, ename, sal, deptno FROM emp ORDER BY ename\");", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String sql = \"SELECT empno, ename, sal, deptno FROM emp ORDER BY ename\";\rResultSet rset = sql_stmt.executeQuery(sql);", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String str;\rwhile (rset.next())\r {\r str = rset.getInt(1)+ \" \"+ rset.getString(2)+ \" \r         \"+rset.getFloat(3)+ \" \"rset.getInt(4)+ \"\\n\";\r }\rbyte buf[] = str.getBytes();\rOutputStream fp = new FileOutputStream(\"query1.lst\");\rfp.write(buf);\rfp.close();", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "rset.close();\rsql_stmt.close();", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "conn.close();", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "//Import JDBC package\rimport java.sql.*;\r// Import Java package for File I/O\rimport java.io.*;\rpublic class QueryExample {\r public static void main (String[] args) throws SQLException, IOException \r{\r  //Load and register Oracle driver\r  DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\r //Establish a connection\r Connection conn =  DriverManager.getConnection(\"jdbc:oracle:thin:\r @training:1521:Oracle\", \"oratest\", \"oratest\");\r //Create a Statement object\r Statement sql_stmt = conn.createStatement();\r //Create a ResultSet object, execute the query and return a\r // resultset\r ResultSet rset = sql_stmt.executeQuery(\"SELECT empno, ename, sal, \r deptno FROM emp ORDER BY ename\");\r //Process the resultset, retrieve data in each row, column by column \r //and write to an operating system file\rString str = \"\";\rwhile (rset.next())\r {\r str += rset.getInt(1)+\" \"+ rset.getString(2)+\" \"+\r rset.getFloat(3)+\" \"+rset.getInt(4)+\"\\n\";\r }\r byte buf[] = str.getBytes();\rOutputStream fp = new FileOutputStream(\"query1.lst\");\rfp.write(buf);\rfp.close();\r//Close the ResultSet and Statement\r rset.close();\r sql_stmt.close();\r //Close the database connection\r conn.close();\r }\r}", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "if (rset.next()) \r // Process the row returned\relse\r System.out.println(\"The Employee with Empno \"+ args[1] + \r                    \"does not exist\");", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "throws SQLException", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "try { <JDBC code> }\rcatch (SQLException e) { System.out.println(\"ERR: \"+ e.getMessage())}", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "//Import JDBC package\rimport java.sql.*;\r// Import Java package for File I/O\rimport java.io.*;\rpublic class QueryExample {\r public static void main (String[] args) {\r int ret_code;\r try {\r  //Load and register Oracle driver\r  DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());\r //Establish a connection\r Connection conn =  DriverManager.getConnection(\"jdbc:oracle:thin:\r @training:1521:Oracle\", \"oratest\", \"oratest\");\r //Create a Statement object\r Statement sql_stmt = conn.createStatement();\r //Create a ResultSet object, execute the query and return a\r // resultset\r ResultSet rset = sql_stmt.executeQuery(\"SELECT empno, ename, sal, \r deptno FROM emp ORDER BY ename\");\r //Process the resultset, retrieve data in each row, column by column\r // and write to an operating system file\rString str = \"\";\rwhile (rset.next())\r {\r str += rset.getInt(1)+\" \"+ rset.getString(2)+\" \"+rset.getFloat(3)+\r \" \"+rset.getInt(4)+\"\\n\";\r }\r byte buf[] = str.getBytes();\rOutputStream fp = new FileOutputStream(\"query1.lst\");\rfp.write(buf);\rfp.close();\r//Close the ResultSet and Statement\r rset.close();\r sql_stmt.close();\r //Close the database connection\r conn.close();\r} catch (SQLException e) {ret_code = e.getErrorCode(); \r System.err.println(\"Oracle Error: \"+ ret_code + e.getMessage());}\r catch (IOException e) {System.out.println(\"Java Error: \"+ \r e.getMessage()); }\r }\r}", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "catch (SQLException e) { e.printStackTrace(); }", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.javatpoint.com/steps-to-connect-to-the-database-in-java", "url position": 3, "segments": []},
{"query": "How to connect to a JDBC database", "url": "https://www.geeksforgeeks.org/establishing-jdbc-connection-in-java/", "url position": 27, "segments": [{"code": " Class.forName(oracle.jdbc.driver.OracleDriver);", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": " DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver())", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": " Connection con = DriverManager.getConnection(url,user,password)", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "String url =  jdbc:oracle:thin:@localhost:1521:xe", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "Statement st = con.createStatement();", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "int m = st.executeUpdate(sql);\r\nif (m==1)\r\n    System.out.println(\"inserted successfully : \"+sql);\r\nelse\r\n    System.out.println(\"insertion failed\");", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": " con.close();", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nimportjava.sql.*;\r\nimportjava.util.*;\r\nclass Main\r\n{\r\n    public static void main(String a[])\r\n    {\r\n        //Creating the connection\r\n        String url = \"jdbc:oracle:thin:@localhost:1521:xe\";\r\n        String user = \"system\";\r\n        String pass = \"12345\";\r\n\r\n        //Entering the data\r\n        Scanner k = new Scanner(System.in);\r\n        System.out.println(\"enter name\");\r\n        String name = k.next();\r\n        System.out.println(\"enter roll no\");\r\n        int roll = k.nextInt();\r\n        System.out.println(\"enter class\");\r\n        String cls =  k.next();\r\n\r\n        //Inserting data using SQL query\r\n        String sql = \"insert into student1 values('\"+name+\"',\"+roll+\",'\"+cls+\"')\";\r\n        Connection con=null;\r\n        try\r\n        {\r\n            DriverManager.registerDriver(new oracle.jdbc.OracleDriver());\r\n\r\n            //Reference to connection interface\r\n            con = DriverManager.getConnection(url,user,pass);\r\n\r\n            Statement st = con.createStatement();\r\n            int m = st.executeUpdate(sql);\r\n            if (m == 1)\r\n                System.out.println(\"inserted successfully : \"+sql);\r\n            else\r\n                System.out.println(\"insertion failed\");\r\n            con.close();\r\n        }\r\n        catch(Exception ex)\r\n        {\r\n            System.err.println(ex);\r\n        }\r\n    }\r\n}\r\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://devcenter.heroku.com/articles/connecting-to-relational-databases-on-heroku-with-java", "url position": 29, "segments": [{"code": "$ heroku info\n=== sparkling-wine-2003\nWeb URL:        http://sparkling-wine-2003.herokuapp.com/\nGit Repo:       git@heroku.com:sparkling-wine-2003.git\nRepo size:      21M\nSlug size:      916k\nStack:          cedar-14\nData size:      (empty)\nAddons:         Heroku Postgresql Dev\nOwner:          jesper@heroku.com\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "$ heroku addons:create heroku-postgresql\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "[database type]://[username]:[password]@[host]:[port]/[database name]\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "postgres://foo:foo@heroku.com:5432/hellodb\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "$ heroku config\nDATABASE_URL            => postgres://foo:foo@heroku.com:5432/hellodb\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "$ heroku run echo \\$JDBC_DATABASE_URL\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "spring:\n  datasource:\n    url: ${JDBC_DATABASE_URL}\n    username: ${JDBC_DATABASE_USERNAME}\n    password: ${JDBC_DATABASE_PASSWORD}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "db.default=${DATABASE_URL}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "slick.dbs.default.driver=\"slick.driver.PostgresDriver$\"\nslick.dbs.default.db.dataSourceClass = \"slick.jdbc.DatabaseUrlDataSource\"\nslick.dbs.default.db.properties.driver = \"org.postgresql.Driver\"\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "private static Connection getConnection() throws URISyntaxException, SQLException {\n    String dbUrl = System.getenv(\"JDBC_DATABASE_URL\");\n    return DriverManager.getConnection(dbUrl);\n}\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private static Connection getConnection() throws URISyntaxException, SQLException {\n    URI dbUri = new URI(System.getenv(\"DATABASE_URL\"));\n\n    String username = dbUri.getUserInfo().split(\":\")[0];\n    String password = dbUri.getUserInfo().split(\":\")[1];\n    String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + ':' + dbUri.getPort() + dbUri.getPath();\n\n    return DriverManager.getConnection(dbUrl, username, password);\n}\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "postgres://<username>:<password>@<host>:<port>/<dbname>\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:postgresql://<host>:<port>/<dbname>?user=<username>&password=<password>\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<bean class=\"java.net.URI\" id=\"dbUrl\">\n    <constructor-arg value=\"#{systemEnvironment['DATABASE_URL']}\"/>\n</bean>\n\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\">\n    <property name=\"url\" value=\"#{ 'jdbc:postgresql://' + @dbUrl.getHost() + ':' + @dbUrl.getPort() + @dbUrl.getPath() }\"/>\n    <property name=\"username\" value=\"#{ @dbUrl.getUserInfo().split(':')[0] }\"/>\n    <property name=\"password\" value=\"#{ @dbUrl.getUserInfo().split(':')[1] }\"/>\n</bean>\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "@Configuration\npublic class MainConfig {\n\n    @Bean\n    public BasicDataSource dataSource() throws URISyntaxException {\n        String dbUrl = System.getenv(\"JDBC_DATABASE_URL\");\n        String username = System.getenv(\"JDBC_DATABASE_USERNAME\");\n        String password = System.getenv(\"JDBC_DATABASE_PASSWORD\");\n\n        BasicDataSource basicDataSource = new BasicDataSource();\n        basicDataSource.setUrl(dbUrl);\n        basicDataSource.setUsername(username);\n        basicDataSource.setPassword(password);\n\n        return basicDataSource;\n    }\n}\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "@Configuration\npublic class MainConfig {\n\n    @Bean\n    public BasicDataSource dataSource() throws URISyntaxException {\n        URI dbUri = new URI(System.getenv(\"DATABASE_URL\"));\n\n        String username = dbUri.getUserInfo().split(\":\")[0];\n        String password = dbUri.getUserInfo().split(\":\")[1];\n        String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + ':' + dbUri.getPort() + dbUri.getPath();\n\n        BasicDataSource basicDataSource = new BasicDataSource();\n        basicDataSource.setUrl(dbUrl);\n        basicDataSource.setUsername(username);\n        basicDataSource.setPassword(password);\n\n        return basicDataSource;\n    }\n}\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Map<String,String> jdbcUrlSettings = new HashMap<>();\nString jdbcDbUrl = System.getenv(\"JDBC_DATABASE_URL\");\nif (null != jdbcDbUrl) {\n  jdbcUrlSettings.put(\"hibernate.connection.url\", System.getenv(\"JDBC_DATABASE_URL\"));\n}\n\nregistry = new StandardServiceRegistryBuilder().\n    configure(\"hibernate.cfg.xml\").\n    applySettings(jdbcUrlSettings).\n    build();\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "sslmode=require\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:postgresql://<host>:<port>/<dbname>?sslmode=require&user=<username>&password=<password>\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "git clone git://github.com/heroku/devcenter-java-database.git\n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "mvn package\n", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "export DATABASE_URL=postgres://foo:foo@localhost/hellodb\n", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "set DATABASE_URL=postgres://foo:foo@localhost/hellodb\n", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "sh devcenter-java-database-plain-jdbc/target/bin/main\nsh devcenter-java-database-spring-xml/target/bin/main\nsh devcenter-java-database-spring-java/target/bin/main\n", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "devcenter-java-database-plain-jdbc/target/bin/main.bat\ndevcenter-java-database-spring-xml/target/bin/main.bat\ndevcenter-java-database-spring-java/target/bin/main.bat\n", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Read from DB: 2011-11-23 11:37:03.886016\n", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "$ heroku create\nCreating stark-sword-398... done, stack is cedar-14\nhttp://stark-sword-398.herokuapp.com/ | git@heroku.com:stark-sword-398.git\nGit remote heroku added\n", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "$ git push heroku master\nCounting objects: 70, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (21/21), done.\nWriting objects: 100% (70/70), 8.71 KiB, done.\nTotal 70 (delta 14), reused 70 (delta 14)\n\n-----> Heroku receiving push\n-----> Java app detected\n-----> Installing Maven 3.0.3..... done\n-----> executing /app/tmp/repo.git/.cache/.maven/bin/mvn -B -Duser.home=/tmp/build_2y7ju7daa9t04 -Dmaven.repo.local=/app/tmp/repo.git/.cache/.m2/repository -DskipTests=true clean install\n   [INFO] Scanning for projects...\n   [INFO] ------------------------------------------------------------------------\n   [INFO] Reactor Build Order:\n   [INFO]\n   [INFO] devcenter-java-database-plain-jdbc\n   [INFO] devcenter-java-database-spring-xml\n   [INFO] devcenter-java-database-spring-java\n   [INFO] devcenter-java-database\n   [INFO]\n   [INFO] ------------------------------------------------------------------------\n   [INFO] Building devcenter-java-database-plain-jdbc 1.0-SNAPSHOT\n   [INFO] ------------------------------------------------------------------------\n   Downloading: http://s3pository.heroku.com/jvm/postgresql/postgresql/9.0-801.jdbc4/postgresql-9.0-801.jdbc4.pom\n...\n", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "$ heroku run \"sh devcenter-java-database-plain-jdbc/target/bin/main\"\nRunning sh devcenter-java-database-plain-jdbc/target/bin/main attached to terminal... up, run.1\nRead from DB: 2011-11-29 20:36:25.001468\n", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://www.mathworks.com/help/database/ug/mysql-jdbc-windows.html?requestedDomain=true", "url position": 32, "segments": [{"code": "conn = database('dbname','username','pwd', ...\n    'Vendor','MySQL', ...\n    'Server','sname');", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "close(conn)", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://www.ntu.edu.sg/home/ehchua/programming/java/JDBC_Basic2.html", "url position": 22, "segments": [{"code": "\r\n// Syntax\r\nConnection conn = DriverManager.getConnection(\"jdbc:odbc:{odbc-name}\");\r\n// Example\r\nConnection conn = DriverManager.getConnection(\"jdbc:odbc:ebookshopODBC\");", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nClass.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); // for MS Access/Excel", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\n> set DERBY_HOME=%JAVA_HOME%\\db\r\n> set PATH=%DERBY_HOME%\\bin;%PATH%\r\n> cd %DERBY_HOME%\\bin\r\n> sysinfo   // Display the Derby version and Java environment\r\n> ij        // Run scripts or interactive queries\r\n> dblook    // Dump all or part of database", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n> cd {path-to-derby-work-directory}\r\n// Start interactive client\r\n> ij\r\n// Create a new database (schema) called firstdb\r\nij> connect 'jdbc:derby:firstdb;create=true';\r\n// Create a new table called firsttable\r\nij> create table firsttable (id int primary key, name varchar(20));\r\n// Insert records\r\nij> insert into firstable values (10,'TEN'),(20,'TWENTY'),(30,'THIRTY');\r\n// Select records\r\nij> select * from firsttable;\r\n// Run a script of SQL commands\r\nij> run 'script-name.sql';\r\n// Exit ij\r\nij> exit", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n> cd {path-to-Derby-work-directory}\r\n> java -jar \"%DERBY_HOME%\\lib\\derbyrun.jar\" server start\r\nTue Oct 16 23:08:01 SGT 2012 : Security manager installed using the Basic server security policy.\r\nTue Oct 16 23:08:02 SGT 2012 : Apache Derby Network Server - 10.8.2.2 - (1181258) started \r\nand ready to accept connections on port 1527", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\n> ij\r\n// Connect to the Derby network server and create a new database called seconddb\r\nij> connect 'jdbc:derby://localhost:1527/seconddb;create=true';\r\n// CREATE TABLE, INSERT, SELECT ...\r\nij> ......\r\nij> exit", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n> java -jar \"%DERBY_HOME%\\lib\\derbyrun.jar\" server shutdown", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n43", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\nimport java.sql.*;\r\n \r\npublic class DerbyTest {  // JDK 7 and above\r\n   public static void main(String[] args) {\r\n      try (\r\n         // Step 1: Allocate a database \"Connection\" object\r\n         Connection conn = DriverManager.getConnection(\r\n               \"jdbc:derby:test_db;create=true\");\r\n \r\n         // Step 2: Allocate a \"Statement\" object in the Connection\r\n         Statement stmt = conn.createStatement();\r\n      ) {\r\n         // Step 3 & 4: Execute a SQL UPDATE via executeUpdate()\r\n         //   which returns an int indicating the number of rows affected.\r\n         // Increase the price by 7% and qty by 1 for id=1001\r\n         int returnCode;\r\n         returnCode = stmt.executeUpdate(\r\n               \"create table test_table (id int primary key, name varchar(20))\");\r\n         System.out.println(returnCode + \" records affected.\");\r\n \r\n         returnCode = stmt.executeUpdate(\r\n               \"insert into test_table values (1, 'one'), (2, 'two')\");\r\n         System.out.println(returnCode + \" records affected.\");\r\n \r\n         ResultSet rset = stmt.executeQuery(\"select * from test_table\");\r\n         while (rset.next()) {\r\n            System.out.println(rset.getInt(\"id\") + \", \" + rset.getString(\"name\"));\r\n         }\r\n      } catch(SQLException ex) {\r\n         ex.printStackTrace();\r\n      }\r\n      // Step 5: Close the resources - Done automatically by try-with-resources\r\n \r\n      // Shutdown the Derby\r\n      try {\r\n         DriverManager.getConnection(\"jdbc:derby:;shutdown=true\");\r\n      } catch (SQLException ex)  {\r\n         if ( ex.getSQLState().equals(\"XJ015\") ) {\r\n            System.out.println(\"successfully shutdown!\");\r\n         }\r\n      }\r\n   }\r\n}", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n// Syntax\r\nConnection conn = DriverManager.getConnection(\"jdbc:derby:{db-name};create=true\");\r\n// Example\r\nConnection conn = DriverManager.getConnection(\"jdbc:derby:test_db;create=true\");", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nClass.forName(\"org.apache.derby.jdbc.EmbeddedDriver\");  // For embedded Apache Derby (Java DB)", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n53", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\nimport java.sql.*;             // Use classes in java.sql package\r\n \r\npublic class ExcelSelectTest {  // JDK 7 and above\r\n   public static void main(String[] args) {\r\n      try (\r\n         // Step 1: Allocate a database \"Connection\" object\r\n         Connection conn = DriverManager.getConnection(\r\n               \"jdbc:odbc:ebookshopODBC\");  // Access/Excel\r\n \r\n         // Step 2: Allocate a \"Statement\" object in the Connection\r\n         Statement stmt = conn.createStatement();\r\n      ) {\r\n         // Excel connection, by default, is read-only.\r\n         // Need to turn it off to issue INSERT, UPDATE, ...\r\n         conn.setReadOnly(false);\r\n \r\n         // Step 3: Execute a SQL SELECT query, the query result\r\n         //   is returned in a \"ResultSet\" object.\r\n         // Table name is the sheet's name in the form of [sheet-name$]\r\n         String strSelect = \"select title, price, qty from [books$]\";\r\n         System.out.println(\"The SQL query is: \" + strSelect); // Echo For debugging\r\n \r\n         ResultSet rset = stmt.executeQuery(strSelect);\r\n \r\n         // Step 4: Process the ResultSet by scrolling the cursor forward via next().\r\n         //  For each row, retrieve the contents of the cells with getXxx(columnName).\r\n         System.out.println(\"The records selected are:\");\r\n         int rowCount = 0;\r\n         while(rset.next()) {   // Move the cursor to the next row\r\n            String title = rset.getString(\"title\");\r\n            double price = rset.getDouble(\"price\");\r\n            int    qty   = rset.getInt(\"qty\");\r\n            System.out.println(title + \", \" + price + \", \" + qty);\r\n            ++rowCount;\r\n         }\r\n         System.out.println(\"Total number of records = \" + rowCount);\r\n \r\n         // Try INSERT\r\n         int returnCode = stmt.executeUpdate(\r\n            \"insert into [books$] values (1002, 'Java 101', 'Tan Ah Teck', 2.2, 2)\");\r\n         System.out.println(returnCode + \" record(s) inserted.\");\r\n \r\n         // Try UPDATE\r\n         returnCode = stmt.executeUpdate(\r\n            \"update [books$] set qty = qty+1 where id = 1002\");\r\n         System.out.println(returnCode + \" record(s) updated.\");\r\n \r\n      } catch(SQLException ex) {\r\n         ex.printStackTrace();\r\n      }\r\n      // Step 5: Close the resources - Done automatically by try-with-resources\r\n   }\r\n}", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n// Step 3 & 4: Execute queries and process the query results\r\n// Disable auto-commit for the connection, which commits every SQL statement.\r\nconn.setAutoCommit(false);\r\n\r\n// Before Changes\r\nResultSet rset = stmt.executeQuery(\"select id, qty from books where id in (1001, 1002)\");\r\nSystem.out.println(\"-- Before UPDATE --\");\r\nwhile(rset.next()) {\r\n   System.out.println(rset.getInt(\"id\") + \", \" + rset.getInt(\"qty\"));\r\n}\r\nconn.commit();     // Commit SELECT\r\n \r\n// Issue two UPDATE statements thru executeUpdate()\r\nstmt.executeUpdate(\"update books set qty = qty + 1 where id = 1001\");\r\nstmt.executeUpdate(\"update books set qty = qty + 1 where id = 1002\");\r\nconn.commit();     // Commit UPDATEs\r\n \r\nrset = stmt.executeQuery(\"select id, qty from books where id in (1001, 1002)\");\r\nSystem.out.println(\"-- After UPDATE and Commit --\");\r\nwhile(rset.next()) {\r\n   System.out.println(rset.getInt(\"id\") + \", \" + rset.getInt(\"qty\"));\r\n}\r\nconn.commit();     // Commit SELECT\r\n \r\n// Issue two UPDATE statements thru executeUpdate()\r\nstmt.executeUpdate(\"update books set qty = qty - 99 where id = 1001\");\r\nstmt.executeUpdate(\"update books set qty = qty - 99 where id = 1002\");\r\nconn.rollback();   // Discard all changes since the last commit\r\n \r\nrset = stmt.executeQuery(\"select id, qty from books where id in (1001, 1002)\");\r\nSystem.out.println(\"-- After UPDATE and Rollback --\");\r\nwhile(rset.next()) {\r\n   System.out.println(rset.getInt(\"id\") + \", \" + rset.getInt(\"qty\"));\r\n}\r\nconn.commit();     // Commit SELECT", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nimport java.sql.*;\r\n \r\npublic class JdbcCommitCatchTest {  // JDK 7 and above\r\n   public static void main(String[] args) throws SQLException {\r\n      try (\r\n         Connection conn = DriverManager.getConnection(\r\n               \"jdbc:mysql://localhost:8888/ebookshop\", \"myuser\", \"xxxx\"); // MySQL\r\n         Statement stmt = conn.createStatement();\r\n      ) {\r\n         try {\r\n            // Disable auto-commit\r\n            conn.setAutoCommit(false);\r\n \r\n            // Issue two INSERT statements\r\n            stmt.executeUpdate(\"insert into books values (4001, 'Paul Chan', 'Mahjong 101', 4.4, 4)\");\r\n            // Duplicate primary key, which triggers a SQLException\r\n            stmt.executeUpdate(\"insert into books values (4001, 'Peter Chan', 'Mahjong 102', 4.4, 4)\");\r\n            conn.commit();     // Commit changes only if all statements succeed.\r\n \r\n         } catch(SQLException ex) {\r\n            System.out.println(\"-- Rolling back changes --\");\r\n            conn.rollback();   // Rollback to the last commit.\r\n            ex.printStackTrace();\r\n         }\r\n      }\r\n   }\r\n}", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\ncom.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '4001' for key 'PRIMARY'", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\n// Step 3 & 4: Execute query and process query result\r\nResultSet rset = stmt.executeQuery(\"select * from books\");\r\n// Get the metadata of the ResultSet\r\nResultSetMetaData rsetMD = rset.getMetaData();\r\n// Get the number of column from metadata\r\nint numColumns = rsetMD.getColumnCount();\r\n \r\n// Print column names - Column Index begins at 1 (instead of 0)\r\nfor (int i = 1; i <= numColumns; ++i) {\r\n   System.out.printf(\"%-30s\", rsetMD.getColumnName(i));\r\n}\r\nSystem.out.println();\r\n \r\n// Print column class names\r\nfor (int i = 1; i <= numColumns; ++i) {\r\n   System.out.printf(\"%-30s\",\r\n           \"(\" + rsetMD.getColumnClassName(i) + \")\");\r\n}\r\nSystem.out.println();\r\n \r\n// Print column contents for all the rows\r\nwhile (rset.next()) {\r\n   for (int i = 1; i <= numColumns; ++i) {\r\n      // getString() can be used for all column types\r\n      System.out.printf(\"%-30s\", rset.getString(i));\r\n   }\r\n   System.out.println();\r\n}", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n42", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\nimport java.sql.*;             // Use classes in java.sql package\r\n \r\npublic class JdbcPreparedStatementTest {  // JDK 7 and above\r\n   public static void main(String[] args) {\r\n      try (\r\n         Connection conn = DriverManager.getConnection(\r\n               \"jdbc:mysql://localhost:8888/ebookshop\", \"myuser\", \"xxxx\"); // MySQL\r\n \r\n         // Two PreparedStatements, one for INSERT and one for SELECT\r\n         PreparedStatement pstmt = conn.prepareStatement(\r\n             \"insert into books values (?, ?, ?, ?, ?)\");  // Five parameters 1 to 5\r\n         PreparedStatement pstmtSelect = conn.prepareStatement(\"select * from books\");\r\n      ) {\r\n         pstmt.setInt(1, 7001);  // Set values for parameters 1 to 5\r\n         pstmt.setString(2, \"Mahjong 101\");\r\n         pstmt.setString(3, \"Kumar\");\r\n         pstmt.setDouble(4, 88.88);\r\n         pstmt.setInt(5, 88);\r\n         int rowsInserted = pstmt.executeUpdate();  // Execute statement\r\n         System.out.println(rowsInserted + \"rows affected.\");\r\n \r\n         pstmt.setInt(1, 7002);  // Change values for parameters 1 and 2\r\n         pstmt.setString(2, \"Mahjong 102\");\r\n         // No change in values for parameters 3 to 5\r\n         rowsInserted = pstmt.executeUpdate();\r\n         System.out.println(rowsInserted + \"rows affected.\");\r\n \r\n         // Issue a SELECT to check the changes\r\n         ResultSet rset = pstmtSelect.executeQuery();\r\n         while(rset.next()) {\r\n            System.out.println(rset.getInt(\"id\") + \", \"\r\n                  + rset.getString(\"author\") + \", \"\r\n                  + rset.getString(\"title\") + \", \"\r\n                  + rset.getDouble(\"price\") + \", \"\r\n                  + rset.getInt(\"qty\"));\r\n         }\r\n      } catch(SQLException ex) {\r\n         ex.printStackTrace();\r\n      }\r\n      // Step 5: Close the resources - Done automatically by try-with-resources\r\n   }\r\n}", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n// Step 3 & 4: Execute query and Process the query result\r\nconn.setAutoCommit(false);  // Turn off auto-commit for each SQL statement\r\n \r\nstmt.addBatch(\"insert into books values (8001, 'Java ABC', 'Kevin Jones', 1.1, 99)\");\r\nstmt.addBatch(\"insert into books values (8002, 'Java XYZ', 'Kevin Jones', 1.1, 99)\");\r\nstmt.addBatch(\"update books set price = 11.11 where id=8001 or id=8002\");\r\nint[] returnCodes = stmt.executeBatch();\r\n \r\nSystem.out.print(\"Return codes are: \");\r\nfor (int code : returnCodes) {\r\n   System.out.printf(code + \", \");\r\n}\r\nSystem.out.println();\r\n \r\nconn.commit();  // Commit SQL statements\r\n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n// Step 1: Allocate a \"Connection\"\r\nConnection conn = DriverManager.getConnection(......);\r\n \r\n// Step 2: Allocate a \"PreparedStatement\" instead of \"Statement\"\r\nPreparedStatement pstmt = conn.prepareStatement(\r\n   \"insert into books values (?, ?, ?, ?, ?)\");  // Five parameters 1 to 5\r\n \r\nconn.setAutoCommit(false);  // Disable auto-commit for each SQL statement\r\n \r\npstmt.setInt(1, 8003);  // Set values for parameters 1 to 5\r\npstmt.setString(2, \"Java 123\");\r\npstmt.setString(3, \"Kevin Jones\");\r\npstmt.setDouble(4, 12.34);\r\npstmt.setInt(5, 88);\r\npstmt.addBatch();   // add the statement for batch processing\r\n \r\npstmt.setInt(1, 8004);  // Change values for parameters 1 and 2\r\npstmt.setString(2, \"Java 456\");\r\n// No change in values for parameters 3 to 5\r\npstmt.addBatch();  // add the statement for batch processing\r\n \r\nint[] returnCodes = pstmt.executeBatch();\r\n  // executeBatch() returns an int array, keeping the return codes of all statements\r\n\r\nSystem.out.print(\"Return codes are: \");\r\nfor (int code : returnCodes) System.out.printf(code + \", \");\r\nSystem.out.println();\r\n \r\nconn.commit();\r\n", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "http://www.sqlines.com/articles/java/sql_server_jdbc_connection", "url position": 35, "segments": [{"code": "   Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "   // Connect to the TestDB database on the local computer by using a user name and password:\n   \"jdbc:sqlserver://localhost; databaseName=TestDB; user=UserName;password=Password;\"\n\n   // Connect to the TestDB database by using integrated authentication:\n   \"jdbc:sqlserver://localhost; databaseName=TestDB; integratedSecurity=true;\"", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "   import java.sql.*;\n\n   public class Test {\n\n\tpublic static void main(String[] args) {\n\n           Connection con = null;\n           String conUrl = \"jdbc:sqlserver://localhost; databaseName=test; user=sa; password=sa;\";\n\n\t   try {\n            // ...\n\t    con = DriverManager.getConnection(conUrl);\n            // ... \n   \t  } catch (Exception e) { e.printStackTrace(); }\n             finally {\n               if (con != null) try { con.close(); } catch(Exception e) {}\n             }\n\t}\n   }", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.youtube.com/watch?v=2i4t-SL1VsU", "url position": 33, "segments": []},
{"query": "How to connect to a JDBC database", "url": "https://www.developer.com/java/data/creating-a-jdbc-application-in-netbeans-a-step-by-step-guide.html", "url position": 37, "segments": [{"code": "$ service mysql start or restart", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "$ mysql -h localhost -u root", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "USE mysql;", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "create user 'mickey'@'localhost' identified by 'mickey';\ngrant select, create, drop, references, insert, update,\n   delete, execute on *.* to 'mickey'@'localhost';\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "mysql -h localhost -u mickey -p", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "CREATE testdb;\nUSE testdb;\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "create table books\n(\n   isbn varchar(20) primary key,\n   title varchar(50),\n   edition varchar(20),\n   price float(10,2)\n);\n\ncreate table authors\n(\n   author_id int primary key,\n   author_name varchar(50)\n);\n\ncreate table book_by_author\n(\n   isbn varchar(20),\n   author_id int,\n   foreign key(isbn)\n      references books(isbn),\n   foreign key(author_id)\n      references authors(author_id)\n);\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "insert into books values('123456','Discrete Math',\n   'Second',56.78);\ninsert into books values('234567','Integral Calculus',\n   'Second',92.73);\ninsert into books values('345678','Differential Calculus',\n   'First',57.86);\ninsert into books values('456789','Graph Theory',\n   'Second',33.8);\ninsert into books values('567890','Set Theory',\n   'Fourth',34.89);\ninsert into books values('102938','Numerical Methods',\n   'Third',98.46);\n\ninsert into authors values(1,'CS Liu');\ninsert into authors values(2,'N Deo');\ninsert into authors values(3,'Rogers');\ninsert into authors values(4,'Saxena');\ninsert into authors values(5,'Sandip');\ninsert into authors values(6,'Srivastava');\ninsert into authors values(7,'Jha');\n\ninsert into book_by_author values('123456',1);\ninsert into book_by_author values('123456',2);\ninsert into book_by_author values('123456',3);\ninsert into book_by_author values('234567',4);\ninsert into book_by_author values('234567',5);\ninsert into book_by_author values('345678',6);\ninsert into book_by_author values('456789',7);\ninsert into book_by_author values('567890',4);\ninsert into book_by_author values('102938',6);\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package simplejdbcapplication;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class SimpleJDBCApplication {\n\n   static final String DB_URL =\n      \"jdbc:mysql://localhost:3306/testdb\";\n   static final String DB_DRV =\n      \"com.mysql.jdbc.Driver\";\n   static final String DB_USER = \"mickey\";\n   static final String DB_PASSWD = \"mickey\";\n\n   public static void main(String[] args){\n\n      Connection connection = null;\n      Statement statement = null;\n      ResultSet resultSet = null;\n\n      try{\n         connection=DriverManager.getConnection\n            (DB_URL,DB_USER,DB_PASSWD);\n         statement=connection.createStatement();\n         resultSet=statement.executeQuery\n            (\"SELECT * FROM books\");\n         while(resultSet.next()){\n            System.out.printf(\"%s\\t%s\\t%s\\t%f\\n\",\n            resultSet.getString(1),\n            resultSet.getString(2),\n            resultSet.getString(3),\n            resultSet.getFloat(4));\n         }\n\n      }catch(SQLException ex){\n      }finally{\n         try {\n            resultSet.close();\n            statement.close();\n            connection.close();\n         } catch (SQLException ex) {\n         }\n      }\n   }\n}\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.easysoft.com/blog/alteryx.html", "url position": 36, "segments": [{"code": "\nC:\\Pivotal_GemFireXD_140_b50226_Windows\\lib\\gemfirexd-client.jar\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\njdbc:gemfirexd://localhost:1527/\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://mariadb.com/kb/en/library/about-mariadb-connector-j/", "url position": 30, "segments": [{"code": "git clone https://github.com/MariaDB/mariadb-connector-j.git\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "git clone https://github.com/MariaDB/mariadb-connector-j.git #  Or, unpack the source distribution tarball\ncd mariadb-connector-j\n# For the unit test run, start local mysqld mysqld, \n# ensure that user root with empty password can login\nmvn package\n# If you want to build without running unit  tests, use\n# mvn -Dmaven.test.skip=true package\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Connection connection = DriverManager.getConnection(\"jdbc:mariadb://localhost:3306/DB?user=root&password=myPassword\");\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "        final HikariDataSource ds = new HikariDataSource();\n        ds.setMaximumPoolSize(20);\n        ds.setDriverClassName(\"org.mariadb.jdbc.Driver\");\n        ds.setJdbcUrl(\"jdbc:mariadb://localhost:3306/db\");\n        ds.addDataSourceProperty(\"user\", \"root\");\n        ds.addDataSourceProperty(\"password\", \"myPassword\");\n        ds.setAutoCommit(false);\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "jdbc:(mysql|mariadb):[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]] \n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "        Statement statement = ...\n        InputStream in = new FileInputStream(\"/file.sql\");\n\n        if (statement.isWrapperFor(MariaDbStatement.class)) {\n            MariaDbStatement mariaDbStatement = statement.unwrap(MariaDbStatement.class);\n            mariaDbStatement.setLocalInfileInputStream(in);\n            String sql = \"LOAD DATA LOCAL INFILE 'dummyFileName'\"\n                        + \" INTO TABLE gigantic_load_data_infile \"\n                        + \" FIELDS TERMINATED BY '\\\\t' ENCLOSED BY ''\"\n                        + \" ESCAPED BY '\\\\\\\\' LINES TERMINATED BY '\\\\n'\";\n            statement.execute(sql);\n        } else {\n            in.close();\n            throw new RuntimeException(\"Mariadb JDBC adaptor must be used\");\n        }\n\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": " public class LocalInfileInterceptorImpl implements LocalInfileInterceptor {\n     @Override\n     public boolean validate(String fileName) {\n         File file = new File(fileName);\n         String absolutePath = file.getAbsolutePath();\n         String filePath = absolutePath.substring(0,absolutePath.lastIndexOf(File.separator));\n         return filePath.equals(\"/var/tmp/exchanges\");\n     }\n }\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": " @AutoService(LocalInfileInterceptor.class)\n public class LocalInfileInterceptorImpl implements LocalInfileInterceptor {\n     @Override\n     public boolean validate(String fileName) {\n         File file = new File(fileName);\n         String absolutePath = file.getAbsolutePath();\n         String filePath = absolutePath.substring(0,absolutePath.lastIndexOf(File.separator));\n         return filePath.equals(\"/var/tmp/exchanges\");\n     }\n }\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "#will set a maximum query timeout of 10 seconds for this connection\njdbc:mariadb://localhost/db?user=user&sessionVariables=max_statement_time=10\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Connection  connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/test\", \"username\", \"password\");\nStatement stmt = connection.createStatement();\nstmt.executeUpdate(\"CREATE TABLE a (id int not null primary key, value varchar(20))\");\nstmt.close();\nconnection.close();\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "java.sql.SQLNonTransientConnectionException: (conn=7543) Could not send query: Software caused connection abort: recv failed\n\tat org.mariadb.jdbc.internal.util.exceptions.ExceptionMapper.get(ExceptionMapper.java:171)\n\tat org.mariadb.jdbc.internal.util.exceptions.ExceptionMapper.getException(ExceptionMapper.java:106)\n\tat org.mariadb.jdbc.MariaDbStatement.executeExceptionEpilogue(MariaDbStatement.java:235)\n\tat org.mariadb.jdbc.MariaDbStatement.executeInternal(MariaDbStatement.java:332)\n\tat org.mariadb.jdbc.MariaDbStatement.execute(MariaDbStatement.java:383)\n\tat org.mariadb.jdbc.ConnectionTest.testEnablePacketDebug(ConnectionTest.java:530)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\nCaused by: java.sql.SQLException: Could not send query: Software caused connection abort: recv failed\nsend at 2017-10-04T16:48:02.444Z\n00 00 00 03 49 4E 53  45 52 54 20 49 4E 54 4F     9....INSERT INTO\n74 65 73 74 45 6E 61  62 6C 65 50 61 63 6B 65      testEnablePacke\n44 65 62 75 67 20 28  74 65 73 74 29 20 56 41     tDebug (test) VA\n4C 55 45 53 20 28 27 68  65 6A 61 27 29              LUES ('heja')\n\nsend at 2017-10-04T16:48:02.446Z\n00 00 00 03 49 4E 53  45 52 54 20 49 4E 54 4F     9....INSERT INTO\n74 65 73 74 45 6E 61  62 6C 65 50 61 63 6B 65      testEnablePacke\n44 65 62 75 67 20 28  74 65 73 74 29 20 56 41     tDebug (test) VA\n4C 55 45 53 20 28 27 6A  61 70 70 27 29              LUES ('japp')\n\nsend at 2017-10-04T16:48:02.447Z\n00 00 00 03 43 4F 4D  4D 49 54                    .....COMMIT\n\nsend at 2017-10-04T16:48:02.450Z\n00 00 00 03 53 45 4C  45 43 54 20 2A 20 46 52     $....SELECT * FR\n4F 4D 20 74 65 73 74 45  6E 61 62 6C 65 50 61 63     OM testEnablePac\n6B 65 74 44 65 62 75 67                              ketDebug\n\nsend at 2017-10-04T16:48:02.452Z\n3F 00 00 00 03 49 4E 53  45 52 54 20 49 4E 54 4F     ?....INSERT INTO\n74 65 73 74 45 6E 61  62 6C 65 50 61 63 6B 65      testEnablePacke\n44 65 62 75 67 20 28  74 65 73 74 29 20 56 41     tDebug (test) VA\n4C 55 45 53 20 28 27 72  6F 6C 6C 6D 65 62 61 63     LUES ('rollmebac\n6B 27 29                                             k')\n\nread at 2017-10-04T16:48:02.453Z\n00 00 01                                          ....\n01 03 01 00 00 00                                 .......\n\nsend at 2017-10-04T16:48:02.454Z\n00 00 00 03 52 4F 4C  4C 42 41 43 4B              .....ROLLBACK\n\nsend at 2017-10-04T16:48:02.457Z\n2F 00 00 00 03 53 45 4C  45 43 54 20 2A 20 46 52     /....SELECT * FR\n4F 4D 20 74 65 73 74 45  6E 61 62 6C 65 50 61 63     OM testEnablePac\n6B 65 74 44 65 62 75 67  20 57 48 45 52 45 20 69     ketDebug WHERE i\n3D 33                                             d=3\n\nsend at 2017-10-04T16:48:02.458Z\n00 00 00 03 73 65 74  20 61 75 74 6F 63 6F 6D     .....set autocom\n6D 69 74 3D 31                                       mit=1\n\nsend at 2017-10-04T16:48:02.459Z\n0F 00 00 00 03 53 45 4C  45 43 54 20 27 65 72 72     .....SELECT 'err\n6F 72 27                                             or'\n\nQuery is: SELECT 'error'\n\tat org.mariadb.jdbc.internal.util.LogQueryTool.exceptionWithQuery(LogQueryTool.java:119)\n\tat org.mariadb.jdbc.internal.protocol.AbstractQueryProtocol.executeQuery(AbstractQueryProtocol.java:162)\n\tat org.mariadb.jdbc.MariaDbStatement.executeInternal(MariaDbStatement.java:326)\n\t... 29 more\nCaused by: java.net.SocketException: Software caused connection abort: recv failed\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:171)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:141)\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:246)\n\tat java.io.BufferedInputStream.read1(BufferedInputStream.java:286)\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:345)\n\tat org.mariadb.jdbc.internal.io.input.StandardPacketInputStream.getPacketArray(StandardPacketInputStream.java:238)\n\tat org.mariadb.jdbc.internal.io.input.StandardPacketInputStream.getPacket(StandardPacketInputStream.java:208)\n\tat org.mariadb.jdbc.internal.protocol.AbstractQueryProtocol.readPacket(AbstractQueryProtocol.java:1299)\n\tat org.mariadb.jdbc.internal.protocol.AbstractQueryProtocol.getResult(AbstractQueryProtocol.java:1280)\n\tat org.mariadb.jdbc.internal.protocol.AbstractQueryProtocol.executeQuery(AbstractQueryProtocol.java:159)\n\t... 30 more\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>[1.4.0,1.7.25]</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<configuration>\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name=\"org.mariadb.jdbc\" level=\"trace\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\"/>\n    </logger>\n\n    <root level=\"error\">\n        <appender-ref ref=\"STDOUT\"/>\n    </root>\n\n</configuration>\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\n2017-10-04 19:13:44 [main] TRACE o.m.j.i.i.o.StandardPacketOutputStream - send: conn=7548(M)\n00 00 00 03 49 4E 53  45 52 54 20 49 4E 54 4F     3....INSERT INTO\n44 72 69 76 65 72 74  33 30 20 28 74 65 73 74      Drivert30 (test\n20 56 41 4C 55 45 53  20 28 27 72 6F 6C 6C 6D     ) VALUES ('rollm\n62 61 63 6B 27 29                                 eback')\n\n2017-10-04 19:13:44 [main] TRACE o.m.j.i.i.i.StandardPacketInputStream - read: conn=7548(M)\n00 00 01                                          ....\n01 03 01 00 00 00                                 .......\n\n2017-10-04 19:13:44 [main] TRACE o.m.j.i.i.o.StandardPacketOutputStream - send: conn=7548(M)\n00 00 00 03 52 4F 4C  4C 42 41 43 4B              .....ROLLBACK\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://help.sap.com/viewer/0eec0d68141541d1b07893a39944924e/2.0.02/en-US/ff15928cf5594d78b841fbbe649f04b4.html", "url position": 40, "segments": []},
{"query": "How to connect to a JDBC database", "url": "https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html", "url position": 34, "segments": [{"code": "aws s3 cp s3://athena-downloads/drivers/AthenaJDBC41-1.1.0.jar [local_directory]", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "jdbc:awsathena://athena.{REGION}.amazonaws.com:443", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "http://cs-fundamentals.com/java-programming/java-jdbc-connection-tutorial.php", "url position": 38, "segments": [{"code": "\r\nC:\\> mysql -h localhost -u root \r\nEnter password: *****\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 7\r\nServer version: 5.1.46-community MySQL Community Server (GPL)\r\n\r\nCopyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.\r\nThis software comes with ABSOLUTELY NO WARRANTY. This is free software,\r\nand you are welcome to modify and redistribute it under the GPL v2 license\r\n\r\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n\r\nmysql>\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nmysql> CREATE DATABASE EXPDB;\r\nQuery OK, 1 row affected (0.08 sec)\r\n\r\nmysql>\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nmysql> USE EXPDB;\r\nDatabase changed\r\n\r\nmysql>\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nmysql> CREATE TABLE EXPTABLE (\r\n    -> ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,\r\n    -> NAME VARCHAR (50)\r\n    -> );\r\nQuery OK, 0 rows affected (0.20 sec)\r\n\r\nmysql>\r\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\t\t\t\r\nmysql> INSERT INTO EXPTABLE (NAME) VALUES (\"ANUSHKA K\");\r\nQuery OK, 1 row affected (0.09 sec)\r\n\r\nmysql> INSERT INTO EXPTABLE (NAME) VALUES (\"GARVITA K\");\r\nQuery OK, 1 row affected (0.00 sec)\r\n\r\nmysql>\t\t\t\r\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nmysql> SELECT * FROM EXPTABLE;\r\n+----+-----------+\r\n| ID | NAME      |\r\n+----+-----------+\r\n|  1 | ANUSHKA K |\r\n|  2 | GARVITA K |\r\n+----+-----------+\r\nrows in set (0.03 sec)\r\n\r\nmysql>\r\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try\n{\n    // loads com.mysql.jdbc.Driver into memory\n    Class.forName(\"com.mysql.jdbc.Driver\");\n} \ncatch (ClassNotFoundException cnf) \n{\n    System.out.println(\"Driver could not be loaded: \" + cnf);\n}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nC:\\>java -D jdbc.drivers=com.mysql.jdbc.Driver <Program Name>\r\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "System.setProperty(\"jdbc.drivers\", \"com.mysql.jdbc.Driver\");", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "//jdbc driver connection string, db username and password\nprivate String connectionUrl = \"jdbc:mysql://localhost:3306/EXPDB\";\nprivate String dbUser = \"root\";\nprivate String dbPwd = \"mysql\";\nprivate Connection conn;\ntry\n{\n    conn = DriverManager.getConnection(connectionUrl, dbUser, dbPwd);\n}\ncatch (SQLException sqle) \n{\n    System.out.println(\"SQL Exception thrown: \" + sqle);\n}", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try\n{\n    Statement stmt = conn.createStatement();\n}\ncatch (SQLException sqle) \n{\n    System.out.println(\"SQL Exception thrown: \" + sqle);\n}", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String queryString = \"SELECT * FROM EXPTABLE\"\ntry\n{\n    ResultSet rs = stmt.executeQuery(queryString);\n}\ncatch (SQLException sqle) \n{\n    System.out.println(\"SQL Exception thrown: \" + sqle);\n}", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "System.out.println(\"ID \\tNAME\");\nSystem.out.println(\"============\");\nwhile(rs.next())\n{\n   System.out.print(rs.getInt(\"id\") + \"\\t\" + rs.getString(\"name\"));\n   System.out.println();\n}", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try\n{\n    if (conn != null)\n    {\n        conn.close();\n        conn = null;\n    }\n}\ncatch (SQLException sqle) \n{\n    System.out.println(\"SQL Exception thrown: \" + sqle);\n}", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "/* JDBC_Connection_Demo.java */\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class JDBC_Connection_Demo\n{\n  /* static block is executed when a class is loaded into memory \n   * this block loads MySQL's JDBC driver\n   */\n  static\n  {\n    try\n    {\n      // loads com.mysql.jdbc.Driver into memory\n      Class.forName(\"com.mysql.jdbc.Driver\");\n    } \n    catch (ClassNotFoundException cnf) \n    {\n      System.out.println(\"Driver could not be loaded: \" + cnf);\n    }\n  }\n\n  public static void main(String[] args)\n  {\n    String connectionUrl = \"jdbc:mysql://localhost:3306/EXPDB\";\n    String dbUser = \"root\";\n    String dbPwd = \"mysql\";\n    Connection conn;\n    ResultSet rs;\n    String queryString = \"SELECT ID, NAME FROM EXPTABLE\";\n\n    try\n    {\n      conn = DriverManager.getConnection(connectionUrl, dbUser, dbPwd);\n      Statement stmt = conn.createStatement();\n\n      // INSERT A RECORD\n      stmt.executeUpdate(\"INSERT INTO EXPTABLE (NAME) VALUES (\\\"TINU K\\\")\");\n\n      // SELECT ALL RECORDS FROM EXPTABLE\n      rs = stmt.executeQuery(queryString);\n\n      System.out.println(\"ID \\tNAME\");\n      System.out.println(\"============\");\n      while(rs.next())\n      {\n        System.out.print(rs.getInt(\"id\") + \".\\t\" + rs.getString(\"name\"));\n        System.out.println();\n      }\n      if (conn != null)\n      {\n        conn.close();\n        conn = null;\n      }\n    }\n    catch (SQLException sqle) \n    {\n      System.out.println(\"SQL Exception thrown: \" + sqle);\n    }\n  }\n} //JDBC_Connection_Demo ends here\n\n---------------------------------------\nOUTPUT\n------\nID \tNAME\n============\n1.\tANUSHKA K\n2.\tGARVITA K\n3.\tTINU K", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "http://www.xyzws.com/Javafaq/how-to-connect-to-a-database-using-jdbc/166", "url position": 44, "segments": [{"code": "import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;public class Program {  public static void main(String... args) {    Connection con = null;    try {      Class.forName(\"org.gjt.mm.mysql.Driver\").newInstance();    }    catch(Exception e) {      System.out.println(\"Exception: \" + e.getMessage());      return ;    }    try {      con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\",        \"usr\", \"sql\");      if(!con.isClosed())        System.out.println(\"Successfully connected to \" +          \"MySQL server using TCP/IP...\");    } catch(Exception e) {      System.out.println(\"Exception: \" + e.getMessage());    } finally {      try {        if(con != null)          con.close();      }      catch(SQLException e) {      }    }  }}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.playframework.com/documentation/2.6.x/JavaDatabase", "url position": 39, "segments": [{"code": "libraryDependencies += javaJdbc\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "# Default database configuration\ndb.default.driver=org.h2.Driver\ndb.default.url=\"jdbc:h2:mem:play\"\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "# Orders database\ndb.orders.driver=org.h2.Driver\ndb.orders.url=\"jdbc:h2:mem:orders\"\n\n# Customers database\ndb.customers.driver=org.h2.Driver\ndb.customers.url=\"jdbc:h2:mem:customers\"\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "# Default database configuration using H2 database engine in an in-memory mode\ndb.default.driver=org.h2.Driver\ndb.default.url=\"jdbc:h2:mem:play\"\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "# Default database configuration using H2 database engine in a persistent mode\ndb.default.driver=org.h2.Driver\ndb.default.url=\"jdbc:h2:/path/to/db-file\"\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "# Default database configuration using SQLite database engine\ndb.default.driver=org.sqlite.JDBC\ndb.default.url=\"jdbc:sqlite:/path/to/db-file\"\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "# Default database configuration using PostgreSQL database engine\ndb.default.driver=org.postgresql.Driver\ndb.default.url=\"jdbc:postgresql://database.example.com/playdb\"\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "# Default database configuration using MySQL database engine\n# Connect to playdb as playdbuser\ndb.default.driver=com.mysql.jdbc.Driver\ndb.default.url=\"jdbc:mysql://localhost/playdb\"\ndb.default.username=playdbuser\ndb.default.password=\"a strong password\"\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/*\n * Copyright (C) 2009-2017 Lightbend Inc. <https://www.lightbend.com>\n */\npackage javaguide.sql;\n\nimport javax.inject.*;\n\nimport play.db.*;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\n\n@Singleton\nclass JavaApplicationDatabase {\n\n    private Database db;\n    private DatabaseExecutionContext executionContext;\n\n    @Inject\n    public JavaApplicationDatabase(Database db, DatabaseExecutionContext context) {\n        this.db = db;\n        this.executionContext = executionContext;\n    }\n\n   public CompletionStage<Integer> updateSomething() {\n       return CompletableFuture.supplyAsync(() -> {\n           return db.withConnection(connection -> {\n               // do whatever you need with the db connection\n               return 1;\n           });\n       }, executionContext);\n   }\n}", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "/*\n * Copyright (C) 2009-2017 Lightbend Inc. <https://www.lightbend.com>\n */\npackage javaguide.sql;\n\nimport javax.inject.Inject;\nimport javax.inject.Singleton;\n\nimport play.mvc.Controller;\nimport play.db.NamedDatabase;\nimport play.db.Database;\n\n// inject \"orders\" database instead of \"default\"\n@javax.inject.Singleton\nclass JavaNamedDatabase {\n    private Database db;\n    private DatabaseExecutionContext executionContext;\n\n    @Inject\n    public JavaNamedDatabase(@NamedDatabase(\"orders\") Database db, DatabaseExecutionContext executionContext) {\n        this.db = db;\n        this.executionContext = executionContext;\n    }\n\n    // do whatever you need with the db using supplyAsync(() -> { ... }, executionContext);\n}", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "# db connections = ((physical_core_count * 2) + effective_spindle_count)\nfixedConnectionPool = 9\n\ndatabase.dispatcher {\n  executor = \"thread-pool-executor\"\n  throughput = 1\n  thread-pool-executor {\n    fixed-pool-size = ${fixedConnectionPool}\n  }\n}\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/*\n * Copyright (C) 2009-2017 Lightbend Inc. <https://www.lightbend.com>\n */\npackage javaguide.sql;\n\nimport java.sql.Connection;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\nimport javax.inject.Inject;\n\nimport play.mvc.Controller;\nimport play.db.NamedDatabase;\nimport play.db.Database;\n\nclass JavaJdbcConnection {\n    private Database db;\n    private DatabaseExecutionContext executionContext;\n\n    @Inject\n    public JavaJdbcConnection(Database db, DatabaseExecutionContext executionContext) {\n        this.db = db;\n        this.executionContext = executionContext;\n    }\n\n    public CompletionStage<Void> updateSomething() {\n        return CompletableFuture.runAsync(() -> {\n            // get jdbc connection\n            Connection connection = db.getConnection();\n\n            // do whatever you need with the db connection\n            return;\n        }, executionContext);\n    }\n\n}", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "db.default.driver=org.h2.Driver\ndb.default.url=\"jdbc:h2:mem:play\"\ndb.default.jndiName=DefaultDS\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "# Default database configuration using PostgreSQL database engine\ndb.default.driver=org.postgresql.Driver\ndb.default.url=\"jdbc:postgresql://database.example.com/playdb\"\ndb.default.logSql=true\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "<!--\n  ~ Copyright (C) 2009-2017 Lightbend Inc. <https://www.lightbend.com>\n  -->\n<!-- The default logback configuration that Play uses if no other configuration is provided -->\n<configuration>\n\n  <conversionRule conversionWord=\"coloredLevel\" converterClass=\"play.api.libs.logback.ColoredLevel\" />\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n     <file>${application.home:-.}/logs/application.log</file>\n     <encoder>\n       <pattern>%date [%level] from %logger in %thread - %message%n%xException</pattern>\n     </encoder>\n  </appender>\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%coloredLevel %logger{15} - %message%n%xException{10}</pattern>\n    </encoder>\n  </appender>\n\n  <appender name=\"ASYNCFILE\" class=\"ch.qos.logback.classic.AsyncAppender\">\n    <appender-ref ref=\"FILE\" />\n  </appender>\n\n  <appender name=\"ASYNCSTDOUT\" class=\"ch.qos.logback.classic.AsyncAppender\">\n    <appender-ref ref=\"STDOUT\" />\n  </appender>\n\n  <logger name=\"play\" level=\"INFO\" />\n  <logger name=\"application\" level=\"DEBUG\" />\n\n  <!-- https://hibernate.atlassian.net/browse/HV-1323 -->\n  <logger name=\"org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator\" level=\"ERROR\" />\n\n  <logger name=\"org.jdbcdslog.ConnectionLogger\" level=\"OFF\"  /> <!-- Won' log connections -->\n  <logger name=\"org.jdbcdslog.StatementLogger\"  level=\"INFO\" /> <!-- Will log all statements -->\n  <logger name=\"org.jdbcdslog.ResultSetLogger\"  level=\"OFF\"  /> <!-- Won' log result sets -->\n\n  <root level=\"WARN\">\n    <appender-ref ref=\"ASYNCFILE\" />\n    <appender-ref ref=\"ASYNCSTDOUT\" />\n  </root>\n  \n</configuration>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "libraryDependencies += \"mysql\" % \"mysql-connector-java\" % \"5.1.41\"\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "play.db.pool=bonecp\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "https://alvinalexander.com/java/edu/pj/pj010024", "url position": 42, "segments": [{"code": "\n//  Establish a connection to a mSQL database using JDBC\nimport java.sql.*; \n\nclass JdbcTest1 { \n\n  public static void main (String[] args) { \n    try\n    {\n      // Step 1: \"Load\" the JDBC driver\n      Class.forName(\"com.imaginary.sql.msql.MsqlDriver\"); \n\n      // Step 2: Establish the connection to the database \n      String url = \"jdbc:msql://dbserver.com:1114/contact_mgr\"; \n      Connection conn = DriverManager.getConnection(url,\"user1\",\"password\");  \n    }\n    catch (Exception e)\n    {\n      System.err.println(\"D'oh! Got an exception!\"); \n      System.err.println(e.getMessage()); \n    } \n  } \n} \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n//  Establish a connection to an Interbase database using JDBC and ODBC. \nimport java.sql.*; \n\nclass JdbcTest1\n{\n  public static void main (String[] args)\n  { \n    try\n    { \n      // Step 1: Load the JDBC ODBCdriver \n      Class.forName(\"sun.jdbc.odbc.JdbcOdbcDriver\"); \n\n      // Step 2: Establish the connection to the database \n      String url = \"jdbc:odbc:contact_mgr\"; \n      Connection conn = DriverManager.getConnection(url,\"user1\",\"password\");  \n    }\n    catch (Exception e)\n    { \n      System.err.println(\"Got an exception! \"); \n      System.err.println(e.getMessage()); \n    } \n  } \n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDriverManager.getConnection(String url, String username, String password);\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://alvinalexander.com/java/edu/pj/jdbc/jdbc0002", "url position": 43, "segments": [{"code": "\n// create a Statement from the connection\nStatement statement = conn.createStatement();\n\n// insert the data\nstatement.executeUpdate(\"INSERT INTO Customers \" + \"VALUES (1001, 'Simpson', 'Mr.', 'Springfield', 2001)\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nstatement.executeUpdate(\"INSERT INTO Customers \" + \"VALUES (1002, 'McBeal', 'Ms.', 'Boston', 2004)\");\nstatement.executeUpdate(\"INSERT INTO Customers \" + \"VALUES (1003, 'Flinstone', 'Mr.', 'Bedrock', 2003)\");\nstatement.executeUpdate(\"INSERT INTO Customers \" + \"VALUES (1004, 'Cramden', 'Mr.', 'New York', 2001)\");\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.sql.*;\n\n/**\n * JdbcInsert1.java - Demonstrates how to INSERT data into an SQL\n *                    database using Java JDBC.\n */\nclass JdbcInsert1 { \n  \n    public static void main (String[] args) { \n        try { \n            String url = \"jdbc:msql://200.210.220.1:1114/Demo\"; \n            Connection conn = DriverManager.getConnection(url,\"\",\"\"); \n            Statement st = conn.createStatement(); \n            st.executeUpdate(\"INSERT INTO Customers \" + \n                \"VALUES (1001, 'Simpson', 'Mr.', 'Springfield', 2001)\"); \n            st.executeUpdate(\"INSERT INTO Customers \" + \n                \"VALUES (1002, 'McBeal', 'Ms.', 'Boston', 2004)\"); \n            st.executeUpdate(\"INSERT INTO Customers \" + \n                \"VALUES (1003, 'Flinstone', 'Mr.', 'Bedrock', 2003)\"); \n            st.executeUpdate(\"INSERT INTO Customers \" + \n                \"VALUES (1004, 'Cramden', 'Mr.', 'New York', 2001)\");\n\n            conn.close(); \n        } catch (Exception e) { \n            System.err.println(\"Got an exception! \"); \n            System.err.println(e.getMessage()); \n        } \n  \n    }\n} \n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://spring.io/guides/gs/relational-data-access/", "url position": 28, "segments": [{"code": " src\n     main\n         java\n             hello", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE\")\n    }\n}\n\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'idea'\napply plugin: 'org.springframework.boot'\n\njar {\n    baseName = 'gs-relational-data-access'\n    version =  '0.1.0'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-starter\")\n    compile(\"org.springframework:spring-jdbc\")\n    compile(\"com.h2database:h2\")\n    testCompile(\"junit:junit\")\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": " src\n     main\n         java\n             hello", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.springframework</groupId>\n    <artifactId>gs-relational-data-access</artifactId>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n        </dependency>\n    </dependencies>\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package hello;\n\npublic class Customer {\n    private long id;\n    private String firstName, lastName;\n\n    public Customer(long id, String firstName, String lastName) {\n        this.id = id;\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\n                \"Customer[id=%d, firstName='%s', lastName='%s']\",\n                id, firstName, lastName);\n    }\n\n    // getters & setters omitted for brevity\n}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package hello;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.jdbc.core.JdbcTemplate;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@SpringBootApplication\npublic class Application implements CommandLineRunner {\n\n    private static final Logger log = LoggerFactory.getLogger(Application.class);\n\n    public static void main(String args[]) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @Override\n    public void run(String... strings) throws Exception {\n\n        log.info(\"Creating tables\");\n\n        jdbcTemplate.execute(\"DROP TABLE customers IF EXISTS\");\n        jdbcTemplate.execute(\"CREATE TABLE customers(\" +\n                \"id SERIAL, first_name VARCHAR(255), last_name VARCHAR(255))\");\n\n        // Split up the array of whole names into an array of first/last names\n        List<Object[]> splitUpNames = Arrays.asList(\"John Woo\", \"Jeff Dean\", \"Josh Bloch\", \"Josh Long\").stream()\n                .map(name -> name.split(\" \"))\n                .collect(Collectors.toList());\n\n        // Use a Java 8 stream to print out each tuple of the list\n        splitUpNames.forEach(name -> log.info(String.format(\"Inserting customer record for %s %s\", name[0], name[1])));\n\n        // Uses JdbcTemplate's batchUpdate operation to bulk load data\n        jdbcTemplate.batchUpdate(\"INSERT INTO customers(first_name, last_name) VALUES (?,?)\", splitUpNames);\n\n        log.info(\"Querying for customer records where first_name = 'Josh':\");\n        jdbcTemplate.query(\n                \"SELECT id, first_name, last_name FROM customers WHERE first_name = ?\", new Object[] { \"Josh\" },\n                (rs, rowNum) -> new Customer(rs.getLong(\"id\"), rs.getString(\"first_name\"), rs.getString(\"last_name\"))\n        ).forEach(customer -> log.info(customer.toString()));\n    }\n}", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "java -jar build/libs/gs-relational-data-access-0.1.0.jar", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "java -jar target/gs-relational-data-access-0.1.0.jar", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "2015-06-19 10:58:31.152  INFO 67731 --- [           main] hello.Application                        : Creating tables\n2015-06-19 10:58:31.219  INFO 67731 --- [           main] hello.Application                        : Inserting customer record for John Woo\n2015-06-19 10:58:31.220  INFO 67731 --- [           main] hello.Application                        : Inserting customer record for Jeff Dean\n2015-06-19 10:58:31.220  INFO 67731 --- [           main] hello.Application                        : Inserting customer record for Josh Bloch\n2015-06-19 10:58:31.220  INFO 67731 --- [           main] hello.Application                        : Inserting customer record for Josh Long\n2015-06-19 10:58:31.230  INFO 67731 --- [           main] hello.Application                        : Querying for customer records where first_name = 'Josh':\n2015-06-19 10:58:31.242  INFO 67731 --- [           main] hello.Application                        : Customer[id=3, firstName='Josh', lastName='Bloch']\n2015-06-19 10:58:31.242  INFO 67731 --- [           main] hello.Application                        : Customer[id=4, firstName='Josh', lastName='Long']\n2015-06-19 10:58:31.244  INFO 67731 --- [           main] hello.Application                        : Started Application in 1.693 seconds (JVM running for 2.054)", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to connect to a JDBC database", "url": "http://www.codejava.net/java-se/jdbc/connect-to-a-database-with-jdbc", "url position": 41, "segments": [{"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class ConnectJDBC3 {\n    public static void main(String[] args) {\n        String databaseURL = \"jdbc:mysql://localhost:3306/test\";\n        String user = \"user\";\n        String password = \"password\";\n        Connection conn = null;\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            conn = DriverManager.getConnection(databaseURL, user, password);\n            if (conn != null) {\n                System.out.println(\"Connected to the database\");\n            }\n        } catch (ClassNotFoundException ex) {\n            System.out.println(\"Could not find database driver class\");\n            ex.printStackTrace();\n        } catch (SQLException ex) {\n            System.out.println(\"An error occurred. Maybe user/password is invalid\");\n            ex.printStackTrace();\n        } finally {\n            if (conn != null) {\n                try {\n                    conn.close();\n                } catch (SQLException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        }\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DBConnect1 {\n    public static void main(String[] args) {\n        String databaseURL = \"jdbc:mysql://localhost:3306/test?user=root&password=root123\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(databaseURL);\n            if (conn != null) {\n                System.out.println(\"Connected to the database\");\n            }\n        } catch (SQLException ex) {\n            System.out.println(\"An error occurred. Maybe user/password is invalid\");\n            ex.printStackTrace();\n        } finally {\n            if (conn != null) {\n                try {\n                    conn.close();\n                } catch (SQLException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        }\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\npublic class DBConnect2 {\n    public static void main(String[] args) {\n        String databaseURL = \"jdbc:mysql://localhost:3306/test\";\n        Connection conn = null;\n        try {\n            Properties props = new Properties();\n            props.put(\"user\", \"root\");\n            props.put(\"password\", \"root123\");\n            conn = DriverManager.getConnection(databaseURL, props);\n            if (conn != null) {\n                System.out.println(\"Connected to the database\");\n            }\n        } catch (SQLException ex) {\n            System.out.println(\"An error occurred. Maybe user/password is invalid\");\n            ex.printStackTrace();\n        } finally {\n            if (conn != null) {\n                try {\n                    conn.close();\n                } catch (SQLException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        }\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DBConnect3 {\n    public static void main(String[] args) {\n        String databaseURL = \"jdbc:mysql://localhost:3306/test\";\n        String user = \"root\";\n        String password = \"root123\";\n        Connection conn = null;\n        try {\n            conn = DriverManager.getConnection(databaseURL, user, password);\n            if (conn != null) {\n                System.out.println(\"Connected to the database\");\n            }\n        } catch (SQLException ex) {\n            System.out.println(\"An error occurred. Maybe user/password is invalid\");\n            ex.printStackTrace();\n        } finally {\n            if (conn != null) {\n                try {\n                    conn.close();\n                } catch (SQLException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        }\n    }\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to connect to a JDBC database", "url": "https://www.progress.com/blogs/jdbc-tutorial-connecting-to-your-database-using-jdbc", "url position": 31, "segments": []},
{"query": "How to connect to a JDBC database", "url": "https://www.javatpoint.com/example-to-connect-to-the-mysql-database", "url position": 4, "segments": []}
]