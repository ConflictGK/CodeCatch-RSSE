{
   "num_snippets_per_cluster": [
      10,
      9,
      9,
      8,
      8,
      7
   ],
   "num_clusters": 6,
   "clusters": [
      {
         "cluster_snippets": [
            {
               "Cluster": 0,
               "Code": "class Demo{  \r\n\r\n   final int MAX_VALUE=99;\r\n   void myMethod(){  \r\n      MAX_VALUE=101;\r\n   }  \r\n   public static void main(String args[]){  \r\n      Demo obj=new  Demo();  \r\n      obj.myMethod();  \r\n   }  \r\n}",
               "LOC": 11,
               "Url": "https://beginnersbook.com/2014/07/final-keyword-java-final-variable-method-class/",
               "Score": 1.0,
               "API_Weights": 3.4682422566,
               "API_Qualified_Names": {},
               "Url_Position": 36,
               "In_Page_Order": 1,
               "Num_API_Calls": 2,
               "Dist_Center": 0.0651958323,
               "MethodInvocations": [
                  "Demo.__init__",
                  "Demo.myMethod"
               ]
            },
            {
               "Cluster": 0,
               "Code": "class Demo{  \r\n   //Blank final variable\r\n   final int MAX_VALUE;\r\n\t \r\n   Demo(){\r\n      //It must be initialized in constructor\r\n      MAX_VALUE=100;\r\n   }\r\n   void myMethod(){  \r\n      System.out.println(MAX_VALUE);\r\n   }  \r\n   public static void main(String args[]){  \r\n      Demo obj=new  Demo();  \r\n      obj.myMethod();  \r\n   }  \r\n}",
               "LOC": 16,
               "Url": "https://beginnersbook.com/2014/07/final-keyword-java-final-variable-method-class/",
               "Score": 1.0,
               "API_Weights": 3.4682422566,
               "API_Qualified_Names": {},
               "Url_Position": 36,
               "In_Page_Order": 3,
               "Num_API_Calls": 2,
               "Dist_Center": 0.0651958323,
               "MethodInvocations": [
                  "Demo.__init__",
                  "Demo.myMethod"
               ]
            },
            {
               "Cluster": 0,
               "Code": "class Demo {\n\n    private Collaborator collaborator = new Collaborator();\n\n    public Collaborator getCollaborator() {\n        return collaborator;\n    }\n\n    public static void main(String... args) {\n        Demo demo = new Demo();\n        Collaborator collaborator = demo.getCollaborator();\n    }\n}\n",
               "LOC": 14,
               "Url": "http://antrix.net/posts/2012/java-lazy-initialization/",
               "Score": 0.827007661,
               "API_Weights": 2.7670386204,
               "API_Qualified_Names": {},
               "Url_Position": 13,
               "In_Page_Order": 1,
               "Num_API_Calls": 2,
               "Dist_Center": 0.1048625757,
               "MethodInvocations": [
                  "Demo.__init__",
                  "Demo.getCollaborator"
               ]
            },
            {
               "Cluster": 0,
               "Code": "class StudentData{  \r\n   //Blank final variable\r\n   final int ROLL_NO;\r\n\t \r\n   StudentData(int rnum){\r\n      //It must be initialized in constructor\r\n      ROLL_NO=rnum;\r\n   }\r\n   void myMethod(){  \r\n      System.out.println(\"Roll no is:\"+ROLL_NO);\r\n   }  \r\n   public static void main(String args[]){  \r\n      StudentData obj=new  StudentData(1234);  \r\n      obj.myMethod();  \r\n   }  \r\n}",
               "LOC": 16,
               "Url": "https://beginnersbook.com/2014/07/final-keyword-java-final-variable-method-class/",
               "Score": 0.5293198072,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {},
               "Url_Position": 36,
               "In_Page_Order": 5,
               "Num_API_Calls": 2,
               "Dist_Center": 0.1731217124,
               "MethodInvocations": [
                  "StudentData.myMethod",
                  "StudentData.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "/** \n * A queue. One thread calls push() to put an object on the queue. \n * Another calls pop() to get an object off the queue. If there is no\n * data, pop() waits until there is some, using wait()/notify(). \n * wait() and notify() must be used within a synchronized method or\n * block. \n */\nimport java.util.*;\n\npublic class Queue {\n  LinkedList q = new LinkedList();  // Where objects are stored\n  public synchronized void push(Object o) {\n    q.add(o);      // Append the object to the end of the list\n    this.notify(); // Tell waiting threads that data is ready\n  }\n  public synchronized Object pop() {\n    while(q.size() == 0) {\n      try { this.wait(); }\n      catch (InterruptedException e) { /* Ignore this exception */ }\n    }\n    return q.remove(0);\n  }\n}",
               "LOC": 23,
               "Url": "https://docstore.mik.ua/orelly/java-ent/jnut/ch04_08.htm",
               "Score": 0.0790686488,
               "API_Weights": 1.7320508076,
               "API_Qualified_Names": {
                  "LinkedList.add": "java.util.LinkedList.add",
                  "LinkedList.size": "java.util.LinkedList.size",
                  "LinkedList.remove": "java.util.LinkedList.remove"
               },
               "Url_Position": 33,
               "In_Page_Order": 8,
               "Num_API_Calls": 3,
               "Dist_Center": 0.2763632622,
               "MethodInvocations": [
                  "LinkedList.size",
                  "LinkedList.add",
                  "LinkedList.remove"
               ]
            },
            {
               "Cluster": 0,
               "Code": "<pre class=\"prettyprint\">public class NoSuchElementExceptionDemo{\n\n    public static void main(String args[]) {\n        Hashtable sampleMap = new Hashtable();\n        Enumeration enumeration = sampleMap.elements();\n        enumeration.nextElement();  //java.util.NoSuchElementExcepiton here because enumeration is empty\n    }\n}\n\nOutput:\nException in thread \"main\" java.util.NoSuchElementException: Hashtable Enumerator\n        at java.util.Hashtable$EmptyEnumerator.nextElement(Hashtable.java:1084)\n        at test.ExceptionTest.main(NoSuchElementExceptionDemo.java:23)\n</pre>",
               "LOC": 14,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 0.0706619292,
               "API_Weights": 1.7320508076,
               "API_Qualified_Names": {
                  "Hashtable.__init__": "java.util.Hashtable.__init__",
                  "Hashtable.elements": "java.util.Hashtable.elements",
                  "Enumeration.nextElement": "java.util.Enumeration.nextElement"
               },
               "Url_Position": 31,
               "In_Page_Order": 55,
               "Num_API_Calls": 3,
               "Dist_Center": 0.2782909036,
               "MethodInvocations": [
                  "Hashtable.__init__",
                  "Hashtable.elements",
                  "Enumeration.nextElement"
               ]
            },
            {
               "Cluster": 0,
               "Code": "public class DataLoader {\n    private Stuff data;\n    private final CountDownLatch latch = new CountDownLatch(1);\n    // start the thread, called early in main()\n    public void init() {\n        // you pass in this so it can call setData\n        DataRetrievalThread t = new DataRetrievalThread(this);\n        t.start();\n    }\n    // called from the DataRetrievalThread\n    public void setData(Stuff data) {\n        this.data = data;\n        latch.countDown();\n    }\n    public Stuff getData() {\n        if (data == null) {\n            latch.await();\n        }\n        return data;\n    }\n}\n",
               "LOC": 22,
               "Url": "https://stackoverflow.com/questions/16095965/initializing-a-thread-in-a-static-block",
               "Score": 0.0,
               "API_Weights": 1.9975055534,
               "API_Qualified_Names": {
                  "CountDownLatch.countDown": "java.util.concurrent.CountDownLatch.countDown",
                  "CountDownLatch.await": "java.util.concurrent.CountDownLatch.await"
               },
               "Url_Position": 3,
               "In_Page_Order": 1,
               "Num_API_Calls": 4,
               "Dist_Center": 0.2944935206,
               "MethodInvocations": [
                  "DataRetrievalThread.__init__",
                  "CountDownLatch.countDown",
                  "CountDownLatch.await",
                  "DataRetrievalThread.start"
               ]
            }
         ],
         "avg_cluster_api_weights": 2.3684776949295427,
         "top_apis_by_cluster": [
            "demo.__init__",
            "demo.mymethod",
            "demo.getcollaborator",
            "studentdata.mymethod",
            "studentdata.__init__",
            "hashtable.__init__",
            "linkedlist.add",
            "linkedlist.remove"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 1,
               "Code": "public class Main {\n    public String getName() {\n        return \"Main\";\n    }\n\n    public String getId() {\n        return \"My-id\";\n    }\n\n    public String getState() {\n        return \"Good\";\n    }\n\n    public void printMe() {\n        new Thread() {\n            @Override\n            public void run() {\n                System.out.println(\"name: \" + getName() + \", id:\" + getId() + \", state:\" + getState());\n            }\n        }.start();\n    }\n\n    public static void main(String[] args) {\n        new Main().printMe();\n    }\n}\n",
               "LOC": 27,
               "Url": "https://stackoverflow.com/questions/32325627/initialization-of-threads-in-java",
               "Score": 1.0,
               "API_Weights": 3.2646350421,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Main.__init__": "com.tizianobasile.androiddrawablefactory.gui.Main.__init__"
               },
               "Url_Position": 1,
               "In_Page_Order": 1,
               "Num_API_Calls": 2,
               "Dist_Center": 0.0775847128,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Main.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "// Set a thread t to lower-than-normal priority\nt.setPriority(Thread.NORM_PRIORITY-1);\n\n// Set a thread to lower priority than the current thread\nt.setPriority(Thread.currentThread().getPriority() - 1);\n\n// Threads that don't pause for I/O should explicitly yield the CPU \n// to give other threads with the same priority a chance to run. \nThread t = new Thread(new Runnable() {\n  public void run() {\n    for(int i = 0; i < data.length; i++) {  // Loop through a bunch of data\n      process(data[i]);                     // Process it\n      if ((i % 10) == 0)                    // But after every 10 iterations,\n        Thread.yield();                     // pause to let other threads run. \n    }\n  }\n});",
               "LOC": 17,
               "Url": "https://docstore.mik.ua/orelly/java-ent/jnut/ch04_08.htm",
               "Score": 0.7746499495,
               "API_Weights": 4.3369845043,
               "API_Qualified_Names": {
                  "Runnable.__init__": "org.jboss.arquillian.container.weld.ee.embedded_1_1.mock.TestContainer.Runner.Runnable.__init__",
                  "Thread.__init__": "java.lang.Thread.__init__"
               },
               "Url_Position": 33,
               "In_Page_Order": 2,
               "Num_API_Calls": 2,
               "Dist_Center": 0.1360416081,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Runnable.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "public class ThreadMain {\n\n    public static void main(String[] args) {\n        //Main thread\n        System.out.println(Thread.currentThread().getName());\n\n        //Task 1 thread\n        //Using runnable\n        Thread task1 = new Thread(new Task1());\n        task1.start();\n\n        //Task 2 thread\n        //By extending Thread class\n        Thread task2 = new Task2();\n        task2.start();\n\n        //Other way is using inner class\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread().getName());\n            }\n        });\n        thread.start();\n    }\n}\n\nclass Task1 implements Runnable {\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n\nclass Task2 extends Thread {\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n",
               "LOC": 43,
               "Url": "https://stackoverflow.com/questions/32325627/initialization-of-threads-in-java",
               "Score": 0.5981771433,
               "API_Weights": 6.1256317824,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start",
                  "Runnable.__init__": "org.jboss.arquillian.container.weld.ee.embedded_1_1.mock.TestContainer.Runner.Runnable.__init__"
               },
               "Url_Position": 1,
               "In_Page_Order": 4,
               "Num_API_Calls": 4,
               "Dist_Center": 0.1818195093,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Task1.__init__",
                  "Thread.start",
                  "Runnable.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "List list;  // A long list of objects to be sorted; initialized elsewhere\n\n// Define a thread to sort the list: lower its priority, so it only runs \n// when the current thread is waiting for I/O, and then start it running. \nThread sorter = new BackgroundSorter(list);               // Defined earlier\nsorter.setPriority(Thread.currentThread.getPriority()-1); // Lower priority\nsorter.start();                                           // Start sorting\n\n// Meanwhile, in this original thread, read data from a file\nbyte[] data = readData();  // Method defined elsewhere\n\n// Before we can proceed, we need the list to be fully sorted, so\n// we've got to wait for the sorter thread to exit, if it hasn't already. \nsorter.join();",
               "LOC": 14,
               "Url": "https://docstore.mik.ua/orelly/java-ent/jnut/ch04_08.htm",
               "Score": 0.4393111761,
               "API_Weights": 4.740665927,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start",
                  "Thread.join": "java.lang.Thread.join"
               },
               "Url_Position": 33,
               "In_Page_Order": 5,
               "Num_API_Calls": 4,
               "Dist_Center": 0.2230301111,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.join",
                  "Thread.start",
                  "Thread.setPriority"
               ]
            },
            {
               "Cluster": 1,
               "Code": "// When two threads try to lock two objects, deadlock can occur unless\n// they always request the locks in the same order.\nfinal Object resource1 = new Object();   // Here are two objects to lock\nfinal Object resource2 = new Object();\nThread t1 = new Thread(new Runnable() {  // Locks resource1 then resource2\n  public void run() {\n    synchronized(resource1) { \n      synchronized(resource2) { compute(); }\n    }\n  }\n});\n\nThread t2 = new Thread(new Runnable() {  // Locks resource2 then resource1\n  public void run() {\n    synchronized(resource2) { \n      synchronized(resource1) { compute(); }\n    }\n  }\n});\n\nt1.start();  // Locks resource1\nt2.start();  // Locks resource2 and now neither thread can progress!",
               "LOC": 22,
               "Url": "https://docstore.mik.ua/orelly/java-ent/jnut/ch04_08.htm",
               "Score": 0.3861913508,
               "API_Weights": 6.1256317824,
               "API_Qualified_Names": {
                  "Object.__init__": "java.lang.Object.__init__",
                  "Runnable.__init__": "org.jboss.arquillian.container.weld.ee.embedded_1_1.mock.TestContainer.Runner.Runnable.__init__",
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 33,
               "In_Page_Order": 7,
               "Num_API_Calls": 4,
               "Dist_Center": 0.2368096512,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Object.__init__",
                  "Thread.start",
                  "Runnable.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "MyRunnableThreadmyRunnable = new MyRunnableThread ();\r\nThread thread = new Thread(myRunnable); // Pass your Runnable to the Thread\r\n",
               "LOC": 3,
               "Url": "https://www.w3resource.com/java-tutorial/java-defining-instantiating-and-starting-threads.php",
               "Score": 0.3053745137,
               "API_Weights": 3.2646350421,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__"
               },
               "Url_Position": 6,
               "In_Page_Order": 5,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2577739305,
               "MethodInvocations": [
                  "Thread.__init__",
                  "MyRunnableThread.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "<pre class=\"prettyprint\">import java.io.DataInputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ExceptionExample {\n\tpublic void testMethod1(){\n\t\tFile file = new File(\"test.txt\");\n\t\tDataInputStream dataInputStream =  null;\n\t\ttry{\n\t\t\tdataInputStream = new DataInputStream(new FileInputStream(file));\n\t\t\twhile(true){\n\t\t\t\tdataInputStream.readInt();\t\n\t\t\t}\t\t\t\n\t\t}catch (EOFException e){\t\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t\tcatch (IOException e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tif (dataInputStream != null){\n\t\t\t\t\tdataInputStream.close();\n\t\t\t\t}\n\t\t\t}catch (IOException e){\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tExceptionExample instance1 = new ExceptionExample();\n\t\tinstance1.testMethod1();\n\t}\n}\n</pre>",
               "LOC": 37,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 0.2736116772,
               "API_Weights": 2.6442430541,
               "API_Qualified_Names": {
                  "File.__init__": "java.io.File.__init__",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "DataInputStream.__init__": "java.io.DataInputStream.__init__",
                  "DataInputStream.readInt": "java.io.DataInputStream.readInt",
                  "DataInputStream.close": "java.io.DataInputStream.close"
               },
               "Url_Position": 31,
               "In_Page_Order": 48,
               "Num_API_Calls": 7,
               "Dist_Center": 0.2660133642,
               "MethodInvocations": [
                  "File.__init__",
                  "ExceptionExample.__init__",
                  "FileInputStream.__init__",
                  "ExceptionExample.testMethod1",
                  "DataInputStream.close",
                  "DataInputStream.__init__",
                  "DataInputStream.readInt"
               ]
            },
            {
               "Cluster": 1,
               "Code": "class Demo {\n\n    private Collaborator collaborator;\n\n    public Collaborator getCollaborator() {\n        if (collaborator == null) {\n            synchronized(this) {\n                if (collaborator == null) {\n                    // psuedo code now\n                    associate = new Associate();\n                    collaborator = new Collaborator();\n                }\n            }\n        }\n        return collaborator;\n    }\n}\n",
               "LOC": 18,
               "Url": "http://antrix.net/posts/2012/java-lazy-initialization/",
               "Score": 1.110223025e-16,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {},
               "Url_Position": 13,
               "In_Page_Order": 6,
               "Num_API_Calls": 2,
               "Dist_Center": 0.3369895594,
               "MethodInvocations": [
                  "Associate.__init__",
                  "Collaborator.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 3.989580087114558,
         "top_apis_by_cluster": [
            "thread.__init__",
            "runnable.__init__",
            "thread.start",
            "myrunnablethread.__init__",
            "main.__init__",
            "associate.__init__",
            "collaborator.__init__",
            "task1.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 2,
               "Code": "<pre class=\"prettyprint\">public class mod_MyMod extends BaseMod\npublic String Version()\n{\n     return \"1.2_02\";\n}\npublic void AddRecipes(CraftingManager recipes)\n{\n   recipes.addRecipe(new ItemStack(Item.diamond), new Object[] {\n      \"#\", Character.valueOf('#'), Block.dirt\n   });\n}\n</pre>",
               "LOC": 12,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 1.0,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {
                  "ItemStack.__init__": "net.minecraft.item.ItemStack.__init__"
               },
               "Url_Position": 31,
               "In_Page_Order": 9,
               "Num_API_Calls": 2,
               "Dist_Center": 0.1497172969,
               "MethodInvocations": [
                  "ItemStack.__init__",
                  "CraftingManager.addRecipe"
               ]
            },
            {
               "Cluster": 2,
               "Code": "class XYZ{  \r\n   final void demo(){\r\n      System.out.println(\"XYZ Class Method\");\r\n   }  \r\n}  \r\n\t     \r\nclass ABC extends XYZ{  \r\n   public static void main(String args[]){  \r\n      ABC obj= new ABC();  \r\n      obj.demo();  \r\n   }  \r\n}",
               "LOC": 12,
               "Url": "https://beginnersbook.com/2014/07/final-keyword-java-final-variable-method-class/",
               "Score": 0.7503198789,
               "API_Weights": 4.2426406871,
               "API_Qualified_Names": {},
               "Url_Position": 36,
               "In_Page_Order": 10,
               "Num_API_Calls": 2,
               "Dist_Center": 0.199204662,
               "MethodInvocations": [
                  "ABC.__init__",
                  "ABC.demo"
               ]
            },
            {
               "Cluster": 2,
               "Code": "final class XYZ{  \r\n}  \r\n\t     \r\nclass ABC extends XYZ{  \r\n   void demo(){\r\n      System.out.println(\"My Method\");\r\n   }  \r\n   public static void main(String args[]){  \r\n      ABC obj= new ABC(); \r\n      obj.demo();\r\n   }  \r\n}",
               "LOC": 12,
               "Url": "https://beginnersbook.com/2014/07/final-keyword-java-final-variable-method-class/",
               "Score": 0.7503198789,
               "API_Weights": 4.2426406871,
               "API_Qualified_Names": {},
               "Url_Position": 36,
               "In_Page_Order": 12,
               "Num_API_Calls": 2,
               "Dist_Center": 0.199204662,
               "MethodInvocations": [
                  "ABC.__init__",
                  "ABC.demo"
               ]
            },
            {
               "Cluster": 2,
               "Code": "class XYZ{  \r\n   final void demo(){\r\n      System.out.println(\"XYZ Class Method\");\r\n   }  \r\n}  \r\n\t     \r\nclass ABC extends XYZ{  \r\n   void demo(){\r\n      System.out.println(\"ABC Class Method\");\r\n   }  \r\n\t     \r\n   public static void main(String args[]){  \r\n      ABC obj= new ABC();  \r\n      obj.demo();  \r\n   }  \r\n}",
               "LOC": 16,
               "Url": "https://beginnersbook.com/2014/07/final-keyword-java-final-variable-method-class/",
               "Score": 0.7503198789,
               "API_Weights": 4.2426406871,
               "API_Qualified_Names": {},
               "Url_Position": 36,
               "In_Page_Order": 9,
               "Num_API_Calls": 2,
               "Dist_Center": 0.199204662,
               "MethodInvocations": [
                  "ABC.__init__",
                  "ABC.demo"
               ]
            },
            {
               "Cluster": 2,
               "Code": "// CalcPI1.java\nclass CalcPI1\n{\n   public static void main (String [] args)\n   {\n      MyThread mt = new MyThread ();\n      mt.start ();\n      try\n      {\n          Thread.sleep (10); // Sleep for 10 milliseconds\n      }\n      catch (InterruptedException e)\n      {\n      }\n      System.out.println (\"pi = \" + mt.pi);\n   }\n}\nclass MyThread extends Thread\n{\n   boolean negative = true;\n   double pi; // Initializes to 0.0, by default\n   public void run ()\n   {\n      for (int i = 3; i < 100000; i += 2)\n      {\n           if (negative)\n               pi -= (1.0 / i);\n           else\n               pi += (1.0 / i);\n           negative = !negative;\n      }\n      pi += 1.0;\n      pi *= 4.0;\n      System.out.println (\"Finished calculating PI\");\n   }\n}\n",
               "LOC": 37,
               "Url": "https://www.javaworld.com/article/2074217/java-concurrency/java-101--understanding-java-threads--part-1--introducing-threads-and-runnables.html",
               "Score": 0.5949659777,
               "API_Weights": 4.2426406871,
               "API_Qualified_Names": {},
               "Url_Position": 9,
               "In_Page_Order": 4,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2299962812,
               "MethodInvocations": [
                  "MyThread.start",
                  "MyThread.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "// ThreadDemo.java\nclass ThreadDemo\n{\n   public static void main (String [] args)\n   {\n      MyThread mt = new MyThread ();\n      mt.start ();\n      for (int i = 0; i < 50; i++)\n           System.out.println (\"i = \" + i + \", i * i = \" + i * i);\n   }\n}\nclass MyThread extends Thread\n{\n   public void run ()\n   {\n      for (int count = 1, row = 1; row < 20; row++, count++)\n      {\n           for (int i = 0; i < count; i++)\n                System.out.print ('*');\n           System.out.print ('\\n');\n      }\n   }\n}\n",
               "LOC": 24,
               "Url": "https://www.javaworld.com/article/2074217/java-concurrency/java-101--understanding-java-threads--part-1--introducing-threads-and-runnables.html",
               "Score": 0.5949659777,
               "API_Weights": 4.2426406871,
               "API_Qualified_Names": {},
               "Url_Position": 9,
               "In_Page_Order": 1,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2299962812,
               "MethodInvocations": [
                  "MyThread.start",
                  "MyThread.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "// NameThatThread.java\nclass NameThatThread\n{\n   public static void main (String [] args)\n   {\n      MyThread mt;\n      if (args.length == 0)\n          mt = new MyThread ();\n      else\n          mt = new MyThread (args [0]);\n      mt.start ();\n   }\n}\nclass MyThread extends Thread\n{\n   MyThread ()\n   {\n      // The compiler creates the byte code equivalent of super ();\n   }\n   MyThread (String name)\n   {\n      super (name); // Pass name to Thread superclass\n   }\n   public void run ()\n   {\n      System.out.println (\"My name is: \" + getName ());\n   }\n}\n",
               "LOC": 29,
               "Url": "https://www.javaworld.com/article/2074217/java-concurrency/java-101--understanding-java-threads--part-1--introducing-threads-and-runnables.html",
               "Score": 0.5949659777,
               "API_Weights": 4.2426406871,
               "API_Qualified_Names": {},
               "Url_Position": 9,
               "In_Page_Order": 2,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2299962812,
               "MethodInvocations": [
                  "MyThread.start",
                  "MyThread.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "import java.util.Objects;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\n\n/**\n * When execute is called, it is guaranteed that the input function will be applied exactly once. \n * Further it's also guaranteed that execute will return only when the input function was applied\n * by the calling thread or some other thread OR if the calling thread is interrupted.\n */\n\npublic class OneTimeExecutor<T, R> {  \n  private final Function<T, R> function;\n  private final AtomicBoolean preGuard;\n  private final CountDownLatch postGuard;\n  private final AtomicReference<R> value;\n\n  public OneTimeExecutor(Function<T, R> function) {\n    Objects.requireNonNull(function, \"function cannot be null\");\n    this.function = function;\n    this.preGuard = new AtomicBoolean(false);\n    this.postGuard = new CountDownLatch(1);\n    this.value = new AtomicReference<R>();\n  }\n\n  public R execute(T input) throws InterruptedException {\n    if (preGuard.compareAndSet(false, true)) {\n      try {\n        value.set(function.apply(input));\n      } finally {\n        postGuard.countDown();\n      }\n    } else if (postGuard.getCount() != 0) {\n      postGuard.await();\n    }\n    return value();\n  }\n\n  public boolean executed() {\n    return (preGuard.get() && postGuard.getCount() == 0);\n  }\n\n  public R value() {\n    return value.get();\n  }\n\n}  \n",
               "LOC": 49,
               "Url": "https://stackoverflow.com/questions/8297705/how-to-implement-thread-safe-lazy-initialization",
               "Score": 0.3739214822,
               "API_Weights": 3.314310891,
               "API_Qualified_Names": {
                  "AtomicBoolean.__init__": "java.util.concurrent.atomic.AtomicBoolean.__init__",
                  "CountDownLatch.__init__": "java.util.concurrent.CountDownLatch.__init__",
                  "AtomicReference.__init__": "java.util.concurrent.atomic.AtomicReference.__init__",
                  "AtomicBoolean.compareAndSet": "java.util.concurrent.atomic.AtomicBoolean.compareAndSet",
                  "Function.apply": "com.google.common.base.Function.apply",
                  "CountDownLatch.countDown": "java.util.concurrent.CountDownLatch.countDown",
                  "CountDownLatch.getCount": "java.util.concurrent.CountDownLatch.getCount",
                  "CountDownLatch.await": "java.util.concurrent.CountDownLatch.await",
                  "R": "org.docx4j.wml.R.R"
               },
               "Url_Position": 4,
               "In_Page_Order": 6,
               "Num_API_Calls": 11,
               "Dist_Center": 0.2738079776,
               "MethodInvocations": [
                  "CountDownLatch.await",
                  "R.get",
                  "AtomicBoolean.__init__",
                  "CountDownLatch.getCount",
                  "R.set",
                  "CountDownLatch.countDown",
                  "R",
                  "CountDownLatch.__init__",
                  "AtomicBoolean.compareAndSet",
                  "Function.apply",
                  "AtomicReference.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "import javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n \npublic class HelloWorld extends Application {\n    public static void main(String[] args) {\n        launch(args);\n    }\n    \n    @Override\n    public void start(Stage primaryStage) {\n        primaryStage.setTitle(\"Hello World!\");\n        Button btn = new Button();\n        btn.setText(\"Say 'Hello World'\");\n        btn.setOnAction(new EventHandler<ActionEvent>() {\n \n            @Override\n            public void handle(ActionEvent event) {\n                System.out.println(\"Hello World!\");\n            }\n        });\n        \n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 300, 250));\n        primaryStage.show();\n    }\n}",
               "LOC": 31,
               "Url": "https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html",
               "Score": 0.0,
               "API_Weights": 3.1588272552,
               "API_Qualified_Names": {
                  "Button.__init__": "org.spoutcraft.api.gui.Button.__init__",
                  "Button.setText": "android.widget.Button.setText",
                  "EventHandler.__init__": "javafx.event.EventHandler.__init__",
                  "Scene.__init__": "javafx.scene.Scene.__init__",
                  "Stage.setScene": "javafx.stage.Stage.setScene",
                  "Stage.show": "javafx.stage.Stage.show"
               },
               "Url_Position": 16,
               "In_Page_Order": 3,
               "Num_API_Calls": 10,
               "Dist_Center": 0.3479203612,
               "MethodInvocations": [
                  "Stage.show",
                  "Scene.__init__",
                  "Stage.setScene",
                  "Button.setOnAction",
                  "StackPane.__init__",
                  "Button.__init__",
                  "Button.setText",
                  "StackPane.getChildren",
                  "Stage.setTitle",
                  "EventHandler.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 3.7047995368084066,
         "top_apis_by_cluster": [
            "abc.__init__",
            "abc.demo",
            "mythread.start",
            "mythread.__init__",
            "itemstack.__init__",
            "craftingmanager.addrecipe",
            "button.settext",
            "stackpane.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 3,
               "Code": "// SynchronizedFactory.java\nimport java.util.concurrent.atomic.*;\n\nclass SyncFactory implements HasID {\n  private final int id;\n  private SyncFactory(SharedArg sa) {\n    id = sa.get();\n  }\n  @Override\n  public int getID() { return id; }\n  public static synchronized\n  SyncFactory factory(SharedArg sa) {\n    return new SyncFactory(sa);\n  }\n}\n\npublic class SynchronizedFactory {\n  public static void main(String[] args) {\n    Unsafe unsafe = new Unsafe();\n    IDChecker.test(() ->\n      SyncFactory.factory(unsafe));\n  }\n}\n/* Output:\n*/\n",
               "LOC": 26,
               "Url": "http://bruceeckel.github.io/2017/01/13/constructors-are-not-thread-safe/",
               "Score": 1.0,
               "API_Weights": 3.6041779464,
               "API_Qualified_Names": {},
               "Url_Position": 14,
               "In_Page_Order": 8,
               "Num_API_Calls": 3,
               "Dist_Center": 0.067454091,
               "MethodInvocations": [
                  "SharedArg.get",
                  "SyncFactory.__init__",
                  "Unsafe.__init__"
               ]
            },
            {
               "Cluster": 3,
               "Code": "// SynchronizedConstructor.java\nimport java.util.concurrent.atomic.*;\n\nclass SyncConstructor implements HasID {\n  private final int id;\n  private static Object constructorLock = new Object();\n  public SyncConstructor(SharedArg sa) {\n    synchronized(constructorLock) {\n      id = sa.get();\n    }\n  }\n  @Override\n  public int getID() { return id; }\n}\n\npublic class SynchronizedConstructor {\n  public static void main(String[] args) {\n    Unsafe unsafe = new Unsafe();\n    IDChecker.test(() -> new SyncConstructor(unsafe));\n  }\n}\n/* Output:\n*/\n",
               "LOC": 24,
               "Url": "http://bruceeckel.github.io/2017/01/13/constructors-are-not-thread-safe/",
               "Score": 0.8346746121,
               "API_Weights": 3.6041779464,
               "API_Qualified_Names": {},
               "Url_Position": 14,
               "In_Page_Order": 7,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1199201194,
               "MethodInvocations": [
                  "SharedArg.get",
                  "SyncConstructor.__init__",
                  "Unsafe.__init__"
               ]
            },
            {
               "Cluster": 3,
               "Code": "<pre class=\"prettyprint\">@Override\nprotected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {\ntry {\nbyte[] encoded = key.getEncoded();\nreturn engineDoFinal(encoded, 0, encoded.length);\n} catch (BadPaddingException e) {\nIllegalBlockSizeException newE = new IllegalBlockSizeException();\nnewE.initCause(e);\nthrow newE;\n}\n}\n</pre>",
               "LOC": 12,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 0.7855945941,
               "API_Weights": 1.7320508076,
               "API_Qualified_Names": {
                  "Key.getEncoded": "java.security.Key.getEncoded"
               },
               "Url_Position": 31,
               "In_Page_Order": 44,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1354956679,
               "MethodInvocations": [
                  "Key.getEncoded",
                  "IllegalBlockSizeException.__init__",
                  "IllegalBlockSizeException.initCause"
               ]
            },
            {
               "Cluster": 3,
               "Code": "\n class Pool {\n   private static final int MAX_AVAILABLE = 100;\n   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);\n\n   public Object getItem() throws InterruptedException {\n     available.acquire();\n     return getNextAvailableItem();\n   }\n\n   public void putItem(Object x) {\n     if (markAsUnused(x))\n       available.release();\n   }\n\n   // Not a particularly efficient data structure; just for demo\n\n   protected Object[] items = ... whatever kinds of items being managed\n   protected boolean[] used = new boolean[MAX_AVAILABLE];\n\n   protected synchronized Object getNextAvailableItem() {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (!used[i]) {\n          used[i] = true;\n          return items[i];\n       }\n     }\n     return null; // not reached\n   }\n\n   protected synchronized boolean markAsUnused(Object item) {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (item == items[i]) {\n          if (used[i]) {\n            used[i] = false;\n            return true;\n          } else\n            return false;\n       }\n     }\n     return false;\n   }\n\n }\n ",
               "LOC": 45,
               "Url": "https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Semaphore.html",
               "Score": 0.6101024213,
               "API_Weights": 1.7320508076,
               "API_Qualified_Names": {
                  "Semaphore.acquire": "java.util.concurrent.Semaphore.acquire",
                  "Object": "static org.apache.camel.component.jms.JmsMessageType.Object.Object",
                  "Semaphore.release": "java.util.concurrent.Semaphore.release"
               },
               "Url_Position": 15,
               "In_Page_Order": 2,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1911881265,
               "MethodInvocations": [
                  "Object",
                  "Semaphore.acquire",
                  "Semaphore.release"
               ]
            },
            {
               "Cluster": 3,
               "Code": "public class LazyLoadDecorator<T> implements InvocationHandler {\n\n    private final Object syncLock = new Object();\n    protected volatile T inner;\n    private Supplier<T> supplier;\n\n    private LazyLoadDecorator(Supplier<T> supplier) {\n        this.supplier = supplier;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        if (inner == null) {\n            synchronized (syncLock) {\n                if (inner == null) {\n                    inner = load();\n                }\n            }\n        }\n        return method.invoke(inner, args);\n    }\n\n    protected T load() {\n        return supplier.get();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T create(Supplier<T> factory, Class<T> clazz) {\n        return (T) Proxy.newProxyInstance(LazyLoadDecorator.class.getClassLoader(),\n                new Class[] {clazz},\n                new LazyLoadDecorator<>(factory));\n    }\n}\n",
               "LOC": 34,
               "Url": "https://stackoverflow.com/questions/8297705/how-to-implement-thread-safe-lazy-initialization",
               "Score": 0.4556376316,
               "API_Weights": 1.7320508076,
               "API_Qualified_Names": {
                  "Method.invoke": "java.lang.reflect.Method.invoke",
                  "Supplier.get": "com.google.common.base.Supplier.get"
               },
               "Url_Position": 4,
               "In_Page_Order": 10,
               "Num_API_Calls": 3,
               "Dist_Center": 0.2402075429,
               "MethodInvocations": [
                  "Method.invoke",
                  "Supplier.get",
                  "LazyLoadDecorator.__init__"
               ]
            },
            {
               "Cluster": 3,
               "Code": "// SharedConstructorArgument.java\nimport java.util.concurrent.atomic.*;\n\ninterface SharedArg {\n  int get();\n}\n\nclass Unsafe implements SharedArg {\n  private int i = 0;\n  public int get() { return i++; }\n}\n\nclass Safe implements SharedArg {\n  private static AtomicInteger counter =\n    new AtomicInteger();\n  public int get() {\n    return counter.getAndAdd(1);\n  }\n}\n\nclass SharedUser implements HasID {\n  private final int id;\n  public SharedUser(SharedArg sa) {\n    id = sa.get();\n  }\n  @Override\n  public int getID() { return id; }\n}\n\npublic class SharedConstructorArgument {\n  public static void main(String[] args) {\n    Unsafe unsafe = new Unsafe();\n    IDChecker.test(() -> new SharedUser(unsafe));\n    Safe safe = new Safe();\n    IDChecker.test(() -> new SharedUser(safe));\n  }\n}\n/* Output:\n0\n*/\n",
               "LOC": 41,
               "Url": "http://bruceeckel.github.io/2017/01/13/constructors-are-not-thread-safe/",
               "Score": 0.4541737353,
               "API_Weights": 4.3888222981,
               "API_Qualified_Names": {
                  "AtomicInteger.getAndAdd": "java.util.concurrent.atomic.AtomicInteger.getAndAdd"
               },
               "Url_Position": 14,
               "In_Page_Order": 6,
               "Num_API_Calls": 5,
               "Dist_Center": 0.2406721105,
               "MethodInvocations": [
                  "Unsafe.__init__",
                  "Safe.__init__",
                  "AtomicInteger.getAndAdd",
                  "SharedUser.__init__",
                  "SharedArg.get"
               ]
            },
            {
               "Cluster": 3,
               "Code": "public final class ConnectionFactory {\n  private static final ThreadLocal<Connection> connectionHolder\n                       = new ThreadLocal<Connection>() {\n   @Override public Connection initialValue() {\n     try {\n       Connection dbConnection =\n           DriverManager.getConnection(\"connection string\");\n       return dbConnection;\n     } catch (SQLException e) {\n       return null;\n     }\n   }\n };\n\n  // Other fields ...\n\n  static {\n    // Other initialization (do not start any threads)\n  }\n\n  public static Connection getConnection() {\n    Connection connection = connectionHolder.get();\n    if (connection == null) {\n      throw new IllegalStateException(\"Error initializing connection\");\n    }\n    return connection;\n  }\n\n  public static void main(String[] args) {\n    // ...\n    Connection connection = getConnection();\n  }\n}\n",
               "LOC": 34,
               "Url": "https://wiki.sei.cmu.edu/confluence/display/java/TSM02-J.+Do+not+use+background+threads+during+class+initialization",
               "Score": 0.2307774169,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {
                  "IllegalStateException.__init__": "org.jboss.weld.exceptions.IllegalStateException.__init__"
               },
               "Url_Position": 10,
               "In_Page_Order": 3,
               "Num_API_Calls": 2,
               "Dist_Center": 0.3115669544,
               "MethodInvocations": [
                  "IllegalStateException.__init__",
                  "ThreadLocal.get"
               ]
            },
            {
               "Cluster": 3,
               "Code": "\n\npublic class HelloWorldAnonymousClasses {\n  \n    interface HelloWorld {\n        public void greet();\n        public void greetSomeone(String someone);\n    }\n  \n    public void sayHello() {\n        \n        class EnglishGreeting implements HelloWorld {\n            String name = \"world\";\n            public void greet() {\n                greetSomeone(\"world\");\n            }\n            public void greetSomeone(String someone) {\n                name = someone;\n                System.out.println(\"Hello \" + name);\n            }\n        }\n      \n        HelloWorld englishGreeting = new EnglishGreeting();\n        \n        HelloWorld frenchGreeting = new HelloWorld() {\n            String name = \"tout le monde\";\n            public void greet() {\n                greetSomeone(\"tout le monde\");\n            }\n            public void greetSomeone(String someone) {\n                name = someone;\n                System.out.println(\"Salut \" + name);\n            }\n        };\n        \n        HelloWorld spanishGreeting = new HelloWorld() {\n            String name = \"mundo\";\n            public void greet() {\n                greetSomeone(\"mundo\");\n            }\n            public void greetSomeone(String someone) {\n                name = someone;\n                System.out.println(\"Hola, \" + name);\n            }\n        };\n        englishGreeting.greet();\n        frenchGreeting.greetSomeone(\"Fred\");\n        spanishGreeting.greet();\n    }\n\n    public static void main(String... args) {\n        HelloWorldAnonymousClasses myApp =\n            new HelloWorldAnonymousClasses();\n        myApp.sayHello();\n    }            \n}\n",
               "LOC": 57,
               "Url": "https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html",
               "Score": 0.0,
               "API_Weights": 2.2360679775,
               "API_Qualified_Names": {
                  "HelloWorld.__init__": "com.google.sitebricks.example.HelloWorld.__init__"
               },
               "Url_Position": 16,
               "In_Page_Order": 1,
               "Num_API_Calls": 5,
               "Dist_Center": 0.3848041906,
               "MethodInvocations": [
                  "HelloWorld.greetSomeone",
                  "HelloWorld.__init__",
                  "HelloWorldAnonymousClasses.__init__",
                  "HelloWorldAnonymousClasses.sayHello",
                  "HelloWorld.greet"
               ]
            }
         ],
         "avg_cluster_api_weights": 2.5554515191817258,
         "top_apis_by_cluster": [
            "sharedarg.get",
            "unsafe.__init__",
            "illegalstateexception.__init__",
            "threadlocal.get",
            "syncfactory.__init__",
            "syncconstructor.__init__",
            "illegalblocksizeexception.__init__",
            "illegalblocksizeexception.initcause"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 4,
               "Code": "<pre class=\"prettyprint\">public static void move()\n{\n    System.out.println(\"What do you want to do?\");\n    Scanner scan = new Scanner(System.in);\n    int userMove = scan.nextInt();\n    return userMove;\n}\n\npublic static void usersMove(String playerName, int gesture)\n{\n    int userMove = move();\n\n    if (userMove == -1)\n    {\n        break;\n    }\n</pre>",
               "LOC": 17,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 1.0,
               "API_Weights": 2.8284271247,
               "API_Qualified_Names": {
                  "Scanner.__init__": "java.util.Scanner.__init__",
                  "Scanner.nextInt": "java.util.Scanner.nextInt"
               },
               "Url_Position": 31,
               "In_Page_Order": 17,
               "Num_API_Calls": 2,
               "Dist_Center": 0.0883624151,
               "MethodInvocations": [
                  "Scanner.nextInt",
                  "Scanner.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "<pre class=\"prettyprint\">public static int move()\n{\n    System.out.println(\"What do you want to do?\");\n    Scanner scan = new Scanner(System.in);\n    int userMove = scan.nextInt();\n    return userMove;\n}\n</pre>",
               "LOC": 8,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 1.0,
               "API_Weights": 2.8284271247,
               "API_Qualified_Names": {
                  "Scanner.__init__": "java.util.Scanner.__init__",
                  "Scanner.nextInt": "java.util.Scanner.nextInt"
               },
               "Url_Position": 31,
               "In_Page_Order": 18,
               "Num_API_Calls": 2,
               "Dist_Center": 0.0883624151,
               "MethodInvocations": [
                  "Scanner.nextInt",
                  "Scanner.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "public class Clock extends Thread {\n  java.text.DateFormat f =      // How to format the time for this locale\n    java.text.DateFormat.getTimeInstance(java.text.DateFormat.MEDIUM);\n  boolean keepRunning = true;\n\n  public Clock() {         // The constructor\n    setDaemon(true);       // Daemon thread: interpreter can exit while it runs\n    start();               // This thread starts itself\n  }\n\n  public void run() {      // The body of the thread\n    while(keepRunning) {   // This thread runs until asked to stop\n      String time = f.format(new java.util.Date()); // Current time\n      System.out.println(time);                     // Print the time\n      try { Thread.sleep(1000); }                   // Wait 1000 milliseconds\n      catch (InterruptedException e) {}             // Ignore this exception \n    }\n  }\n\n  // Ask the thread to stop running\n  public void pleaseStop() { keepRunning = false; }\n}",
               "LOC": 22,
               "Url": "https://docstore.mik.ua/orelly/java-ent/jnut/ch04_08.htm",
               "Score": 0.6560709197,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {
                  "Date.__init__": "java.util.Date.__init__",
                  "DateFormat.format": "java.text.DateFormat.format"
               },
               "Url_Position": 33,
               "In_Page_Order": 3,
               "Num_API_Calls": 2,
               "Dist_Center": 0.1899053129,
               "MethodInvocations": [
                  "DateFormat.format",
                  "Date.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "package com.geeckap.atomicexample;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class AtomicExampleTest\n{\n    private MyObject obj;\n\n    @Before\n    public void setUp()\n    {\n        obj = new MyObject();\n        obj.setWhatImReading( new Book( \"Java 2 From Scratch\" ) );\n    }\n\n    @Test\n    public void testUpdate()\n    {\n        obj.setWhatImReading( new Book( \n                \"Pro Java EE 5 Performance Management and Optimization\" ) );\n        Assert.assertEquals( \"Incorrect book name\", \n                \"Pro Java EE 5 Performance Management and Optimization\", \n                obj.getWhatImReading().getName() );\n    }\n\n}",
               "LOC": 28,
               "Url": "https://www.ibm.com/developerworks/library/j-5things15/index.html",
               "Score": 0.6283352096,
               "API_Weights": 2.0,
               "API_Qualified_Names": {
                  "MyObject.__init__": "org.jbpm.services.task.test.MyObject.__init__",
                  "Book.__init__": "eu.stratosphere.api.java.typeutils.runtime.GenericTypeSerializerTest.Book.__init__"
               },
               "Url_Position": 24,
               "In_Page_Order": 8,
               "Num_API_Calls": 4,
               "Dist_Center": 0.1980941069,
               "MethodInvocations": [
                  "MyObject.setWhatImReading",
                  "Book.__init__",
                  "MyObject.getWhatImReading",
                  "MyObject.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "public class Arbit {\n    public static void main(String[] args) throws Exception{\n        B b1 = new B(\"1\");\n        B b2 = new B(\"2\");\n        B b3 = new B(\"3\");\n        b1.start();\n        b2.start();\n        b3.start();\n        b1.join();\n        b2.join();\n        b3.join();\n    }\n}\n\nclass B extends Thread{\n    B(String s){\n        setName(s);\n    }\n    @Override\n    public void run() {\n\n        try {\n            Thread.sleep(new Random().nextInt(100));\n        } catch (InterruptedException e) {\n        }\n        System.out.println(A.s);\n    }\n}\n\nclass A{\n    static String s = Thread.currentThread().getName();\n}\n",
               "LOC": 33,
               "Url": "https://stackoverflow.com/questions/2469957/is-java-class-initialized-by-the-thread-which-use-it-for-the-first-time",
               "Score": 0.4722808249,
               "API_Weights": 2.0,
               "API_Qualified_Names": {
                  "B.__init__": "jodd.util.testdata.B.__init__",
                  "Random.__init__": "java.util.Random.__init__"
               },
               "Url_Position": 5,
               "In_Page_Order": 1,
               "Num_API_Calls": 4,
               "Dist_Center": 0.2441681825,
               "MethodInvocations": [
                  "B.join",
                  "B.__init__",
                  "Random.__init__",
                  "B.start"
               ]
            },
            {
               "Cluster": 4,
               "Code": "<pre class=\"prettyprint\">@Override public ParcelFileDescriptor openFile(Uri uri,String mode) throws FileNotFoundException {\n  if (uri.toString().startsWith(FILE_PROVIDER_PREFIX)) {\n    int m=ParcelFileDescriptor.MODE_READ_ONLY;\n    if (mode.equalsIgnoreCase(\"rw\"))     m=ParcelFileDescriptor.MODE_READ_WRITE;\n    File f=new File(uri.getPath());\n    ParcelFileDescriptor pfd=ParcelFileDescriptor.open(f,m);\n    return pfd;\n  }\n else {\n    throw new FileNotFoundException(\"Unsupported uri: \" + uri.toString());\n  }\n}\n</pre>",
               "LOC": 13,
               "Url": "https://stackify.com/top-java-software-errors/",
               "Score": 0.3843522346,
               "API_Weights": 1.9982183437,
               "API_Qualified_Names": {
                  "Uri.getPath": "android.net.Uri.getPath",
                  "File.__init__": "java.io.File.__init__",
                  "Uri.toString": "android.net.Uri.toString",
                  "FileNotFoundException.__init__": "java.io.FileNotFoundException.__init__"
               },
               "Url_Position": 31,
               "In_Page_Order": 47,
               "Num_API_Calls": 4,
               "Dist_Center": 0.2701285458,
               "MethodInvocations": [
                  "Uri.getPath",
                  "File.__init__",
                  "Uri.toString",
                  "FileNotFoundException.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "import javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.geometry.Insets;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.stage.Stage;\n\npublic class CustomTextFieldSample extends Application {\n    \n    final static Label label = new Label();\n \n    @Override\n    public void start(Stage stage) {\n        Group root = new Group();\n        Scene scene = new Scene(root, 300, 150);\n        stage.setScene(scene);\n        stage.setTitle(\"Text Field Sample\");\n \n        GridPane grid = new GridPane();\n        grid.setPadding(new Insets(10, 10, 10, 10));\n        grid.setVgap(5);\n        grid.setHgap(5);\n \n        scene.setRoot(grid);\n        final Label dollar = new Label(\"$\");\n        GridPane.setConstraints(dollar, 0, 0);\n        grid.getChildren().add(dollar);\n        \n        final TextField sum = new TextField() {\n            @Override\n            public void replaceText(int start, int end, String text) {\n                if (!text.matches(\"[a-z, A-Z]\")) {\n                    super.replaceText(start, end, text);                     \n                }\n                label.setText(\"Enter a numeric value\");\n            }\n \n            @Override\n            public void replaceSelection(String text) {\n                if (!text.matches(\"[a-z, A-Z]\")) {\n                    super.replaceSelection(text);\n                }\n            }\n        };\n \n        sum.setPromptText(\"Enter the total\");\n        sum.setPrefColumnCount(10);\n        GridPane.setConstraints(sum, 1, 0);\n        grid.getChildren().add(sum);\n        \n        Button submit = new Button(\"Submit\");\n        GridPane.setConstraints(submit, 2, 0);\n        grid.getChildren().add(submit);\n        \n        submit.setOnAction(new EventHandler<ActionEvent>() {\n            @Override\n            public void handle(ActionEvent e) {\n                label.setText(null);\n            }\n        });\n        \n        GridPane.setConstraints(label, 0, 1);\n        GridPane.setColumnSpan(label, 3);\n        grid.getChildren().add(label);\n        \n        scene.setRoot(grid);\n        stage.show();\n    }\n \n    public static void main(String[] args) {\n        launch(args);\n    }\n}",
               "LOC": 77,
               "Url": "https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html",
               "Score": 0.2925739649,
               "API_Weights": 4.4672080132,
               "API_Qualified_Names": {
                  "Group.__init__": "com.taobao.metamorphosis.tools.domain.Group.__init__",
                  "Scene.__init__": "javafx.scene.Scene.__init__",
                  "Stage.setScene": "javafx.stage.Stage.setScene",
                  "Insets.__init__": "java.awt.Insets.__init__",
                  "Label.__init__": "org.objectweb.asm.Label.__init__",
                  "Label.setText": "org.spoutcraft.api.gui.Label.setText",
                  "TextField.__init__": "org.spoutcraft.api.gui.TextField.__init__",
                  "Button.__init__": "org.spoutcraft.api.gui.Button.__init__",
                  "EventHandler.__init__": "javafx.event.EventHandler.__init__",
                  "Stage.show": "javafx.stage.Stage.show"
               },
               "Url_Position": 16,
               "In_Page_Order": 4,
               "Num_API_Calls": 20,
               "Dist_Center": 0.2972255027,
               "MethodInvocations": [
                  "Stage.show",
                  "TextField.setPromptText",
                  "Scene.__init__",
                  "Stage.setScene",
                  "GridPane.__init__",
                  "Insets.__init__",
                  "TextField.__init__",
                  "Button.setOnAction",
                  "GridPane.setVgap",
                  "Label.__init__",
                  "Group.__init__",
                  "GridPane.setPadding",
                  "Scene.setRoot",
                  "GridPane.getChildren",
                  "GridPane.setHgap",
                  "Label.setText",
                  "Button.__init__",
                  "TextField.setPrefColumnCount",
                  "Stage.setTitle",
                  "EventHandler.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "Supplier<Foo> fooSupplier = Suppliers.memoize(new Supplier<Foo>() {\n    public Foo get() {\n        return new Foo();\n    }\n});\n",
               "LOC": 6,
               "Url": "https://stackoverflow.com/questions/8297705/how-to-implement-thread-safe-lazy-initialization",
               "Score": 0.0401656847,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {
                  "Foo.__init__": "org.baeldung.persistence.model.Foo.__init__",
                  "Supplier.__init__": "com.google.common.base.Supplier.__init__"
               },
               "Url_Position": 4,
               "In_Page_Order": 2,
               "Num_API_Calls": 2,
               "Dist_Center": 0.3717474599,
               "MethodInvocations": [
                  "Supplier.__init__",
                  "Foo.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "// IDChecker.java\nimport java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\nimport java.util.concurrent.*;\nimport com.google.common.collect.Sets;\n\npublic class IDChecker {\n  public static int SIZE = 100_000;\n  static class MakeObjects\n  implements Supplier<List<Integer>> {\n    private Supplier<HasID> gen;\n    public MakeObjects(Supplier<HasID> gen) {\n      this.gen = gen;\n    }\n    @Override\n    public List<Integer> get() {\n      return\n        Stream.generate(gen)\n          .limit(SIZE)\n          .map(HasID::getID)\n          .collect(Collectors.toList());\n    }\n  }\n  public static void test(Supplier<HasID> gen) {\n    CompletableFuture<List<Integer>>\n      groupA = CompletableFuture\n        .supplyAsync(new MakeObjects(gen)),\n      groupB = CompletableFuture\n        .supplyAsync(new MakeObjects(gen));\n    groupA.thenAcceptBoth(groupB, (a, b) -> {\n      System.out.println(\n        Sets.intersection(\n          Sets.newHashSet(a),\n          Sets.newHashSet(b)).size());\n    }).join();\n  }\n}\n",
               "LOC": 39,
               "Url": "http://bruceeckel.github.io/2017/01/13/constructors-are-not-thread-safe/",
               "Score": 0.0,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {},
               "Url_Position": 14,
               "In_Page_Order": 3,
               "Num_API_Calls": 2,
               "Dist_Center": 0.3836061257,
               "MethodInvocations": [
                  "CompletableFuture.thenAcceptBoth",
                  "MakeObjects.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 2.262769032607428,
         "top_apis_by_cluster": [
            "scanner.nextint",
            "scanner.__init__",
            "dateformat.format",
            "supplier.__init__",
            "makeobjects.__init__",
            "completablefuture.thenacceptboth",
            "foo.__init__",
            "date.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 5,
               "Code": "class XThread extends Thread {\n\n\tXThread() {\n\t}\n\tXThread(String threadName) {\n\t\tsuper(threadName); // Initialize thread.\n\t\tSystem.out.println(this);\n\t\tstart();\n\t}\n\tpublic void run() {\n\t\t//Display info about this particular thread\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t}\n}\n\npublic class ThreadExample {\n\n\tpublic static void main(String[] args) {\n\t\tThread thread1 = new Thread(new XThread(), \"thread1\");\n\t\tThread thread2 = new Thread(new XThread(), \"thread2\");\n\t\t//\t    The below 2 threads are assigned default names\n\t\tThread thread3 = new XThread();\n\t\tThread thread4 = new XThread();\n\t\tThread thread5 = new XThread(\"thread5\");\n\t\t//Start the threads\n\t\tthread1.start();\n\t\tthread2.start();\n\t\tthread3.start();\n\t\tthread4.start();\n\t\ttry {\n\t//The sleep() method is invoked on the main thread to cause a one second delay.\n\t\t\tThread.currentThread().sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t\t//Display info about the main thread\n\t\tSystem.out.println(Thread.currentThread());\n\t}\n}",
               "LOC": 38,
               "Url": "http://www.wideskills.com/java-tutorial/java-threads-tutorial",
               "Score": 1.0,
               "API_Weights": 7.650522448,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 7,
               "In_Page_Order": 2,
               "Num_API_Calls": 3,
               "Dist_Center": 0.0802707809,
               "MethodInvocations": [
                  "Thread.__init__",
                  "XThread.__init__",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 5,
               "Code": "\n   Thread thread = new Thread(\"New Thread\") {\n      public void run(){\n        System.out.println(\"run by: \" + getName());\n      }\n   };\n\n\n   thread.start();\n   System.out.println(thread.getName());\n",
               "LOC": 11,
               "Url": "http://tutorials.jenkov.com/java-concurrency/creating-and-starting-threads.html",
               "Score": 0.9052016898,
               "API_Weights": 8.7428541465,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 34,
               "In_Page_Order": 10,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1079094648,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.getName",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 5,
               "Code": "\n   MyRunnable runnable = new MyRunnable();\n   Thread thread = new Thread(runnable, \"New Thread\");\n\n   thread.start();\n   System.out.println(thread.getName());\n",
               "LOC": 7,
               "Url": "http://tutorials.jenkov.com/java-concurrency/creating-and-starting-threads.html",
               "Score": 0.7174423307,
               "API_Weights": 10.6300128386,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 34,
               "In_Page_Order": 11,
               "Num_API_Calls": 4,
               "Dist_Center": 0.1626511743,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.getName",
                  "MyRunnable.__init__",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 5,
               "Code": "class RunnableThread implements Runnable {\n\n\tThread runner;\n\tpublic RunnableThread() {\n\t}\n\tpublic RunnableThread(String threadName) {\n\t\trunner = new Thread(this, threadName); // (1) Create a new thread.\n\t\tSystem.out.println(runner.getName());\n\t\trunner.start(); // (2) Start the thread.\n\t}\n\tpublic void run() {\n\t\t//Display info about this particular thread\n\t\tSystem.out.println(Thread.currentThread());\n\t}\n}\n\npublic class RunnableExample {\n\n\tpublic static void main(String[] args) {\n\t\tThread thread1 = new Thread(new RunnableThread(), \"thread1\");\n\t\tThread thread2 = new Thread(new RunnableThread(), \"thread2\");\n\t\tRunnableThread thread3 = new RunnableThread(\"thread3\");\n\t\t//Start the threads\n\t\tthread1.start();\n\t\tthread2.start();\n\t\ttry {\n\t\t\t//delay for one second\n\t\t\tThread.currentThread().sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t}\n\t\t//Display info about the main thread\n\t\tSystem.out.println(Thread.currentThread());\n\t}\n}",
               "LOC": 34,
               "Url": "http://www.wideskills.com/java-tutorial/java-threads-tutorial",
               "Score": 0.6850695287,
               "API_Weights": 9.4045638391,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 7,
               "In_Page_Order": 1,
               "Num_API_Calls": 4,
               "Dist_Center": 0.1720895455,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.getName",
                  "Thread.start",
                  "RunnableThread.__init__"
               ]
            },
            {
               "Cluster": 5,
               "Code": "\n   Thread thread = new Thread(new MyRunnable());\n   thread.start();\n",
               "LOC": 4,
               "Url": "http://tutorials.jenkov.com/java-concurrency/creating-and-starting-threads.html",
               "Score": 0.6491300941,
               "API_Weights": 8.7428541465,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 34,
               "In_Page_Order": 7,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1825677773,
               "MethodInvocations": [
                  "Thread.__init__",
                  "MyRunnable.__init__",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 5,
               "Code": "public final class ObjectPreserver implements Runnable {\n  private static final ObjectPreserver lifeLine = new ObjectPreserver();\n\n  private ObjectPreserver() {\n    Thread thread = new Thread(this);\n    thread.setDaemon(true);\n    thread.start(); // Keep this object alive\n  }\n\n  // Neither this class nor HashMap will be garbage-collected.\n  // References from HashMap to other objects\n  // will also exhibit this property\n  private static final ConcurrentHashMap<Integer,Object> protectedMap\n      = new ConcurrentHashMap<Integer,Object>();\n\n  public synchronized void run() {\n    try {\n      wait();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt(); // Reset interrupted status\n    }\n  }\n\n  // Objects passed to this method will be preserved until\n  // the unpreserveObject() method is called\n  public static void preserveObject(Object obj) {\n    protectedMap.put(0, obj);\n  }\n\n  // Returns the same instance every time\n  public static Object getObject() {\n    return protectedMap.get(0);\n  }\n\n  // Unprotect the objects so that they can be garbage-collected\n  public static void unpreserveObject() {\n    protectedMap.remove(0);\n  }\n}\n",
               "LOC": 40,
               "Url": "https://wiki.sei.cmu.edu/confluence/display/java/TSM02-J.+Do+not+use+background+threads+during+class+initialization",
               "Score": 0.5292826162,
               "API_Weights": 8.7241802814,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start",
                  "ConcurrentHashMap.put": "java.util.concurrent.ConcurrentHashMap.put",
                  "ConcurrentHashMap.get": "java.util.concurrent.ConcurrentHashMap.get",
                  "ConcurrentHashMap.remove": "java.util.concurrent.ConcurrentHashMap.remove"
               },
               "Url_Position": 10,
               "In_Page_Order": 4,
               "Num_API_Calls": 6,
               "Dist_Center": 0.2175096085,
               "MethodInvocations": [
                  "ConcurrentHashMap.put",
                  "Thread.setDaemon",
                  "Thread.start",
                  "Thread.__init__",
                  "ConcurrentHashMap.remove",
                  "ConcurrentHashMap.get"
               ]
            },
            {
               "Cluster": 5,
               "Code": "package mythreading;\r\npublic class TestMyRunnable {\r\n\t\tpublic static void main (String [] args) {\r\n\t\tMyRunnable myrunnable = new MyRunnable();\r\n\t\t//Passing myrunnable object to Thread class constructor\r\n\t\tThread t1 = new Thread(myrunnable);\r\n\t\tt1.setName(\"Amit-1 Thread\");\r\n\t\t//Starting Thread t1\r\n\t\tt1.start();\r\n\t\tThread t2 = new Thread(myrunnable);\r\n\t\tt2.setName(\"Amit-2 Thread\");\r\n\t\tt2.start();\r\n\t\t}\r\n\t\t\r\n}\r\n\r\n",
               "LOC": 17,
               "Url": "https://www.w3resource.com/java-tutorial/java-defining-instantiating-and-starting-threads.php",
               "Score": 0.4408392708,
               "API_Weights": 9.4045638391,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.setName": "java.lang.Thread.setName",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 6,
               "In_Page_Order": 8,
               "Num_API_Calls": 4,
               "Dist_Center": 0.2432954864,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.setName",
                  "MyRunnable.__init__",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 5,
               "Code": "\n  Thread newThread = new Thread(MyRunnable());\n  newThread.run();  //should be start();\n",
               "LOC": 4,
               "Url": "http://tutorials.jenkov.com/java-concurrency/creating-and-starting-threads.html",
               "Score": 0.4316904898,
               "API_Weights": 4.4972873812,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__"
               },
               "Url_Position": 34,
               "In_Page_Order": 9,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2459628363,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.run"
               ]
            },
            {
               "Cluster": 5,
               "Code": "class Super {\n    Thread thread;\n    public Super() {\n        thread = new Thread() {\n            public void run() {\n                System.out.println(Super.this.toString());\n            }\n        };\n    }\n\n    public void start() {  // good\n        thread.start();\n    }\n    \n    public String toString() {\n        return \"hello\";\n    }\n}\n\nclass Test extends Super {\n    private String name;\n    public Test(String nm) {\n        this.name = nm;\n    }\n\n    public String toString() {\n        return super.toString() + \" \" + name;\n    }\n\n    public static void main(String[] args) {\n        Test t = new Test(\"my friend\");\n        t.start();\n    }\n}",
               "LOC": 34,
               "Url": "https://help.semmle.com/wiki/display/JAVA/Start+of+thread+in+constructor",
               "Score": 0.3383754016,
               "API_Weights": 9.7394827368,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start",
                  "Test.__init__": "junit.framework.Test.__init__"
               },
               "Url_Position": 8,
               "In_Page_Order": 2,
               "Num_API_Calls": 5,
               "Dist_Center": 0.2731690831,
               "MethodInvocations": [
                  "Thread.start",
                  "String",
                  "Thread.__init__",
                  "Test.start",
                  "Test.__init__"
               ]
            },
            {
               "Cluster": 5,
               "Code": "class Super {\n    public Super() {\n        new Thread() {\n            public void run() {\n                System.out.println(Super.this.toString());\n            }\n        }.start(); // BAD: The thread is started in the constructor of 'Super'.\n    }\n\n    public String toString() {\n        return \"hello\";\n    }\n}\n\nclass Test extends Super {\n    private String name;\n    public Test(String nm) {\n        // The thread is started before\n        // this line is run\n        this.name = nm;\n    }\n\n    public String toString() {\n        return super.toString() + \" \" + name;\n    }\n\n    public static void main(String[] args) {\n        new Test(\"my friend\");\n    }\n}",
               "LOC": 30,
               "Url": "https://help.semmle.com/wiki/display/JAVA/Start+of+thread+in+constructor",
               "Score": 0.0,
               "API_Weights": 5.9284575229,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Test.__init__": "junit.framework.Test.__init__"
               },
               "Url_Position": 8,
               "In_Page_Order": 1,
               "Num_API_Calls": 3,
               "Dist_Center": 0.3718232756,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Test.__init__",
                  "String"
               ]
            }
         ],
         "avg_cluster_api_weights": 8.346477918017918,
         "top_apis_by_cluster": [
            "thread.__init__",
            "thread.start",
            "myrunnable.__init__",
            "thread.getname",
            "test.__init__",
            "string",
            "thread.run",
            "xthread.__init__"
         ]
      }
   ]
}