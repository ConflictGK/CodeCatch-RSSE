{
   "num_snippets_per_cluster": [
      11,
      7,
      7,
      6
   ],
   "num_clusters": 4,
   "clusters": [
      {
         "cluster_snippets": [
            {
               "Cluster": 0,
               "Code": "\npackage com.beingjavaguys.testftp;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.SocketException;\nimport org.apache.commons.net.ftp.FTPClient;\n\npublic class UploadFile {\n public static void main(String args[]) {\n\n  // get an ftpClient object\n  FTPClient ftpClient = new FTPClient();\n  FileInputStream inputStream = null;\n\n  try {\n   // pass directory path on server to connect\n   ftpClient.connect(\"nagesh12.5gbfree.com\");\n\n   // pass username and password, returned true if authentication is\n   // successful\n   boolean login = ftpClient.login(\"username\", \"password\");\n\n   if (login) {\n    System.out.println(\"Connection established...\");\n    inputStream = new FileInputStream(\"files/fileToUpload.txt\");\n\n    boolean uploaded = ftpClient.storeFile(\"uploadedFile.txt\",\n      inputStream);\n    if (uploaded) {\n     System.out.println(\"File uploaded successfully !\");\n    } else {\n     System.out.println(\"Error in uploading file !\");\n    }\n\n    // logout the user, returned true if logout successfully\n    boolean logout = ftpClient.logout();\n    if (logout) {\n     System.out.println(\"Connection close...\");\n    }\n   } else {\n    System.out.println(\"Connection fail...\");\n   }\n\n  } catch (SocketException e) {\n   e.printStackTrace();\n  } catch (IOException e) {\n   e.printStackTrace();\n  } finally {\n   try {\n    ftpClient.disconnect();\n   } catch (IOException e) {\n    e.printStackTrace();\n   }\n  }\n }\n}\n\n\n",
               "LOC": 60,
               "Url": "http://www.beingjavaguys.com/2013/12/upload-files-to-ftp-server.html",
               "Score": 1.0,
               "API_Weights": 18.1514041212,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 11,
               "In_Page_Order": 2,
               "Num_API_Calls": 7,
               "Dist_Center": 0.113616406,
               "MethodInvocations": [
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.storeFile",
                  "FileInputStream.__init__",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "FTPClient client = new FTPClient();\nFileInputStream fis = null;\n\ntry {\n    client.connect(\"ftp.domain.com\");\n    client.login(\"admin\", \"secret\");\n\n    //\n    // Create an InputStream of the file to be uploaded\n    //\n    String filename = \"Touch.dat\";\n    fis = new FileInputStream(filename);\n\n    //\n    // Store file to server\n    //\n    client.storeFile(filename, fis);\n    client.logout();\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    try {\n        if (fis != null) {\n            fis.close();\n        }\n        client.disconnect();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n",
               "LOC": 31,
               "Url": "https://stackoverflow.com/questions/6527664/how-do-you-upload-a-file-to-an-ftp-server",
               "Score": 0.8812998906,
               "API_Weights": 19.7311229356,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FileInputStream.close": "java.io.FileInputStream.close",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 1,
               "In_Page_Order": 1,
               "Num_API_Calls": 8,
               "Dist_Center": 0.1548885869,
               "MethodInvocations": [
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.storeFile",
                  "FileInputStream.__init__",
                  "FileInputStream.close",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "\npackage com.javacodegeeks.snippets.core;\n\nimport org.apache.commons.net.ftp.FTPClient;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n \npublic class FtpFileUpload {\n\t\n    public static void main(String[] args) {\n\n  \n    \tFTPClient client = new FTPClient();\n\n  FileInputStream fis = null;\n \n\n  try {\n\n\nclient.connect(\"ftp.javacodegeeks.com\");\n\n\nclient.login(\"username\", \"password\");\n \n\n\n\n\n\n// Create an InputStream of the file to be uploaded\n\n\nString filename = \"test.txt\";\n\n\nfis = new FileInputStream(filename);\n \n\n\n// Store file on server and logout\n\n\nclient.storeFile(filename, fis);\n\n\nclient.logout();\n\n\n\n\n  } catch (IOException e) {\n\n\ne.printStackTrace();\n\n  } finally {\n\n\ntry {\n\n\n    if (fis != null) {\n\n\n\n  fis.close();\n\n\n    }\n\n\n    client.disconnect();\n\n\n} catch (IOException e) {\n\n\n    e.printStackTrace();\n\n\n}\n\n  }\n    }\n}\n",
               "LOC": 87,
               "Url": "https://examples.javacodegeeks.com/core-java/apache/commons/net-commons/file-upload-to-ftp-server/",
               "Score": 0.8812998906,
               "API_Weights": 19.7311229356,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FileInputStream.close": "java.io.FileInputStream.close",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 12,
               "In_Page_Order": 1,
               "Num_API_Calls": 8,
               "Dist_Center": 0.1548885869,
               "MethodInvocations": [
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.storeFile",
                  "FileInputStream.__init__",
                  "FileInputStream.close",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "\r\n\r\nimport java.io.IOException;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\n\r\nimport org.apache.commons.net.ftp.FTP;\r\nimport org.apache.commons.net.ftp.FTPClient;\r\nimport org.apache.commons.net.ftp.FTPConnectionClosedException;\r\n\r\nclass FTPFileUpload {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tFTPClient ftpclient = new FTPClient();\r\n\t\tFileInputStream fis = null;\r\n\t\tboolean result;\r\n\t\tString ftpServerAddress = \"localhost\";\r\n\t\tString userName = \"admin\";\r\n\t\tString password = \"admin\";\r\n\r\n\t\ttry {\r\n\t\t\tftpclient.connect(ftpServerAddress);\r\n\t\t\tresult = ftpclient.login(userName, password);\r\n\r\n\t\t\tif (result == true) {\r\n\t\t\t\tSystem.out.println(\"Logged in Successfully !\");\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"Login Fail!\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tftpclient.setFileType(FTP.BINARY_FILE_TYPE);\r\n\r\n\t\t\tftpclient.changeWorkingDirectory(\"/\");\r\n\r\n\t\t\tFile file = new File(\"D:/File.doc\");\r\n\t\t\tString testName = file.getName();\r\n\t\t\tfis = new FileInputStream(file);\r\n\r\n\t\t\t// Upload file to the ftp server\r\n\t\t\tresult = ftpclient.storeFile(testName, fis);\r\n\r\n\t\t\tif (result == true) {\r\n\t\t\t\tSystem.out.println(\"File is uploaded successfully\");\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"File uploading failed\");\r\n\t\t\t}\r\n\t\t\tftpclient.logout();\r\n\t\t} catch (FTPConnectionClosedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tftpclient.disconnect();\r\n\t\t\t} catch (FTPConnectionClosedException e) {\r\n\t\t\t\tSystem.out.println(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
               "LOC": 58,
               "Url": "http://www.simplecodestuffs.com/uploading-file-on-ftp-server/",
               "Score": 0.8230684422,
               "API_Weights": 21.328419585,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FTPClient.setFileType": "org.apache.commons.net.ftp.FTPClient.setFileType",
                  "FTPClient.changeWorkingDirectory": "org.apache.commons.net.ftp.FTPClient.changeWorkingDirectory",
                  "File.__init__": "java.io.File.__init__",
                  "File.getName": "java.io.File.getName",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 16,
               "In_Page_Order": 1,
               "Num_API_Calls": 11,
               "Dist_Center": 0.1751357364,
               "MethodInvocations": [
                  "File.__init__",
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.setFileType",
                  "FTPClient.storeFile",
                  "FileInputStream.__init__",
                  "FTPClient.changeWorkingDirectory",
                  "File.getName",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "package org.kodejava.example.commons.net;\n\nimport org.apache.commons.net.ftp.FTPClient;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class FTPUploadDemo {\n    public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        String filename = \"data.txt\";\n\n        // Read the file from resources folder.\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        try (InputStream is = classLoader.getResourceAsStream(filename)) {\n            client.connect(\"ftp.example.org\");\n            client.login(\"admin\", \"admin123**\");\n\n            // Store file to server\n            client.storeFile(filename, is);\n            client.logout();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                client.disconnect();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n",
               "LOC": 33,
               "Url": "https://kodejava.org/how-do-i-upload-file-to-ftp-server/",
               "Score": 0.8012218405,
               "API_Weights": 16.9755634587,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 8,
               "In_Page_Order": 1,
               "Num_API_Calls": 7,
               "Dist_Center": 0.182731828,
               "MethodInvocations": [
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "ClassLoader.getResourceAsStream",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.storeFile",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": " \n\nimport org.apache.commons.net.ftp.FTPClient;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Main {\n  public static void main(String[] args) {\n    FTPClient client = new FTPClient();\n    FileInputStream fis = null;\n\n    client.connect(\"ftp.domain.com\");\n    client.login(\"admin\", \"secret\");\n\n    String filename = \"Touch.dat\";\n    fis = new FileInputStream(filename);\n    client.storeFile(filename, fis);\n    client.logout();\n    fis.close();\n  }\n}\n\n   \n  \n",
               "LOC": 25,
               "Url": "http://www.java2s.com/Code/Java/Network-Protocol/UploadfiletoFTPserver.htm",
               "Score": 0.7740690177,
               "API_Weights": 17.2074198876,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FileInputStream.close": "java.io.FileInputStream.close"
               },
               "Url_Position": 10,
               "In_Page_Order": 1,
               "Num_API_Calls": 7,
               "Dist_Center": 0.1921728994,
               "MethodInvocations": [
                  "FTPClient.login",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.storeFile",
                  "FileInputStream.__init__",
                  "FileInputStream.close",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "package com.ftpclient.test;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\n\npublic class FTPUtils {\n    public static void ftpConnect(FTPClient ftpclient, String host, String username, String password) throws IOException {\n        System.out.println(\"FTPUtils :: Logging in FTP..\");\n        try{\n            ftpclient.connect(host);\n            if (!ftpclient.login(username, password)) {\n                throw new IOException(\"Supplied wrong credentials to FTP Server\");\n            }\n\n            if (ftpclient.getReplyCode() != 0) {\n                System.out.println(ftpclient.getReplyString());\n            }\n        }catch(IOException ioe){\n            ioe.printStackTrace();\n            System.out.println(\"FTP Client is not able to Connect to host\");\n            throw new IOException(\"FTP Client is not able to Connect to host\");\n        }\n        System.out.println(\"FTPUtils :: FTP Login Successful..\");\n    }\n\n    /**\n     * disconnect to FTP server\n     * \n     * @param ftpclient is Object which is having details of FTP server like IP, user name and password\n     * @throws IOException throws Exception\n     */\n    public static void ftpDisConnect(FTPClient ftpclient) throws IOException {\n        System.out.println(\"FTPUtils :: FTP Logging out..\");\n        ftpclient.logout();\n        ftpclient.disconnect();\n        System.out.println(\"FTPUtils :: FTP Disconnected Successfully..\");\n    }\n\n    /**\n     * download's file from source path to destination path by using FTP Client.\n     * \n     * @param ftpclient is Object which is having details of FTP server like IP, user name and password\n     * @param sourcePath is String from where to download's file\n     * @param destinationPath is String to where to download's file.\n     * @return boolean true if download's with out any fail else false\n     * @throws IOException will throw any problem with file system\n     */\n    public static boolean downloadFile(FTPClient ftpclient, String sourcePath, String destinationPath) throws IOException {\n        System.out.println(\"FTPUtils :: RemoteFile download starts ..FTP SOURCE \" + sourcePath + \" DESTINATION \" + destinationPath);\n        FileOutputStream fos = null;\n        boolean result = false;\n        try{            \n            ftpclient.setFileTransferMode(FTP.BINARY_FILE_TYPE);\n            ftpclient.setFileType(FTP.BINARY_FILE_TYPE);\n            File fDestination = new File(destinationPath);\n            fos = new FileOutputStream(fDestination);\n            result = ftpclient.retrieveFile(sourcePath, fos);\n            if (result) {\n                System.out.println(\"FTPUtils :: RemoteFile download Completed..FTP \" + sourcePath);\n            }\n        }catch(IOException ioe){\n            ioe.printStackTrace();\n            System.out.println(\"FTP is not able to Download the files from host\");\n            throw new IOException(\"FTP is not able to Download the files from host\");\n        }finally{\n            fos.close();\n        }\n        return result;\n    }\n\n    /**\n     * @param ftpclient\n     * @param sourcePath\n     * @param destinationPath\n     * @throws IOException\n     */\n    public static void uploadFile(FTPClient ftpclient, String sourcePath, String destinationPath) throws IOException {\n        FileInputStream fis = null;\n        try {\n            //\n            // Create an InputStream of the file to be uploaded\n            //\n            fis = new FileInputStream(sourcePath);\n\n            //\n            // Store file to server\n            //\n            ftpclient.storeFile(destinationPath, fis);\n        }catch(IOException ioe){\n            ioe.printStackTrace();\n            System.out.println(\"FTP is not able to upload the files from host\");\n            throw new IOException(\"FTP is not able to upload the files from host\");\n        }finally{\n            fis.close();\n        }\n    }\n}\n",
               "LOC": 102,
               "Url": "https://stackoverflow.com/questions/11554939/upload-file-directory-with-ftp",
               "Score": 0.7165662885,
               "API_Weights": 22.0265007578,
               "API_Qualified_Names": {
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "IOException.__init__": "java.io.IOException.__init__",
                  "FTPClient.getReplyCode": "org.apache.commons.net.ftp.FTPClient.getReplyCode",
                  "FTPClient.getReplyString": "org.apache.commons.net.ftp.FTPClient.getReplyString",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect",
                  "FTPClient.setFileType": "org.apache.commons.net.ftp.FTPClient.setFileType",
                  "File.__init__": "java.io.File.__init__",
                  "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
                  "FTPClient.retrieveFile": "org.apache.commons.net.ftp.FTPClient.retrieveFile",
                  "FileOutputStream.close": "java.io.FileOutputStream.close",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "FileInputStream.close": "java.io.FileInputStream.close"
               },
               "Url_Position": 4,
               "In_Page_Order": 2,
               "Num_API_Calls": 16,
               "Dist_Center": 0.2121666724,
               "MethodInvocations": [
                  "FTPClient.getReplyString",
                  "FTPClient.disconnect",
                  "FTPClient.getReplyCode",
                  "FTPClient.login",
                  "File.__init__",
                  "FileOutputStream.close",
                  "FTPClient.retrieveFile",
                  "FileOutputStream.__init__",
                  "FTPClient.setFileTransferMode",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.setFileType",
                  "FTPClient.storeFile",
                  "FileInputStream.__init__",
                  "FileInputStream.close",
                  "IOException.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport org.apache.commons.net.ftp.FTP;\r\nimport org.apache.commons.net.ftp.FTPClient;\r\n\r\npublic class FtpFileDownload{\r\n \r\n    public static void main(String[] args) {\r\n        String serverAddress = \"www.ftpserveraddress.com\"; // ftp server address  \r\n        int port = 21; // ftp uses default port Number 21 \r\n        String username = \"xyz\";// username of ftp server\r\n        String password = \"xyz\"; // password of ftp server\r\n \r\n        FTPClient ftpClient = new FTPClient();\r\n        try {\r\n \r\n            ftpClient.connect(serverAddress, port);\r\n            ftpClient.login(username,password);\r\n\r\n            ftpClient.enterLocalPassiveMode();\r\n            ftpClient.setFileType(FTP.BINARY_FILE_TYPE/FTP.ASCII_FILE_TYPE);\r\n            String remoteFilePath = \"/filename.txt\";\r\n            File localfile = new File(\"E:/ftpServerFile.txt\");\r\n            OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(localfile));\r\n            boolean success = ftpClient.retrieveFile(remoteFilePath, outputStream);\r\n            outputStream.close();\r\n \r\n            if (success) {\r\n                System.out.println(\"Ftp file successfully download.\");\r\n            }\r\n \r\n        } catch (IOException ex) {\r\n            System.out.println(\"Error occurs in downloading files from ftp Server : \" + ex.getMessage());\r\n        } finally {\r\n            try {\r\n                if (ftpClient.isConnected()) {\r\n                    ftpClient.logout();\r\n                    ftpClient.disconnect();\r\n                }\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
               "LOC": 53,
               "Url": "http://www.oodlestechnologies.com/blogs/Download-files-from-FTP-Server-using-Java-Program",
               "Score": 0.6143172762,
               "API_Weights": 20.2265713432,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FTPClient.enterLocalPassiveMode": "org.apache.commons.net.ftp.FTPClient.enterLocalPassiveMode",
                  "FTPClient.setFileType": "org.apache.commons.net.ftp.FTPClient.setFileType",
                  "File.__init__": "java.io.File.__init__",
                  "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
                  "OutputStream.__init__": "java.io.OutputStream.__init__",
                  "FTPClient.retrieveFile": "org.apache.commons.net.ftp.FTPClient.retrieveFile",
                  "OutputStream.close": "java.io.OutputStream.close",
                  "FTPClient.isConnected": "org.apache.commons.net.ftp.FTPClient.isConnected",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 18,
               "In_Page_Order": 1,
               "Num_API_Calls": 13,
               "Dist_Center": 0.2477187856,
               "MethodInvocations": [
                  "File.__init__",
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "FTPClient.retrieveFile",
                  "FileOutputStream.__init__",
                  "OutputStream.close",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.setFileType",
                  "FTPClient.isConnected",
                  "OutputStream.__init__",
                  "FTPClient.enterLocalPassiveMode",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\n\n/**\n * A program that demonstrates how to upload files from local computer\n * to a remote FTP server using Apache Commons Net API.\n * @author www.codejava.net\n */\npublic class FTPUploadFileDemo {\n\n    public static void main(String[] args) {\n        String server = \"www.myserver.com\";\n        int port = 21;\n        String user = \"user\";\n        String pass = \"pass\";\n\n        FTPClient ftpClient = new FTPClient();\n        try {\n\n            ftpClient.connect(server, port);\n            ftpClient.login(user, pass);\n            ftpClient.enterLocalPassiveMode();\n\n            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);\n\n            // APPROACH #1: uploads first file using an InputStream\n            File firstLocalFile = new File(\"D:/Test/Projects.zip\");\n\n            String firstRemoteFile = \"Projects.zip\";\n            InputStream inputStream = new FileInputStream(firstLocalFile);\n\n            System.out.println(\"Start uploading first file\");\n            boolean done = ftpClient.storeFile(firstRemoteFile, inputStream);\n            inputStream.close();\n            if (done) {\n                System.out.println(\"The first file is uploaded successfully.\");\n            }\n\n            // APPROACH #2: uploads second file using an OutputStream\n            File secondLocalFile = new File(\"E:/Test/Report.doc\");\n            String secondRemoteFile = \"test/Report.doc\";\n            inputStream = new FileInputStream(secondLocalFile);\n\n            System.out.println(\"Start uploading second file\");\n            OutputStream outputStream = ftpClient.storeFileStream(secondRemoteFile);\n            byte[] bytesIn = new byte[4096];\n            int read = 0;\n\n            while ((read = inputStream.read(bytesIn)) != -1) {\n                outputStream.write(bytesIn, 0, read);\n            }\n            inputStream.close();\n            outputStream.close();\n\n            boolean completed = ftpClient.completePendingCommand();\n            if (completed) {\n                System.out.println(\"The second file is uploaded successfully.\");\n            }\n\n        } catch (IOException ex) {\n            System.out.println(\"Error: \" + ex.getMessage());\n            ex.printStackTrace();\n        } finally {\n            try {\n                if (ftpClient.isConnected()) {\n                    ftpClient.logout();\n                    ftpClient.disconnect();\n                }\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n}\n",
               "LOC": 82,
               "Url": "https://stackoverflow.com/questions/17454529/uploading-to-ftp-using-java",
               "Score": 0.5055716183,
               "API_Weights": 24.2051700083,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FTPClient.enterLocalPassiveMode": "org.apache.commons.net.ftp.FTPClient.enterLocalPassiveMode",
                  "FTPClient.setFileType": "org.apache.commons.net.ftp.FTPClient.setFileType",
                  "File.__init__": "java.io.File.__init__",
                  "InputStream.__init__": "java.io.InputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "InputStream.close": "java.io.InputStream.close",
                  "InputStream.read": "java.io.InputStream.read",
                  "OutputStream.close": "java.io.OutputStream.close",
                  "FTPClient.completePendingCommand": "org.apache.commons.net.ftp.FTPClient.completePendingCommand",
                  "FTPClient.isConnected": "org.apache.commons.net.ftp.FTPClient.isConnected",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 3,
               "In_Page_Order": 3,
               "Num_API_Calls": 16,
               "Dist_Center": 0.2855297909,
               "MethodInvocations": [
                  "File.__init__",
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "InputStream.close",
                  "OutputStream.close",
                  "FTPClient.completePendingCommand",
                  "FTPClient.storeFileStream",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.setFileType",
                  "FTPClient.isConnected",
                  "FTPClient.storeFile",
                  "InputStream.__init__",
                  "FTPClient.enterLocalPassiveMode",
                  "InputStream.read",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "import java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.apache.commons.net.ftp.FTP;\nimport org.apache.commons.net.ftp.FTPClient;\n\n/**\n * A program that demonstrates how to upload files from local computer\n * to a remote FTP server using Apache Commons Net API.\n * @author www.codejava.net\n */\npublic class FTPUploadFileDemo {\n\n\tpublic static void main(String[] args) {\n\t\tString server = \"www.myserver.com\";\n\t\tint port = 21;\n\t\tString user = \"user\";\n\t\tString pass = \"pass\";\n\n\t\tFTPClient ftpClient = new FTPClient();\n\t\ttry {\n\n\t\t\tftpClient.connect(server, port);\n\t\t\tftpClient.login(user, pass);\n\t\t\tftpClient.enterLocalPassiveMode();\n\n\t\t\tftpClient.setFileType(FTP.BINARY_FILE_TYPE);\n\n\t\t\t// APPROACH #1: uploads first file using an InputStream\n\t\t\tFile firstLocalFile = new File(\"D:/Test/Projects.zip\");\n\n\t\t\tString firstRemoteFile = \"Projects.zip\";\n\t\t\tInputStream inputStream = new FileInputStream(firstLocalFile);\n\n\t\t\tSystem.out.println(\"Start uploading first file\");\n\t\t\tboolean done = ftpClient.storeFile(firstRemoteFile, inputStream);\n\t\t\tinputStream.close();\n\t\t\tif (done) {\n\t\t\t\tSystem.out.println(\"The first file is uploaded successfully.\");\n\t\t\t}\n\n\t\t\t// APPROACH #2: uploads second file using an OutputStream\n\t\t\tFile secondLocalFile = new File(\"E:/Test/Report.doc\");\n\t\t\tString secondRemoteFile = \"test/Report.doc\";\n\t\t\tinputStream = new FileInputStream(secondLocalFile);\n\n\t\t\tSystem.out.println(\"Start uploading second file\");\n\t\t\tOutputStream outputStream = ftpClient.storeFileStream(secondRemoteFile);\n\t        byte[] bytesIn = new byte[4096];\n\t        int read = 0;\n\n\t        while ((read = inputStream.read(bytesIn)) != -1) {\n\t        \toutputStream.write(bytesIn, 0, read);\n\t        }\n\t        inputStream.close();\n\t        outputStream.close();\n\n\t        boolean completed = ftpClient.completePendingCommand();\n\t\t\tif (completed) {\n\t\t\t\tSystem.out.println(\"The second file is uploaded successfully.\");\n\t\t\t}\n\n\t\t} catch (IOException ex) {\n\t\t\tSystem.out.println(\"Error: \" + ex.getMessage());\n\t\t\tex.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (ftpClient.isConnected()) {\n\t\t\t\t\tftpClient.logout();\n\t\t\t\t\tftpClient.disconnect();\n\t\t\t\t}\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n}\n",
               "LOC": 82,
               "Url": "http://www.codejava.net/java-se/networking/ftp/java-ftp-file-upload-tutorial-and-example",
               "Score": 0.5055716183,
               "API_Weights": 24.2051700083,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "FTPClient.connect": "org.apache.commons.net.ftp.FTPClient.connect",
                  "FTPClient.login": "org.apache.commons.net.ftp.FTPClient.login",
                  "FTPClient.enterLocalPassiveMode": "org.apache.commons.net.ftp.FTPClient.enterLocalPassiveMode",
                  "FTPClient.setFileType": "org.apache.commons.net.ftp.FTPClient.setFileType",
                  "File.__init__": "java.io.File.__init__",
                  "InputStream.__init__": "java.io.InputStream.__init__",
                  "FTPClient.storeFile": "org.apache.commons.net.ftp.FTPClient.storeFile",
                  "InputStream.close": "java.io.InputStream.close",
                  "InputStream.read": "java.io.InputStream.read",
                  "OutputStream.close": "java.io.OutputStream.close",
                  "FTPClient.completePendingCommand": "org.apache.commons.net.ftp.FTPClient.completePendingCommand",
                  "FTPClient.isConnected": "org.apache.commons.net.ftp.FTPClient.isConnected",
                  "FTPClient.logout": "org.apache.commons.net.ftp.FTPClient.logout",
                  "FTPClient.disconnect": "org.apache.commons.net.ftp.FTPClient.disconnect"
               },
               "Url_Position": 6,
               "In_Page_Order": 1,
               "Num_API_Calls": 16,
               "Dist_Center": 0.2855297909,
               "MethodInvocations": [
                  "File.__init__",
                  "FTPClient.disconnect",
                  "FTPClient.login",
                  "InputStream.close",
                  "OutputStream.close",
                  "FTPClient.completePendingCommand",
                  "FTPClient.storeFileStream",
                  "FTPClient.connect",
                  "FTPClient.logout",
                  "FTPClient.setFileType",
                  "FTPClient.isConnected",
                  "FTPClient.storeFile",
                  "InputStream.__init__",
                  "FTPClient.enterLocalPassiveMode",
                  "InputStream.read",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "\r\n// downloading testStream.txt from remote folder \\test\r\n//to local folder C:\\\\myfiles\\\\writeToFolder\r\n//with ftp server ftp.myhost.com, username ftp and password pass\r\n    \r\nString ftpFolder = \"/test\";\r\nString nameOfFile = \"testStream.txt\";\r\nString toLocalFolder = \"C:\\\\myfiles\\\\writeToFolder\";\r\nint status = -1;\r\ntry {\r\n    FTPClient ftpClient = new FTPClient(\"ftp.myhost.com\", \"ftp\", \"pass\");\r\n\tstatus = ftpClient.getFile(nameOfFile, ftpFolder, toLocalFolder);\r\n\t\r\n} catch (Exception e) {\r\n\te.printStackTrace();\r\n\t//or\r\n\t//ex.getCause().printStackTrace();  \r\n\t//(Depending on what version of JDK you use)\t\t\t\t\t\r\n}\r\n",
               "LOC": 20,
               "Url": "http://www.zehon.com/FTP_tutorial.htm",
               "Score": 1.110223025e-16,
               "API_Weights": 3.7337284194,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__"
               },
               "Url_Position": 25,
               "In_Page_Order": 6,
               "Num_API_Calls": 2,
               "Dist_Center": 0.4613176935,
               "MethodInvocations": [
                  "FTPClient.getFile",
                  "FTPClient.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 18.865653950965058,
         "top_apis_by_cluster": [
            "ftpclient.__init__",
            "ftpclient.logout",
            "ftpclient.login",
            "ftpclient.connect",
            "ftpclient.storefile",
            "ftpclient.disconnect",
            "fileinputstream.__init__",
            "fileinputstream.close"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(FtpJavaApplication.class)\n            .web(false)\n            .run(args);\n    }\n\n    @Bean\n    public SessionFactory<FTPFile> ftpSessionFactory() {\n        DefaultFtpSessionFactory sf = new DefaultFtpSessionFactory();\n        sf.setHost(\"localhost\");\n        sf.setPort(port);\n        sf.setUsername(\"foo\");\n        sf.setPassword(\"foo\");\n        return new CachingSessionFactory<FTPFile>(sf);\n    }\n\n    @Bean\n    @ServiceActivator(inputChannel = \"ftpChannel\")\n    public MessageHandler handler() {\n        FtpOutboundGateway ftpOutboundGateway =\n                          new FtpOutboundGateway(ftpSessionFactory(), \"ls\", \"'my_remote_dir/'\");\n        ftpOutboundGateway.setOutputChannelName(\"lsReplyChannel\");\n        return ftpOutboundGateway;\n    }\n\n}",
               "LOC": 29,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 1.0,
               "API_Weights": 12.3507859494,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__",
                  "SessionFactory": "org.hibernate.SessionFactory.SessionFactory"
               },
               "Url_Position": 43,
               "In_Page_Order": 23,
               "Num_API_Calls": 10,
               "Dist_Center": 0.1057460904,
               "MethodInvocations": [
                  "SpringApplicationBuilder.__init__",
                  "DefaultFtpSessionFactory.setPort",
                  "DefaultFtpSessionFactory.setHost",
                  "SessionFactory",
                  "DefaultFtpSessionFactory.setPassword",
                  "CachingSessionFactory.__init__",
                  "FtpOutboundGateway.__init__",
                  "DefaultFtpSessionFactory.setUsername",
                  "FtpOutboundGateway.setOutputChannelName",
                  "DefaultFtpSessionFactory.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(FtpJavaApplication.class)\n            .web(false)\n            .run(args);\n    }\n\n    @Bean\n    public SessionFactory<FTPFile> ftpSessionFactory() {\n        DefaultFtpSessionFactory sf = new DefaultFtpSessionFactory();\n        sf.setHost(\"localhost\");\n        sf.setPort(port);\n        sf.setUsername(\"foo\");\n        sf.setPassword(\"foo\");\n        return new CachingSessionFactory<FTPFile>(sf);\n    }\n\n    @Bean\n    public FtpOutboundGatewaySpec ftpOutboundGateway() {\n        return Ftp.outboundGateway(ftpSessionFactory(),\n            AbstractRemoteFileOutboundGateway.Command.MGET, \"payload\")\n            .options(AbstractRemoteFileOutboundGateway.Option.RECURSIVE)\n            .regexFileNameFilter(\"(subFtpSource|.*1.txt)\")\n            .localDirectoryExpression(\"'localDirectory/' + #remoteDirectory\")\n            .localFilenameExpression(\"#remoteFileName.replaceFirst('ftpSource', 'localTarget')\");\n    }\n\n    @Bean\n    public IntegrationFlow ftpMGetFlow(AbstractRemoteFileOutboundGateway<FTPFile> ftpOutboundGateway) {\n        return f -> f\n            .handle(ftpOutboundGateway)\n            .channel(c -> c.queue(\"remoteFileOutputChannel\"));\n    }\n\n}",
               "LOC": 37,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.9619935573,
               "API_Weights": 11.528568204,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__",
                  "SessionFactory": "org.hibernate.SessionFactory.SessionFactory"
               },
               "Url_Position": 43,
               "In_Page_Order": 24,
               "Num_API_Calls": 8,
               "Dist_Center": 0.1168656385,
               "MethodInvocations": [
                  "SpringApplicationBuilder.__init__",
                  "DefaultFtpSessionFactory.setPort",
                  "DefaultFtpSessionFactory.setHost",
                  "SessionFactory",
                  "DefaultFtpSessionFactory.setPassword",
                  "CachingSessionFactory.__init__",
                  "DefaultFtpSessionFactory.setUsername",
                  "DefaultFtpSessionFactory.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(FtpJavaApplication.class)\n            .web(false)\n            .run(args);\n    }\n\n    @Bean\n    public SessionFactory<FTPFile> ftpSessionFactory() {\n        DefaultFtpSessionFactory sf = new DefaultFtpSessionFactory();\n        sf.setHost(\"localhost\");\n        sf.setPort(port);\n        sf.setUsername(\"foo\");\n        sf.setPassword(\"foo\");\n        return new CachingSessionFactory<FTPFile>(sf);\n    }\n\n    @Bean\n    public FtpInboundFileSynchronizer ftpInboundFileSynchronizer() {\n        FtpInboundFileSynchronizer fileSynchronizer = new FtpInboundFileSynchronizer(ftpSessionFactory());\n        fileSynchronizer.setDeleteRemoteFiles(false);\n        fileSynchronizer.setRemoteDirectory(\"foo\");\n        fileSynchronizer.setFilter(new FtpSimplePatternFileListFilter(\"*.xml\"));\n        return fileSynchronizer;\n    }\n\n    @Bean\n    @InboundChannelAdapter(channel = \"ftpChannel\", poller = @Poller(fixedDelay = \"5000\"))\n    public MessageSource<File> ftpMessageSource() {\n        FtpInboundFileSynchronizingMessageSource source =\n                new FtpInboundFileSynchronizingMessageSource(ftpInboundFileSynchronizer());\n        source.setLocalDirectory(new File(\"ftp-inbound\"));\n        source.setAutoCreateLocalDirectory(true);\n        source.setLocalFilter(new AcceptOnceFileListFilter<File>());\n        source.setMaxFetchSize(1);\n        return source;\n    }\n\n    @Bean\n    @ServiceActivator(inputChannel = \"ftpChannel\")\n    public MessageHandler handler() {\n        return new MessageHandler() {\n\n            @Override\n            public void handleMessage(Message<?> message) throws MessagingException {\n                System.out.println(message.getPayload());\n            }\n\n        };\n    }\n\n}",
               "LOC": 54,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.9174143467,
               "API_Weights": 15.925218693,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__",
                  "SessionFactory": "org.hibernate.SessionFactory.SessionFactory",
                  "File.__init__": "java.io.File.__init__",
                  "MessageHandler.__init__": "org.springframework.integration.core.MessageHandler.__init__",
                  "Message.getPayload": "org.springframework.integration.Message.getPayload"
               },
               "Url_Position": 43,
               "In_Page_Order": 11,
               "Num_API_Calls": 23,
               "Dist_Center": 0.129908182,
               "MethodInvocations": [
                  "DefaultFtpSessionFactory.setPassword",
                  "FtpInboundFileSynchronizingMessageSource.setMaxFetchSize",
                  "FtpInboundFileSynchronizer",
                  "SessionFactory",
                  "DefaultFtpSessionFactory.setHost",
                  "CachingSessionFactory.__init__",
                  "FtpInboundFileSynchronizer.setRemoteDirectory",
                  "DefaultFtpSessionFactory.setUsername",
                  "MessageHandler.__init__",
                  "FtpInboundFileSynchronizer.setDeleteRemoteFiles",
                  "File.__init__",
                  "FtpInboundFileSynchronizingMessageSource.setLocalDirectory",
                  "FtpInboundFileSynchronizingMessageSource.setLocalFilter",
                  "DefaultFtpSessionFactory.setPort",
                  "FtpInboundFileSynchronizingMessageSource.__init__",
                  "AcceptOnceFileListFilter.__init__",
                  "FtpInboundFileSynchronizer.__init__",
                  "SpringApplicationBuilder.__init__",
                  "FtpInboundFileSynchronizer.setFilter",
                  "FtpInboundFileSynchronizingMessageSource.setAutoCreateLocalDirectory",
                  "Message.getPayload",
                  "FtpSimplePatternFileListFilter.__init__",
                  "DefaultFtpSessionFactory.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\n@IntegrationComponentScan\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context =\n            new SpringApplicationBuilder(FtpJavaApplication.class)\n                .web(false)\n                .run(args);\n        MyGateway gateway = context.getBean(MyGateway.class);\n        gateway.sendToFtp(new File(\"/foo/bar.txt\"));\n    }\n\n    @Bean\n    public SessionFactory<FTPFile> ftpSessionFactory() {\n        DefaultFtpSessionFactory sf = new DefaultFtpSessionFactory();\n        sf.setHost(\"localhost\");\n        sf.setPort(port);\n        sf.setUsername(\"foo\");\n        sf.setPassword(\"foo\");\n        return new CachingSessionFactory<FTPFile>(sf);\n    }\n\n    @Bean\n    public IntegrationFlow ftpOutboundFlow() {\n        return IntegrationFlows.from(\"toFtpChannel\")\n                .handle(Ftp.outboundAdapter(ftpSessionFactory(), FileExistsMode.FAIL)\n                        .useTemporaryFileName(false)\n                        .fileNameExpression(\"headers['\" + FileHeaders.FILENAME + \"']\")\n                        .remoteDirectory(this.ftpServer.getTargetFtpDirectory().getName())\n                ).get();\n    }\n\n    @MessagingGateway\n    public interface MyGateway {\n\n         @Gateway(requestChannel = \"toFtpChannel\")\n         void sendToFtp(File file);\n\n    }\n\n}",
               "LOC": 42,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.8439797551,
               "API_Weights": 13.9557071141,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__",
                  "ConfigurableApplicationContext.getBean": "org.springframework.context.ConfigurableApplicationContext.getBean",
                  "File.__init__": "java.io.File.__init__",
                  "SessionFactory": "org.hibernate.SessionFactory.SessionFactory"
               },
               "Url_Position": 43,
               "In_Page_Order": 17,
               "Num_API_Calls": 11,
               "Dist_Center": 0.1513929467,
               "MethodInvocations": [
                  "File.__init__",
                  "SpringApplicationBuilder.__init__",
                  "DefaultFtpSessionFactory.setPort",
                  "DefaultFtpSessionFactory.setHost",
                  "MyGateway.sendToFtp",
                  "ConfigurableApplicationContext.getBean",
                  "DefaultFtpSessionFactory.setPassword",
                  "SessionFactory",
                  "CachingSessionFactory.__init__",
                  "DefaultFtpSessionFactory.setUsername",
                  "DefaultFtpSessionFactory.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(FtpJavaApplication.class)\n            .web(false)\n            .run(args);\n    }\n\n    @Bean\n    public IntegrationFlow ftpInboundFlow() {\n        return IntegrationFlows\n            .from(s -> s.ftp(this.ftpSessionFactory)\n                    .preserveTimestamp(true)\n                    .remoteDirectory(\"foo\")\n                    .regexFilter(\".*\\\\.txt$\")\n                    .localFilename(f -> f.toUpperCase() + \".a\")\n                    .localDirectory(new File(\"d:\\\\ftp_files\")),\n                e -> e.id(\"ftpInboundAdapter\")\n                    .autoStartup(true)\n                    .poller(Pollers.fixedDelay(5000)))\n            .handle(m -> System.out.println(m.getPayload()))\n            .get();\n    }\n}",
               "LOC": 25,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.6053386422,
               "API_Weights": 3.2758124966,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__",
                  "File.__init__": "java.io.File.__init__"
               },
               "Url_Position": 43,
               "In_Page_Order": 12,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2212121975,
               "MethodInvocations": [
                  "File.__init__",
                  "SpringApplicationBuilder.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\n@IntegrationComponentScan\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context =\n                    new SpringApplicationBuilder(FtpJavaApplication.class)\n                        .web(false)\n                        .run(args);\n        MyGateway gateway = context.getBean(MyGateway.class);\n        gateway.sendToFtp(new File(\"/foo/bar.txt\"));\n    }\n\n    @Bean\n    public SessionFactory<FTPFile> ftpSessionFactory() {\n        DefaultFtpSessionFactory sf = new DefaultFtpSessionFactory();\n        sf.setHost(\"localhost\");\n        sf.setPort(port);\n        sf.setUsername(\"foo\");\n        sf.setPassword(\"foo\");\n        return new CachingSessionFactory<FTPFile>(sf);\n    }\n\n    @Bean\n    @ServiceActivator(inputChannel = \"ftpChannel\")\n    public MessageHandler handler() {\n        FtpMessageHandler handler = new FtpMessageHandler(ftpSessionFactory());\n        handler.setRemoteDirectoryExpressionString(\"headers['remote-target-dir']\");\n        handler.setFileNameGenerator(new FileNameGenerator() {\n\n            @Override\n            public String generateFileName(Message<?> message) {\n                 return \"handlerContent.test\";\n            }\n\n        });\n        return handler;\n    }\n\n    @MessagingGateway\n    public interface MyGateway {\n\n         @Gateway(requestChannel = \"toFtpChannel\")\n         void sendToFtp(File file);\n\n    }\n}",
               "LOC": 47,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.555555529,
               "API_Weights": 15.2358238422,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__",
                  "ConfigurableApplicationContext.getBean": "org.springframework.context.ConfigurableApplicationContext.getBean",
                  "File.__init__": "java.io.File.__init__",
                  "SessionFactory": "org.hibernate.SessionFactory.SessionFactory",
                  "FileNameGenerator.__init__": "org.springframework.integration.file.FileNameGenerator.__init__"
               },
               "Url_Position": 43,
               "In_Page_Order": 16,
               "Num_API_Calls": 15,
               "Dist_Center": 0.2357772472,
               "MethodInvocations": [
                  "File.__init__",
                  "SpringApplicationBuilder.__init__",
                  "DefaultFtpSessionFactory.setPort",
                  "DefaultFtpSessionFactory.setHost",
                  "MyGateway.sendToFtp",
                  "ConfigurableApplicationContext.getBean",
                  "DefaultFtpSessionFactory.setPassword",
                  "SessionFactory",
                  "CachingSessionFactory.__init__",
                  "FtpMessageHandler.__init__",
                  "FtpMessageHandler.setRemoteDirectoryExpressionString",
                  "FileNameGenerator.__init__",
                  "DefaultFtpSessionFactory.setUsername",
                  "FtpMessageHandler.setFileNameGenerator",
                  "DefaultFtpSessionFactory.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "@SpringBootApplication\npublic class FtpJavaApplication {\n\n    public static void main(String[] args) {\n        new SpringApplicationBuilder(FtpJavaApplication.class)\n            .web(false)\n            .run(args);\n    }\n\n    @Bean\n    @InboundChannelAdapter(channel = \"stream\")\n    public MessageSource<InputStream> ftpMessageSource() {\n        FtpStreamingMessageSource messageSource = new FtpStreamingMessageSource(template());\n        messageSource.setRemoteDirectory(\"ftpSource/\");\n        messageSource.setFilter(new AcceptAllFileListFilter<>());\n        messageSource.setMaxFetchSize(1);\n        return messageSource;\n    }\n\n    @Bean\n    @Transformer(inputChannel = \"stream\", outputChannel = \"data\")\n    public org.springframework.integration.transformer.Transformer transformer() {\n        return new StreamTransformer(\"UTF-8\");\n    }\n\n    @Bean\n    public FtpRemoteFileTemplate template() {\n        return new FtpRemoteFileTemplate(ftpSessionFactory());\n    }\n\n    @ServiceActivator(inputChannel = \"data\", adviceChain = \"after\")\n    @Bean\n    public MessageHandler handle() {\n        return System.out::println;\n    }\n\n    @Bean\n    public ExpressionEvaluatingRequestHandlerAdvice after() {\n        ExpressionEvaluatingRequestHandlerAdvice advice = new ExpressionEvaluatingRequestHandlerAdvice();\n        advice.setOnSuccessExpression(\n                \"@template.remove(headers['file_remoteDirectory'] + headers['file_remoteFile'])\");\n        advice.setPropagateEvaluationFailures(true);\n        return advice;\n    }\n\n}",
               "LOC": 46,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 2.220446049e-16,
               "API_Weights": 5.4213665162,
               "API_Qualified_Names": {
                  "SpringApplicationBuilder.__init__": "org.springframework.boot.builder.SpringApplicationBuilder.__init__"
               },
               "Url_Position": 43,
               "In_Page_Order": 14,
               "Num_API_Calls": 12,
               "Dist_Center": 0.3983161758,
               "MethodInvocations": [
                  "StreamTransformer.__init__",
                  "SpringApplicationBuilder.__init__",
                  "FtpRemoteFileTemplate.__init__",
                  "FtpStreamingMessageSource.setMaxFetchSize",
                  "FtpStreamingMessageSource.setFilter",
                  "ExpressionEvaluatingRequestHandlerAdvice.setPropagateEvaluationFailures",
                  "FtpStreamingMessageSource.__init__",
                  "FtpRemoteFileTemplate",
                  "ExpressionEvaluatingRequestHandlerAdvice.__init__",
                  "AcceptAllFileListFilter.__init__",
                  "ExpressionEvaluatingRequestHandlerAdvice.setOnSuccessExpression",
                  "FtpStreamingMessageSource.setRemoteDirectory"
               ]
            }
         ],
         "avg_cluster_api_weights": 11.099040402209392,
         "top_apis_by_cluster": [
            "springapplicationbuilder.__init__",
            "defaultftpsessionfactory.setusername",
            "sessionfactory",
            "cachingsessionfactory.__init__",
            "defaultftpsessionfactory.__init__",
            "defaultftpsessionfactory.sethost",
            "defaultftpsessionfactory.setpassword",
            "defaultftpsessionfactory.setport"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 2,
               "Code": "\r\n// downloading testStream.txt from remote folder \\test\r\n//the result is java.io.InputStream\r\n//with ftp server ftp.myhost.com, username ftp and password pass\r\n    \r\nInputStream is = null;\t\t\r\nString destFolder = \"/test\";\r\nString nameOfFile = \"testStream.txt\";\r\ntry {\r\n\tFTPClient ftpClient = new FTPClient(\"ftp.myhost.com\", \"ftp\", \"pass\");\r\n\tis = ftpClient.getFileAsStream(nameOfFile, destFolder);\t\t\t\r\n} catch (Exception e) {\r\n\te.printStackTrace();\t\t\t\r\n\t//or\r\n\t//ex.getCause().printStackTrace();  \r\n\t//(Depending on what version of JDK you use)\r\n}finally{\r\n\tif(is != null){try {is.close();} catch (IOException e) {}}\r\n}\r\n",
               "LOC": 20,
               "Url": "http://www.zehon.com/FTP_tutorial.htm",
               "Score": 1.0,
               "API_Weights": 2.9462345379,
               "API_Qualified_Names": {
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "InputStream.close": "java.io.InputStream.close"
               },
               "Url_Position": 25,
               "In_Page_Order": 8,
               "Num_API_Calls": 3,
               "Dist_Center": 0.0996121429,
               "MethodInvocations": [
                  "InputStream.close",
                  "FTPClient.getFileAsStream",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "\r\n// upload an java.io.InputStream representing C:\\myfiles\\test.txt to \r\n//remote folder \\myftpFolder \r\n//with ftp server ftp.myhost.com, username ftp and password pass\r\n    \r\nInputStream is = null;\r\nString filePath = \"C:\\\\myfiles\\\\test.txt\";\r\nFile localFile = new File(filePath);        \r\ntry {\r\n\tis = new BufferedInputStream(new FileInputStream(localFile));\r\n} catch (FileNotFoundException e1) {\r\n\te1.printStackTrace();\r\n}\r\nString destFolder = \"/myftpFolder\";\r\nString nameOfFile = \"testStream.txt\";\r\nint status = -1;\r\ntry {\r\n    FTPClient ftpClient = new FTPClient(\"ftp.myhost.com\", \"ftp\", \"pass\" );\r\n\tstatus = ftpClient.sendFile(is, nameOfFile, destFolder);\r\n} catch (FileTransferException e) {\r\n\te.printStackTrace();\r\n\t//or\r\n\t//ex.getCause().printStackTrace();  \r\n\t//(Depending on what version of JDK you use)\t\t\t\r\n}finally{\r\n\tif(is != null){try {is.close();} catch (IOException e) {}}\r\n}\r\n",
               "LOC": 28,
               "Url": "http://www.zehon.com/FTP_tutorial.htm",
               "Score": 0.8225060066,
               "API_Weights": 6.2267304898,
               "API_Qualified_Names": {
                  "File.__init__": "java.io.File.__init__",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "InputStream.__init__": "java.io.InputStream.__init__",
                  "FTPClient.__init__": "org.apache.commons.net.ftp.FTPClient.__init__",
                  "InputStream.close": "java.io.InputStream.close"
               },
               "Url_Position": 25,
               "In_Page_Order": 4,
               "Num_API_Calls": 6,
               "Dist_Center": 0.1549056665,
               "MethodInvocations": [
                  "File.__init__",
                  "InputStream.close",
                  "FTPClient.sendFile",
                  "FileInputStream.__init__",
                  "InputStream.__init__",
                  "FTPClient.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "\r\n// upload an java.io.InputStream representing C:\\myfiles\\test.txt to \r\n//remote folder \\myftpFolder \r\n//with ftp server ftp.myhost.com, username ftp and password pass\r\n    \r\n\r\nInputStream is = null;\r\nString filePath = \"C:\\\\myfiles\\\\test.txt\";\r\nFile localFile = new File(filePath);        \r\ntry {\r\n\tis = new BufferedInputStream(new FileInputStream(localFile));\r\n} catch (FileNotFoundException e1) {\r\n\t// TODO Auto-generated catch block\r\n\te1.printStackTrace();\r\n}\r\nString destFolder = \"/myftpFolder\";\r\nString nameOfFile = \"testStream.txt\";\r\nint status = -1;\r\ntry {\r\n   \r\n\tstatus = FTP.sendFile(is, nameOfFile, destFolder, \r\n\t                            \"ftp.myhost.com\", \"ftp\", \"pass\" );\r\n} catch (FileTransferException e) {\r\n\te.printStackTrace();\r\n\t//or\r\n\t//ex.getCause().printStackTrace();  (\r\n\t//Depending on what version of JDK you use)\t\t\t\r\n}finally{\r\n\tif(is != null){try {is.close();} catch (IOException e) {}}\r\n}\r\n\r\n\r\n",
               "LOC": 33,
               "Url": "http://www.zehon.com/FTP_tutorial.htm",
               "Score": 0.705403604,
               "API_Weights": 4.9571457519,
               "API_Qualified_Names": {
                  "File.__init__": "java.io.File.__init__",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "InputStream.__init__": "java.io.InputStream.__init__",
                  "InputStream.close": "java.io.InputStream.close"
               },
               "Url_Position": 25,
               "In_Page_Order": 3,
               "Num_API_Calls": 4,
               "Dist_Center": 0.1913857994,
               "MethodInvocations": [
                  "File.__init__",
                  "FileInputStream.__init__",
                  "InputStream.__init__",
                  "InputStream.close"
               ]
            },
            {
               "Cluster": 2,
               "Code": "String ftpUrl = \"ftp://%s:%s@%s/%s;type=i\";\nString host = \"www.myserver.com\";\nString user = \"tom\";\nString pass = \"secret\";\nString filePath = \"E:/Work/Project.zip\";\nString uploadPath = \"/MyProjects/archive/Project.zip\";\n\nftpUrl = String.format(ftpUrl, user, pass, host, uploadPath);\nSystem.out.println(\"Upload URL: \" + ftpUrl);\n\ntry {\n    URL url = new URL(ftpUrl);\n    URLConnection conn = url.openConnection();\n    OutputStream outputStream = conn.getOutputStream();\n    FileInputStream inputStream = new FileInputStream(filePath);\n\n    byte[] buffer = new byte[BUFFER_SIZE];\n    int bytesRead = -1;\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\n        outputStream.write(buffer, 0, bytesRead);\n    }\n\n    inputStream.close();\n    outputStream.close();\n\n    System.out.println(\"File uploaded\");\n} catch (IOException ex) {\n    ex.printStackTrace();\n}\n",
               "LOC": 30,
               "Url": "https://stackoverflow.com/questions/17454529/uploading-to-ftp-using-java",
               "Score": 0.5939176612,
               "API_Weights": 3.8682980604,
               "API_Qualified_Names": {
                  "URL.__init__": "java.net.URL.__init__",
                  "URL.openConnection": "java.net.URL.openConnection",
                  "URLConnection.getOutputStream": "java.net.URLConnection.getOutputStream",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FileInputStream.read": "java.io.FileInputStream.read",
                  "FileInputStream.close": "java.io.FileInputStream.close",
                  "OutputStream.close": "java.io.OutputStream.close"
               },
               "Url_Position": 3,
               "In_Page_Order": 1,
               "Num_API_Calls": 7,
               "Dist_Center": 0.2261162738,
               "MethodInvocations": [
                  "FileInputStream.read",
                  "URL.openConnection",
                  "OutputStream.close",
                  "URL.__init__",
                  "URLConnection.getOutputStream",
                  "FileInputStream.__init__",
                  "FileInputStream.close"
               ]
            },
            {
               "Cluster": 2,
               "Code": "try {\n    SimpleFTP ftp = new SimpleFTP();\n    \n    // Connect to an FTP server on port 21.\n    ftp.connect(\"ftp.somewhere.net\", 21, \"username\", \"password\");\n    \n    // Set binary mode.\n    ftp.bin();\n    \n    // Change to a new working directory on the FTP server.\n    ftp.cwd(\"web\");\n    \n    // Upload some files.\n    ftp.stor(new File(\"webcam.jpg\"));\n    ftp.stor(new File(\"comicbot-latest.png\"));\n    \n    // You can also upload from an InputStream, e.g.\n    ftp.stor(new FileInputStream(new File(\"test.png\")), \"test.png\");\n    ftp.stor(someSocket.getInputStream(), \"blah.dat\");\n    \n    // Quit from the FTP server.\n    ftp.disconnect();\n}\ncatch (IOException e) {\n    // Jibble.\n}",
               "LOC": 26,
               "Url": "http://www.jibble.org/simpleftp/",
               "Score": 0.1325408627,
               "API_Weights": 4.7463657707,
               "API_Qualified_Names": {
                  "File.__init__": "java.io.File.__init__",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__"
               },
               "Url_Position": 21,
               "In_Page_Order": 2,
               "Num_API_Calls": 8,
               "Dist_Center": 0.3698459201,
               "MethodInvocations": [
                  "File.__init__",
                  "SimpleFTP.__init__",
                  "SimpleFTP.connect",
                  "SimpleFTP.cwd",
                  "FileInputStream.__init__",
                  "SimpleFTP.stor",
                  "SimpleFTP.bin",
                  "SimpleFTP.disconnect"
               ]
            },
            {
               "Cluster": 2,
               "Code": "BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f));\nres = client.storeFile(\"File Name\", bis);\nbis.close();\nclient.logout();\n",
               "LOC": 5,
               "Url": "https://stackoverflow.com/questions/5925572/ftpclient-java-upload-file",
               "Score": 0.0,
               "API_Weights": 2.8312533484,
               "API_Qualified_Names": {
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
                  "BufferedInputStream.close": "java.io.BufferedInputStream.close"
               },
               "Url_Position": 5,
               "In_Page_Order": 4,
               "Num_API_Calls": 3,
               "Dist_Center": 0.4111354938,
               "MethodInvocations": [
                  "FileInputStream.__init__",
                  "BufferedInputStream.__init__",
                  "BufferedInputStream.close"
               ]
            }
         ],
         "avg_cluster_api_weights": 4.262671326526983,
         "top_apis_by_cluster": [
            "inputstream.close",
            "fileinputstream.__init__",
            "inputstream.__init__",
            "file.__init__",
            "ftpclient.getfileasstream",
            "ftpclient.__init__",
            "bufferedinputstream.__init__",
            "bufferedinputstream.close"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 3,
               "Code": "import com.jscape.inet.ftp.*;\nimport java.io.*;\nimport java.util.Enumeration;\n\npublic class FTPUpload extends FtpAdapter {\n    private String hostname;\n    private String username;\n    private String password;\n    \n    // perform single file upload\n    public void doUpload(String hostname, String username, String password, String filter) throws FtpException {\n        Ftp ftp = new Ftp(hostname,username,password);\n        \n        //capture Ftp related events\n        ftp.addFtpListener(this);\n        ftp.connect();\n        ftp.setBinary();\n        ftp.mupload(filter);\n        ftp.disconnect();\n    }\n    \n    public static void main(String[] args) {\n        String hostname = \"ftp.somewebsite.com\";\n        String username = \"trusting_puppy\";\n        String password = \"12345678\";\n        String filter = \".*\\\\.bat\";\n        try {\n            FTPUpload theUploader = new FTPUpload();\n            theUploader.doUpload(hostname,username,password,filter);\n        }\n        catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n",
               "LOC": 36,
               "Url": "http://www.jscape.com/blog/bid/73656/Transferring-Files-with-Java-FTP-Library",
               "Score": 1.0,
               "API_Weights": 4.2364425065,
               "API_Qualified_Names": {},
               "Url_Position": 14,
               "In_Page_Order": 1,
               "Num_API_Calls": 8,
               "Dist_Center": 0.0516786161,
               "MethodInvocations": [
                  "Ftp.__init__",
                  "Ftp.mupload",
                  "Ftp.addFtpListener",
                  "Ftp.setBinary",
                  "Ftp.connect",
                  "Ftp.disconnect",
                  "FTPUpload.doUpload",
                  "FTPUpload.__init__"
               ]
            },
            {
               "Cluster": 3,
               "Code": "import com.jscape.inet.ftp.*;\r\nimport com.jscape.inet.ftps.*;\r\nimport java.io.*;\r\nimport java.util.Enumeration;\r\n\r\npublic class SecureUpload extends FtpAdapter {\r\n    private String hostname;\r\n    private String username;\r\n    private String password;\r\n    \r\n    // perform multiple file upload\r\n    public void doUpload(String hostname, String username, String password) throws FtpException {\r\n        Ftps ftp = new Ftps(hostname,username,password);\r\n        \r\n        //capture Ftps related events\r\n        ftp.addFtpListener(this);\r\n\t\t\r\n\t\t// Set the connection type. Explicit is Ftps.AUTH_TLS. \r\n\t\t// Implicit (which is deprecated) is Ftps.IMPLICIT_SSL\r\n\t\tftp.setConnectionType(Ftps.AUTH_TLS);\r\n\t\t\r\n        ftp.connect();\r\n        ftp.setBinary();\r\n        ftp.mupload(\".*\\\\.gif\");\r\n        ftp.disconnect();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        String hostname = \"ftp.somewebsite.com\";\r\n        String username = \"IFeelSecure\";\r\n        String password = \"zip1a2dee3doo4dah\";\r\n        try {\r\n            SecureUpload theUploader = new SecureUpload();\r\n            theUploader.doUpload(hostname,username,password);\r\n        }\r\n        catch(Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n",
               "LOC": 41,
               "Url": "http://www.jscape.com/blog/bid/73826/Secure-File-Transfer-with-Java-FTP-Library",
               "Score": 0.660883437,
               "API_Weights": 4.4075779849,
               "API_Qualified_Names": {},
               "Url_Position": 19,
               "In_Page_Order": 1,
               "Num_API_Calls": 9,
               "Dist_Center": 0.195232466,
               "MethodInvocations": [
                  "Ftps.connect",
                  "Ftps.setConnectionType",
                  "Ftps.disconnect",
                  "SecureUpload.doUpload",
                  "Ftps.addFtpListener",
                  "SecureUpload.__init__",
                  "Ftps.setBinary",
                  "Ftps.mupload",
                  "Ftps.__init__"
               ]
            },
            {
               "Cluster": 3,
               "Code": "Closeable closeable = new IntegrationMessageHeaderAccessor(message).getCloseableResource();\nif (closeable != null) {\n    closeable.close();\n}",
               "LOC": 4,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.6048763373,
               "API_Weights": 1.4142135624,
               "API_Qualified_Names": {
                  "Closeable.close": "java.io.Closeable.close"
               },
               "Url_Position": 43,
               "In_Page_Order": 18,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2189412307,
               "MethodInvocations": [
                  "IntegrationMessageHeaderAccessor.__init__",
                  "Closeable.close"
               ]
            },
            {
               "Cluster": 3,
               "Code": "/*\r\n * SecureDownload.java\r\n *\r\n * An example using FTPS.\r\n */\r\n\r\nimport com.jscape.inet.ftp.*;\r\nimport com.jscape.inet.ftps.*;\r\nimport java.io.*;\r\nimport java.util.Enumeration;\r\n\r\npublic class SecureDownload extends FtpAdapter {\r\n    private String hostname;\r\n    private String username;\r\n    private String password;\r\n    private String filter;\r\n    \r\n    // Multiple file downloader from one particular website.\r\n    public void doDownload(String filter) throws FtpException {\r\n        Ftps ftp = new Ftps();\r\n        \r\n        //capture Ftp related events\r\n        ftp.addFtpListener(this);\r\n        ftp.setHostname(\"ftp.somewebsite.com\");\r\n        ftp.setUsername(\"IFeelSecure\");\r\n        ftp.setPassword(\"zip1a2dee3doo4dah\");\r\n        ftp.connect();\r\n        ftp.setBinary();\r\n        ftp.mdownload(filter);\r\n        ftp.disconnect();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        String filter;\r\n        try {\r\n\t\t\tfilter = \".*\\\\.gif\";\r\n            SecureDownload theDownloader = new SecureDownload();\r\n            theDownloader.doDownload(filter);\r\n        }\r\n        catch(Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n",
               "LOC": 45,
               "Url": "http://www.jscape.com/blog/bid/73826/Secure-File-Transfer-with-Java-FTP-Library",
               "Score": 0.4511761059,
               "API_Weights": 4.8908409037,
               "API_Qualified_Names": {},
               "Url_Position": 19,
               "In_Page_Order": 2,
               "Num_API_Calls": 11,
               "Dist_Center": 0.2840051714,
               "MethodInvocations": [
                  "SecureDownload.doDownload",
                  "Ftps.connect",
                  "Ftps.__init__",
                  "Ftps.setPassword",
                  "Ftps.disconnect",
                  "Ftps.addFtpListener",
                  "SecureDownload.__init__",
                  "Ftps.setBinary",
                  "Ftps.mdownload",
                  "Ftps.setHostname",
                  "Ftps.setUsername"
               ]
            },
            {
               "Cluster": 3,
               "Code": "@Bean\npublic DefaultFtpsSessionFactory sf() {\n    DefaultFtpsSessionFactory sf = new DefaultFtpsSessionFactory() {\n\n        @Override\n        protected FTPSClient createClientInstance() {\n            return new SharedSSLFTPSClient();\n        }\n\n    };\n    sf.setHost(\"...\");\n    sf.setPort(21);\n    sf.setUsername(\"...\");\n    sf.setPassword(\"...\");\n    sf.setNeedClientAuth(true);\n    return sf;\n}\n\nprivate static final class SharedSSLFTPSClient extends FTPSClient {\n\n    @Override\n    protected void _prepareDataSocket_(final Socket socket) throws IOException {\n        if (socket instanceof SSLSocket) {\n            // Control socket is SSL\n            final SSLSession session = ((SSLSocket) _socket_).getSession();\n            final SSLSessionContext context = session.getSessionContext();\n            context.setSessionCacheSize(0); // you might want to limit the cache\n            try {\n                final Field sessionHostPortCache = context.getClass()\n                        .getDeclaredField(\"sessionHostPortCache\");\n                sessionHostPortCache.setAccessible(true);\n                final Object cache = sessionHostPortCache.get(context);\n                final Method method = cache.getClass().getDeclaredMethod(\"put\", Object.class,\n                        Object.class);\n                method.setAccessible(true);\n                String key = String.format(\"%s:%s\", socket.getInetAddress().getHostName(),\n                        String.valueOf(socket.getPort())).toLowerCase(Locale.ROOT);\n                method.invoke(cache, key, session);\n                key = String.format(\"%s:%s\", socket.getInetAddress().getHostAddress(),\n                        String.valueOf(socket.getPort())).toLowerCase(Locale.ROOT);\n                method.invoke(cache, key, session);\n            }\n            catch (NoSuchFieldException e) {\n                // Not running in expected JRE\n                logger.warn(\"No field sessionHostPortCache in SSLSessionContext\", e);\n            }\n            catch (Exception e) {\n                // Not running in expected JRE\n                logger.warn(e.getMessage());\n            }\n        }\n\n    }\n\n}",
               "LOC": 55,
               "Url": "https://docs.spring.io/spring-integration/reference/html/ftp.html",
               "Score": 0.4270712678,
               "API_Weights": 3.1622776602,
               "API_Qualified_Names": {
                  "SSLSessionContext.setSessionCacheSize": "javax.net.ssl.SSLSessionContext.setSessionCacheSize",
                  "Field.setAccessible": "java.lang.reflect.Field.setAccessible",
                  "Field.get": "java.lang.reflect.Field.get",
                  "Object.getClass": "static org.apache.camel.component.jms.JmsMessageType.Object.getClass",
                  "Method.setAccessible": "java.lang.reflect.Method.setAccessible",
                  "Socket.getPort": "java.net.Socket.getPort",
                  "Socket.getInetAddress": "java.net.Socket.getInetAddress",
                  "Method.invoke": "java.lang.reflect.Method.invoke"
               },
               "Url_Position": 43,
               "In_Page_Order": 6,
               "Num_API_Calls": 10,
               "Dist_Center": 0.2942091623,
               "MethodInvocations": [
                  "SSLSessionContext.getClass",
                  "SSLSession.getSessionContext",
                  "Method.setAccessible",
                  "Object.getClass",
                  "Socket.getInetAddress",
                  "Socket.getPort",
                  "Field.get",
                  "Field.setAccessible",
                  "Method.invoke",
                  "SSLSessionContext.setSessionCacheSize"
               ]
            },
            {
               "Cluster": 3,
               "Code": "import com.jscape.inet.ftp.*;\nimport java.io.*;\nimport java.util.Enumeration;\n\npublic class FTPDownload extends FtpAdapter {\n    private String hostname;\n    private String username;\n    private String password;\n    private String filter;\n    \n    // perform multiple file download\n    public void doDownload(String hostname, String username, String password, String filter) throws FtpException {\n        Ftp ftp = new Ftp();\n        \n        //capture Ftp related events\n        ftp.addFtpListener(this);\n        ftp.setHostname(hostname);\n        ftp.setUsername(username);\n        ftp.setPassword(password);\n        ftp.connect();\n        ftp.setBinary();\n        ftp.mdownload(filter);\n        ftp.disconnect();\n    }\n    \n    public static void main(String[] args) {\n\t\tString hostname = \"ftp.somewebsite.com\";\n\t\tString username = \"trusting_puppy\";\n\t\tString password = \"12345678\";\n\t\tString filter = \".*\\\\.gif\";\n        try {\n            FTPDownload theDownloader = new FTPDownload();\n            theDownloader.doDownload(hostname,username,password,filter);\n        }\n        catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
               "LOC": 39,
               "Url": "http://www.jscape.com/blog/bid/73656/Transferring-Files-with-Java-FTP-Library",
               "Score": 0.0242904253,
               "API_Weights": 5.000151261,
               "API_Qualified_Names": {},
               "Url_Position": 14,
               "In_Page_Order": 2,
               "Num_API_Calls": 11,
               "Dist_Center": 0.4647131923,
               "MethodInvocations": [
                  "Ftp.__init__",
                  "FTPDownload.doDownload",
                  "FTPDownload.__init__",
                  "Ftp.addFtpListener",
                  "Ftp.mdownload",
                  "Ftp.setPassword",
                  "Ftp.setBinary",
                  "Ftp.setUsername",
                  "Ftp.connect",
                  "Ftp.disconnect",
                  "Ftp.setHostname"
               ]
            },
            {
               "Cluster": 3,
               "Code": "import com.chilkatsoft.*;\r\n\r\npublic class ChilkatExample {\r\n\r\n  static {\r\n    try {\r\n        System.loadLibrary(\"chilkat\");\r\n    } catch (UnsatisfiedLinkError e) {\r\n      System.err.println(\"Native code library failed to load.\\n\" + e);\r\n      System.exit(1);\r\n    }\r\n  }\r\n\r\n  public static void main(String argv[])\r\n  {\r\n    CkFtp2 ftp = new CkFtp2();\r\n\r\n    //  Any string unlocks the component for the 1st 30-days.\r\n    boolean success = ftp.UnlockComponent(\"Anything for 30-day trial\");\r\n    if (success != true) {\r\n        System.out.println(ftp.lastErrorText());\r\n        return;\r\n    }\r\n\r\n    ftp.put_Hostname(\"ftp.someFtpServer.com\");\r\n    ftp.put_Username(\"my-ftp-login\");\r\n    ftp.put_Password(\"my-ftp-password\");\r\n\r\n    //  Connect and login to the FTP server.\r\n    success = ftp.Connect();\r\n    if (success != true) {\r\n        System.out.println(ftp.lastErrorText());\r\n        return;\r\n    }\r\n\r\n    //  Change to the remote directory where the file will be uploaded.\r\n    success = ftp.ChangeRemoteDir(\"junk\");\r\n    if (success != true) {\r\n        System.out.println(ftp.lastErrorText());\r\n        return;\r\n    }\r\n\r\n    String localPath = \"c:/temp/veryLargeFile.dat\";\r\n    String remoteFilename = \"veryLargeFile.dat\";\r\n    //  Upload in chunks of 10 million bytes.\r\n    int chunkSize = 10000000;\r\n\r\n    success = ftp.LargeFileUpload(localPath,remoteFilename,chunkSize);\r\n    if (success != true) {\r\n        System.out.println(ftp.lastErrorText());\r\n        return;\r\n    }\r\n\r\n    success = ftp.Disconnect();\r\n\r\n    System.out.println(\"Large File Uploaded!\");\r\n\r\n  }\r\n}\r\n\r\n",
               "LOC": 61,
               "Url": "https://www.example-code.com/java/ftp_large_file_upload.asp",
               "Score": 0.0,
               "API_Weights": 3.1622776602,
               "API_Qualified_Names": {},
               "Url_Position": 15,
               "In_Page_Order": 1,
               "Num_API_Calls": 10,
               "Dist_Center": 0.4749957454,
               "MethodInvocations": [
                  "CkFtp2.UnlockComponent",
                  "CkFtp2.put_Hostname",
                  "CkFtp2.LargeFileUpload",
                  "CkFtp2.put_Password",
                  "CkFtp2.ChangeRemoteDir",
                  "CkFtp2.put_Username",
                  "CkFtp2.__init__",
                  "CkFtp2.Disconnect",
                  "CkFtp2.lastErrorText",
                  "CkFtp2.Connect"
               ]
            }
         ],
         "avg_cluster_api_weights": 3.7533973626851527,
         "top_apis_by_cluster": [
            "integrationmessageheaderaccessor.__init__",
            "closeable.close",
            "ftp.setbinary",
            "ftp.__init__",
            "ftp.addftplistener",
            "ftp.connect",
            "ftp.disconnect",
            "ftps.setbinary"
         ]
      }
   ]
}