[
{"query": "How to read CSV file", "url": "https://www.mkyong.com/java/how-to-read-and-parse-csv-file-in-java/", "url position": 1, "segments": [{"code": "\r\n1,US,United States\r\n2,MY,Malaysia\r\n3,AU,Australia\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\n\"1\",\"US\",\"United States\"\r\n\"2\",\"MY\",\"Malaysia\"\r\n\"3\",\"AU\",\"Australia\"\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\n\"aaa\",\"b,bb\",\"ccc\"\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\r\n\"aaa\",\"b\"\"bb\",\"ccc\"\r\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\"1.0.0.0\",\"1.0.0.255\",\"16777216\",\"16777471\",\"AU\",\"Australia\"\r\n\"1.0.1.0\",\"1.0.3.255\",\"16777472\",\"16778239\",\"CN\",\"China\"\r\n\"1.0.4.0\",\"1.0.7.255\",\"16778240\",\"16779263\",\"AU\",\"Australia\"\r\n\"1.0.8.0\",\"1.0.15.255\",\"16779264\",\"16781311\",\"CN\",\"China\"\r\n\"1.0.16.0\",\"1.0.31.255\",\"16781312\",\"16785407\",\"JP\",\"Japan\"\r\n\"1.0.32.0\",\"1.0.63.255\",\"16785408\",\"16793599\",\"CN\",\"China\"\r\n\"1.0.64.0\",\"1.0.127.255\",\"16793600\",\"16809983\",\"JP\",\"Japan\"\r\n\"1.0.128.0\",\"1.0.255.255\",\"16809984\",\"16842751\",\"TH\",\"Thailand\"\r\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\npackage com.mkyong.csv;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\npublic class CSVReader {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        String csvFile = \"/Users/mkyong/csv/country.csv\";\r\n        BufferedReader br = null;\r\n        String line = \"\";\r\n        String cvsSplitBy = \",\";\r\n\r\n        try {\r\n\r\n            br = new BufferedReader(new FileReader(csvFile));\r\n            while ((line = br.readLine()) != null) {\r\n\r\n                // use comma as separator\r\n                String[] country = line.split(cvsSplitBy);\r\n\r\n                System.out.println(\"Country [code= \" + country[4] + \" , name=\" + country[5] + \"]\");\r\n\r\n            }\r\n\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (br != null) {\r\n                try {\r\n                    br.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\npackage com.mkyong.csv;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\npublic class CSVReader {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        String csvFile = \"/Users/mkyong/csv/country.csv\";\r\n        String line = \"\";\r\n        String cvsSplitBy = \",\";\r\n\r\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\r\n\r\n            while ((line = br.readLine()) != null) {\r\n\r\n                // use comma as separator\r\n                String[] country = line.split(cvsSplitBy);\r\n\r\n                System.out.println(\"Country [code= \" + country[4] + \" , name=\" + country[5] + \"]\");\r\n\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nCountry [code= \"AU\" , name=\"Australia\"]\r\nCountry [code= \"CN\" , name=\"China\"]\r\nCountry [code= \"AU\" , name=\"Australia\"]\r\nCountry [code= \"CN\" , name=\"China\"]\r\nCountry [code= \"JP\" , name=\"Japan\"]\r\nCountry [code= \"CN\" , name=\"China\"]\r\nCountry [code= \"JP\" , name=\"Japan\"]\r\nCountry [code= \"TH\" , name=\"Thailand\"]\r\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\n\"aaa\",\"b\"\"bb\",\"ccc\"\r\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "10,AU,Australia\r\n11,AU,Aus\"\"tralia\r\n\"12\",\"AU\",\"Australia\"\r\n\"13\",\"AU\",\"Aus\"\"tralia\"\r\n\"14\",\"AU\",\"Aus,tralia\"\r\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\npackage com.mkyong.utils;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class CSVUtils {\r\n\r\n    private static final char DEFAULT_SEPARATOR = ',';\r\n    private static final char DEFAULT_QUOTE = '\"';\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        String csvFile = \"/Users/mkyong/csv/country2.csv\";\r\n\r\n        Scanner scanner = new Scanner(new File(csvFile));\r\n        while (scanner.hasNext()) {\r\n            List<String> line = parseLine(scanner.nextLine());\r\n            System.out.println(\"Country [id= \" + line.get(0) + \", code= \" + line.get(1) + \" , name=\" + line.get(2) + \"]\");\r\n        }\r\n        scanner.close();\r\n\r\n    }\r\n\r\n    public static List<String> parseLine(String cvsLine) {\r\n        return parseLine(cvsLine, DEFAULT_SEPARATOR, DEFAULT_QUOTE);\r\n    }\r\n\r\n    public static List<String> parseLine(String cvsLine, char separators) {\r\n        return parseLine(cvsLine, separators, DEFAULT_QUOTE);\r\n    }\r\n\r\n    public static List<String> parseLine(String cvsLine, char separators, char customQuote) {\r\n\r\n        List<String> result = new ArrayList<>();\r\n\r\n        //if empty, return!\r\n        if (cvsLine == null && cvsLine.isEmpty()) {\r\n            return result;\r\n        }\r\n\r\n        if (customQuote == ' ') {\r\n            customQuote = DEFAULT_QUOTE;\r\n        }\r\n\r\n        if (separators == ' ') {\r\n            separators = DEFAULT_SEPARATOR;\r\n        }\r\n\r\n        StringBuffer curVal = new StringBuffer();\r\n        boolean inQuotes = false;\r\n        boolean startCollectChar = false;\r\n        boolean doubleQuotesInColumn = false;\r\n\r\n        char[] chars = cvsLine.toCharArray();\r\n\r\n        for (char ch : chars) {\r\n\r\n            if (inQuotes) {\r\n                startCollectChar = true;\r\n                if (ch == customQuote) {\r\n                    inQuotes = false;\r\n                    doubleQuotesInColumn = false;\r\n                } else {\r\n\r\n                    //Fixed : allow \"\" in custom quote enclosed\r\n                    if (ch == '\\\"') {\r\n                        if (!doubleQuotesInColumn) {\r\n                            curVal.append(ch);\r\n                            doubleQuotesInColumn = true;\r\n                        }\r\n                    } else {\r\n                        curVal.append(ch);\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                if (ch == customQuote) {\r\n\r\n                    inQuotes = true;\r\n\r\n                    //Fixed : allow \"\" in empty quote enclosed\r\n                    if (chars[0] != '\"' && customQuote == '\\\"') {\r\n                        curVal.append('\"');\r\n                    }\r\n\r\n                    //double quotes in column will hit this!\r\n                    if (startCollectChar) {\r\n                        curVal.append('\"');\r\n                    }\r\n\r\n                } else if (ch == separators) {\r\n\r\n                    result.add(curVal.toString());\r\n\r\n                    curVal = new StringBuffer();\r\n                    startCollectChar = false;\r\n\r\n                } else if (ch == '\\r') {\r\n                    //ignore LF characters\r\n                    continue;\r\n                } else if (ch == '\\n') {\r\n                    //the end, break!\r\n                    break;\r\n                } else {\r\n                    curVal.append(ch);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        result.add(curVal.toString());\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\r\nCountry [id= 10, code= AU , name=Australia]\r\nCountry [id= 11, code= AU , name=Aus\"tralia]\r\nCountry [id= 12, code= AU , name=Australia]\r\nCountry [id= 13, code= AU , name=Aus\"tralia]\r\nCountry [id= 14, code= AU , name=Aus,tralia]\r\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\npackage com.mkyong.csv;\r\n\r\nimport com.mkyong.utils.CSVUtils;\r\nimport org.hamcrest.core.IsNull;\r\nimport org.junit.Test;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.core.Is.is;\r\n\r\npublic class CSVUtilsTest {\r\n\r\n    @Test\r\n    public void test_no_quote() {\r\n\r\n        String line = \"10,AU,Australia\";\r\n        List<String> result = CSVUtils.parseLine(line);\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Australia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_no_quote_but_double_quotes_in_column() throws Exception {\r\n\r\n        String line = \"10,AU,Aus\\\"\\\"tralia\";\r\n\r\n        List<String> result = CSVUtils.parseLine(line);\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Aus\\\"tralia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_double_quotes() {\r\n\r\n        String line = \"\\\"10\\\",\\\"AU\\\",\\\"Australia\\\"\";\r\n        List<String> result = CSVUtils.parseLine(line);\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Australia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_double_quotes_but_double_quotes_in_column() {\r\n\r\n        String line = \"\\\"10\\\",\\\"AU\\\",\\\"Aus\\\"\\\"tralia\\\"\";\r\n        List<String> result = CSVUtils.parseLine(line);\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Aus\\\"tralia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_double_quotes_but_comma_in_column() {\r\n\r\n        String line = \"\\\"10\\\",\\\"AU\\\",\\\"Aus,tralia\\\"\";\r\n        List<String> result = CSVUtils.parseLine(line);\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Aus,tralia\"));\r\n\r\n    }\r\n\r\n}\r\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\npackage com.mkyong.csv;\r\n\r\nimport com.mkyong.utils.CSVUtils;\r\nimport org.hamcrest.core.IsNull;\r\nimport org.junit.Test;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.core.Is.is;\r\n\r\npublic class CSVUtilsTestCustom {\r\n\r\n    @Test\r\n    public void test_custom_separator() {\r\n\r\n        String line = \"10|AU|Australia\";\r\n        List<String> result = CSVUtils.parseLine(line, '|');\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Australia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_custom_separator_and_quote() {\r\n\r\n        String line = \"'10'|'AU'|'Australia'\";\r\n        List<String> result = CSVUtils.parseLine(line, '|', '\\'');\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Australia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_custom_separator_and_quote_but_custom_quote_in_column() {\r\n\r\n        String line = \"'10'|'AU'|'Aus|tralia'\";\r\n        List<String> result = CSVUtils.parseLine(line, '|', '\\'');\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Aus|tralia\"));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void test_custom_separator_and_quote_but_double_quotes_in_column() {\r\n\r\n        String line = \"'10'|'AU'|'Aus\\\"\\\"tralia'\";\r\n        List<String> result = CSVUtils.parseLine(line, '|', '\\'');\r\n\r\n        assertThat(result, IsNull.notNullValue());\r\n        assertThat(result.size(), is(3));\r\n        assertThat(result.get(0), is(\"10\"));\r\n        assertThat(result.get(1), is(\"AU\"));\r\n        assertThat(result.get(2), is(\"Aus\\\"tralia\"));\r\n\r\n    }\r\n\r\n}\r\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\n\t<dependency>\r\n\t\t<groupId>com.opencsv</groupId>\r\n\t\t<artifactId>opencsv</artifactId>\r\n\t\t<version>3.8</version>\r\n\t</dependency>\r\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "10,AU,Australia\r\n11,AU,Aus\"\"tralia\r\n\"12\",\"AU\",\"Australia\"\r\n\"13\",\"AU\",\"Aus\"\"tralia\"\r\n\"14\",\"AU\",\"Aus,tralia\"\r\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\npackage com.mkyong.csv;\r\n\r\nimport com.opencsv.CSVReader;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\npublic class CSVReaderExample {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        String csvFile = \"/Users/mkyong/csv/country3.csv\";\r\n\r\n        CSVReader reader = null;\r\n        try {\r\n            reader = new CSVReader(new FileReader(csvFile));\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(\"Country [id= \" + line[0] + \", code= \" + line[1] + \" , name=\" + line[2] + \"]\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nCountry [id= 10, code= AU , name=Australia]\r\nCountry [id= 11, code= AU , name=Aus\"tralia]\r\nCountry [id= 12, code= AU , name=Australia]\r\nCountry [id= 13, code= AU , name=Aus\"tralia]\r\nCountry [id= 14, code= AU , name=Aus,tralia]\r\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "http://www.java67.com/2015/08/how-to-load-data-from-csv-file-in-java.html", "url position": 2, "segments": [{"code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Simple Java program to read CSV file in Java. In this program we will read\n * list of books stored in CSV file as comma separated values.\n * \n * @author WINDOWS 8\n *\n */\npublic class CSVReaderInJava {\n\n    public static void main(String... args) {\n        List<Book> books = readBooksFromCSV(\"books.txt\");\n\n        // let's print all the person read from CSV file\n        for (Book b : books) {\n            System.out.println(b);\n        }\n    }\n\n    private static List<Book> readBooksFromCSV(String fileName) {\n        List<Book> books = new ArrayList<>();\n        Path pathToFile = Paths.get(fileName);\n\n        // create an instance of BufferedReader\n        // using try with resource, Java 7 feature to close resources\n        try (BufferedReader br = Files.newBufferedReader(pathToFile,\n                StandardCharsets.US_ASCII)) {\n\n            // read the first line from the text file\n            String line = br.readLine();\n\n            // loop until all lines are read\n            while (line != null) {\n\n                // use string.split to load a string array with the values from\n                // each line of\n                // the file, using a comma as the delimiter\n                String[] attributes = line.split(\",\");\n\n                Book book = createBook(attributes);\n\n                // adding book into ArrayList\n                books.add(book);\n\n                // read next line before looping\n                // if end of file reached, line would be null\n                line = br.readLine();\n            }\n\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n\n        return books;\n    }\n\n    private static Book createBook(String[] metadata) {\n        String name = metadata[0];\n        int price = Integer.parseInt(metadata[1]);\n        String author = metadata[2];\n\n        // create and return book of this metadata\n        return new Book(name, price, author);\n    }\n\n}\n\nclass Book {\n    private String name;\n    private int price;\n    private String author;\n\n    public Book(String name, int price, String author) {\n        this.name = name;\n        this.price = price;\n        this.author = author;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getPrice() {\n        return price;\n    }\n\n    public void setPrice(int price) {\n        this.price = price;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book [name=\" + name + \", price=\" + price + \", author=\" + author\n                + \"]\";\n    }\n\n}\n\nOutput\nBook [name=Effective Java, price=42, author=Joshua Bloch]\nBook [name=Head First Java, price=39, author=Kathy Sierra]\nBook [name=Head First Design Pattern, price=44, author=Kathy Sierra]\nBook [name=Introduction to Algorithm, price=72, author=Thomas Cormen]", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://www.callicoder.com/java-read-write-csv-file-opencsv/", "url position": 8, "segments": [{"code": "<dependency>\n    <groupId>com.opencsv</groupId>\n    <artifactId>opencsv</artifactId>\n    <version>4.0</version>\n</dependency>\n\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "compile \"com.opencsv:opencsv:4.0\"\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "Rajeev Kumar Singh ,rajeevs@example.com,+91-9999999999,India\nSachin Tendulkar,sachin@example.com,+91-9999999998,India\nBarak Obama,barak.obama@example.com,+1-1111111111,United States\nDonald Trump,donald.trump@example.com,+1-2222222222,United States\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "name,email,phone,country\nRajeev Kumar Singh ,rajeevs@example.com,+91-9999999999,India\nSachin Tendulkar,sachin@example.com,+91-9999999998,India\nBarak Obama,barak.obama@example.com,+1-1111111111,United States\nDonald Trump,donald.trump@example.com,+1-2222222222,United States\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "import com.opencsv.CSVReader;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class OpenCSVReader {\n    private static final String SAMPLE_CSV_FILE_PATH = \"./users.csv\";\n\n    public static void main(String[] args) throws IOException {\n        try (\n            Reader reader = Files.newBufferedReader(Paths.get(SAMPLE_CSV_FILE_PATH));\n            CSVReader csvReader = new CSVReader(reader);\n        ) {\n            // Reading Records One by One in a String array\n            String[] nextRecord;\n            while ((nextRecord = csvReader.readNext()) != null) {\n                System.out.println(\"Name : \" + nextRecord[0]);\n                System.out.println(\"Email : \" + nextRecord[1]);\n                System.out.println(\"Phone : \" + nextRecord[2]);\n                System.out.println(\"Country : \" + nextRecord[3]);\n                System.out.println(\"==========================\");\n            }\n        }\n    }\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// Reading All Records at once into a List<String[]>\nList<String[]> records = csvReader.readAll();\nfor (String[] record : records) {\n    System.out.println(\"Name : \" + record[0]);\n    System.out.println(\"Email : \" + record[1]);\n    System.out.println(\"Phone : \" + record[2]);\n    System.out.println(\"Country : \" + record[3]);\n    System.out.println(\"---------------------------\");\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.CSVReaderBuilder;\n\nCSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build();\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.bean.CsvBindByName;\n\npublic class CSVUser {\n    @CsvBindByName\n    private String name;\n\n    @CsvBindByName(column = \"email\", required = true)\n    private String email;\n\n    @CsvBindByName(column = \"phone\")\n    private String phoneNo;\n\n    @CsvBindByName\n    private String country;\n\n\t// Getters and Setters (Omitted for brevity)\t\n}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.bean.CsvToBean;\nimport com.opencsv.bean.CsvToBeanBuilder;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic class OpenCSVReadAndParseToBean {\n    private static final String SAMPLE_CSV_FILE_PATH = \"./users-with-header.csv\";\n\n    public static void main(String[] args) throws IOException {\n        try (\n            Reader reader = Files.newBufferedReader(Paths.get(SAMPLE_CSV_FILE_PATH));\n        ) {\n            CsvToBean csvToBean = new CsvToBeanBuilder(reader)\n                    .withType(CSVUser.class)\n                    .withIgnoreLeadingWhiteSpace(true)\n                    .build();\n\n            List<CSVUser> csvUsers = csvToBean.parse();\n\n            for (CSVUser csvUser : csvUsers) {\n                System.out.println(\"Name : \" + csvUser.getName());\n                System.out.println(\"Email : \" + csvUser.getEmail());\n                System.out.println(\"PhoneNo : \" + csvUser.getPhoneNo());\n                System.out.println(\"Country : \" + csvUser.getCountry());\n                System.out.println(\"---------------------------\");\n            }\n        }\n    }\n}\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.bean.CsvBindByPosition;\n\npublic class CSVUser {\n    @CsvBindByPosition(position = 0)\n    private String name;\n\n    @CsvBindByPosition(position = 1)\n    private String email;\n\n    @CsvBindByPosition(position = 2)\n    private String phoneNo;\n\n    @CsvBindByPosition(position = 3)\n    private String country;\n\n    // Getters and Setters (Omitted for brevity)    \n}\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class MyUser {\n    private String name;\n    private String email;\n    private String phoneNo;\n    private String country;\n\n    public MyUser() {\n\n    }\n\n    public MyUser(String name, String email, String phoneNo, String country) {\n        this.name = name;\n        this.email = email;\n        this.phoneNo = phoneNo;\n        this.country = country;\n    }\n\t\n\t// Getters and Setters (Omitted for brevity)\n}\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.bean.ColumnPositionMappingStrategy;\nimport com.opencsv.bean.CsvToBean;\nimport com.opencsv.bean.CsvToBeanBuilder;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic class OpenCSVParseToBeanWithoutAnnotation {\n    private static final String SAMPLE_CSV_FILE_PATH = \"./users-with-header.csv\";\n\n    public static void main(String[] args) throws IOException {\n        try (\n            Reader reader = Files.newBufferedReader(Paths.get(SAMPLE_CSV_FILE_PATH));\n        ) {\n            ColumnPositionMappingStrategy strategy = new ColumnPositionMappingStrategy();\n            strategy.setType(MyUser.class);\n            String[] memberFieldsToBindTo = {\"name\", \"email\", \"phoneNo\", \"country\"};\n            strategy.setColumnMapping(memberFieldsToBindTo);\n\n            CsvToBean csvToBean = new CsvToBeanBuilder(reader)\n                    .withMappingStrategy(strategy)\n                    .withSkipLines(1)\n                    .withIgnoreLeadingWhiteSpace(true)\n                    .build();\n\n            List<MyUser> myUsers = csvToBean.parse();\n\n            for (MyUser myUser : myUsers) {\n                System.out.println(\"Name : \" + myUser.getName());\n                System.out.println(\"Email : \" + myUser.getEmail());\n                System.out.println(\"PhoneNo : \" + myUser.getPhoneNo());\n                System.out.println(\"Country : \" + myUser.getCountry());\n                System.out.println(\"---------------------------\");\n            }\n        }\n    }\n}\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.CSVWriter;\n\nimport java.io.Writer;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.IOException;\n\npublic class OpenCSVWriter {\n    private static final String STRING_ARRAY_SAMPLE = \"./string-array-sample.csv\";\n\n    public static void main(String[] args) throws IOException {\n        try (\n            Writer writer = Files.newBufferedWriter(Paths.get(STRING_ARRAY_SAMPLE));\n\n            CSVWriter csvWriter = new CSVWriter(writer,\n                    CSVWriter.DEFAULT_SEPARATOR,\n                    CSVWriter.NO_QUOTE_CHARACTER,\n                    CSVWriter.DEFAULT_ESCAPE_CHARACTER,\n                    CSVWriter.DEFAULT_LINE_END);\n        ) {\n            String[] headerRecord = {\"Name\", \"Email\", \"Phone\", \"Country\"};\n            csvWriter.writeNext(headerRecord);\n\n            csvWriter.writeNext(new String[]{\"Sundar Pichai \", \"sundar.pichai@gmail.com\", \"+1-1111111111\", \"India\"});\n            csvWriter.writeNext(new String[]{\"Satya Nadella\", \"satya.nadella@outlook.com\", \"+1-1111111112\", \"India\"});\n        }\n    }\n}\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.CSVWriter;\nimport com.opencsv.bean.StatefulBeanToCsv;\nimport com.opencsv.bean.StatefulBeanToCsvBuilder;\nimport com.opencsv.exceptions.CsvDataTypeMismatchException;\nimport com.opencsv.exceptions.CsvRequiredFieldEmptyException;\n\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class OpenCSVWriter {\n    private static final String OBJECT_LIST_SAMPLE = \"./object-list-sample.csv\";\n\n    public static void main(String[] args) throws IOException,\n            CsvDataTypeMismatchException,\n            CsvRequiredFieldEmptyException {\n\n        try (\n            Writer writer = Files.newBufferedWriter(Paths.get(STRING_ARRAY_SAMPLE));\n        ) {\n            StatefulBeanToCsv beanToCsv = new StatefulBeanToCsvBuilder(writer)\n                    .withQuotechar(CSVWriter.NO_QUOTE_CHARACTER)\n                    .build();\n\n            List<MyUser> myUsers = new ArrayList<>();\n            myUsers.add(new MyUser(\"Sundar Pichai \", \"sundar.pichai@gmail.com\", \"+1-1111111111\", \"India\"));\n            myUsers.add(new MyUser(\"Satya Nadella\", \"satya.nadella@outlook.com\", \"+1-1111111112\", \"India\"));\n\n            beanToCsv.write(myUsers);\n        }\n    }\n}\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://stackoverflow.com/questions/14274259/read-csv-with-scanner", "url position": 3, "segments": [{"code": "scanner.useDelimiter(\",\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "31", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\n\npublic class TestScanner {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new File(\"/Users/pankaj/abc.csv\"));\n        scanner.useDelimiter(\",\");\n        while(scanner.hasNext()){\n            System.out.print(scanner.next()+\"|\");\n        }\n        scanner.close();\n    }\n\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "31", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "a,b,c d,e\n1,2,3 4,5\nX,Y,Z A,B\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "31", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "a|b|c d|e\n1|2|3 4|5\nX|Y|Z A|B|\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "31", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "while (inputStream.hasNextLine())\n{\n    String line = inputStream.nextLine();\n    String[] fields = line.split(\",\");\n    if (fields.length >= 4) // At least one address specified.\n    {\n        for (String field: fields) System.out.print(field + \"|\");\n        System.out.println();\n    }\n    else\n    {\n        System.err.println(\"Invalid record: \" + line);\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "7", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "scanner.useDelimiter(\"\\\\s*,\\\\s*\");\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "package take;\n\npublic class DateUtil {\n\n// List of all date formats that we want to parse.\n// Add your own format here.\nprivate static List<SimpleDateFormat> \n        dateFormats = new ArrayList<SimpleDateFormat>() {\n    private static final long serialVersionUID = 1L; \n    {\n        add(new SimpleDateFormat(\"M/dd/yyyy\"));\n        add(new SimpleDateFormat(\"dd.M.yyyy\"));\n        add(new SimpleDateFormat(\"M/dd/yyyy hh:mm:ss a\"));\n        add(new SimpleDateFormat(\"dd.M.yyyy hh:mm:ss a\"));\n        add(new SimpleDateFormat(\"dd.MMM.yyyy\"));\n        add(new SimpleDateFormat(\"dd-MMM-yyyy\"));\n    }\n};\n\n/**\n * Convert String with various formats into java.util.Date\n * \n * @param input\n *            Date as a string\n * @return java.util.Date object if input string is parsed \n *          successfully else returns null\n */\npublic static Date convertToDate(String input) {\n    Date date = null;\n    if(null == input) {\n        return null;\n    }\n    for (SimpleDateFormat format : dateFormats) {\n        try {\n            format.setLenient(false);\n            date = format.parse(input);\n        } catch (ParseException e) {\n            //Shhh.. try other formats\n        }\n        if (date != null) {\n            break;\n        }\n    }\n\n    return date;\n}\n\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "-1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "/**\n * @param args the command line arguments\n * @throws java.io.FileNotFoundException\n */\npublic static void main(String[] args) throws FileNotFoundException {\n    try (Scanner scanner = new Scanner(new File(\"C:\\\\Users\\\\YourName\\\\Folder\\\\file.csv\"))) {\n         scanner.useDelimiter(\",\");\n         while(scanner.hasNext()){\n             System.out.print(scanner.next()+\"|\");\n         }}\n    }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": "-2", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://stackoverflow.com/questions/40074840/reading-a-csv-file-into-a-array", "url position": 5, "segments": [{"code": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class CsvParser {\n\n    public static void main(String[] args) {\n        String fileName= \"read_ex.csv\";\n        File file= new File(fileName);\n\n        // this gives you a 2-dimensional array of strings\n        List<List<String>> lines = new ArrayList<>();\n        Scanner inputStream;\n\n        try{\n            inputStream = new Scanner(file);\n\n            while(inputStream.hasNext()){\n                String line= inputStream.next();\n                String[] values = line.split(\",\");\n                // this adds the currently parsed line to the 2-dimensional string array\n                lines.add(Arrays.asList(values));\n            }\n\n            inputStream.close();\n        }catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        // the following code lets you iterate through the 2-dimensional array\n        int lineNo = 1;\n        for(List<String> line: lines) {\n            int columnNo = 1;\n            for (String value: line) {\n                System.out.println(\"Line \" + lineNo + \" Column \" + columnNo + \": \" + value);\n                columnNo++;\n            }\n            lineNo++;\n        }\n    }\n\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "10", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "value_1-1,value_1-2,value_1-3,value_1-4\nvalue_2-1,value_2-2,value_2-3,value_2-4\nvalue_3-1,value_3-2,value_3-3,value_3-4\nvalue_4-1,value_4-2,value_4-3,value_4-4\nvalue_5-1,value_5-2,value_5-3,value_5-4\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "10", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Line 1 Column 1: value_1-1\nLine 1 Column 2: value_1-2\nLine 1 Column 3: value_1-3\nLine 1 Column 4: value_1-4\nLine 2 Column 1: value_2-1\nLine 2 Column 2: value_2-2\nLine 2 Column 3: value_2-3\nLine 2 Column 4: value_2-4\nLine 3 Column 1: value_3-1\nLine 3 Column 2: value_3-2\nLine 3 Column 3: value_3-3\nLine 3 Column 4: value_3-4\nLine 4 Column 1: value_4-1\nLine 4 Column 2: value_4-2\nLine 4 Column 3: value_4-3\nLine 4 Column 4: value_4-4\nLine 5 Column 1: value_5-1\nLine 5 Column 2: value_5-2\nLine 5 Column 3: value_5-3\nLine 5 Column 4: value_5-4\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "10", "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://stackoverflow.com/questions/19931929/reading-a-column-from-csv-file-using-java", "url position": 6, "segments": [{"code": "while ((line = br.readLine()) !=null) {\n  ...\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "15", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "public static void main(String[] args) throws Exception {\n    File file = new File(\"test.csv\");\n    List<String> lines = Files.readAllLines(file.toPath(), \n            StandardCharsets.UTF_8);\n    for (String line : lines) {\n        String[] array = line.split(\",\");\n        System.out.println(array[0]);\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "17", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "a\n1RW\n1RW\n1RW\n1RW\n1RW\n1RW\n1R1W\n1R1W\n1R1W\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "17", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\"Name\" , \"Job\" , \"Address\"\n\"Pratiyush, Singh\" , \"Teacher\" , \"Berlin, Germany\"\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "12", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "    Reader in = new FileReader(\"input1.csv\");\n    Iterable<CSVRecord> records = CSVFormat.EXCEL.parse(in);\n    for (CSVRecord record : records) {\n      System.out.println(record.get(0));\n    }\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "12", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.BufferedReader;\nimport java.io.FileReader;\n\npublic class InsertValuesIntoTestDb {\n\n  @SuppressWarnings(\"rawtypes\")\n  public static void main(String[] args) throws Exception {\n      String splitBy = \",\";\n      BufferedReader br = new BufferedReader(new FileReader(\"test.csv\"));\n      while((line = br.readLine()) != null){\n           String[] b = line.split(splitBy);\n           System.out.println(b[0]);\n      }\n      br.close();\n\n  }\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "4", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://www.admfactory.com/read-csv-file-in-java/", "url position": 14, "segments": [{"code": "Name,Address,PhoneDeidre Haider,\"631 Grand Avenue Glendora, CA 91740\",202-555-0150Annette Sharrock,\"230 Railroad Avenue Myrtle Beach, SC 29577\",202-555-0149Ebonie Skowron,\"762 Deerfield Drive Romeoville, IL 60446\",202-555-0155Devon Huynh,\"573 Hudson Street Wooster, OH 44691\",202-555-0196Cristine Riddle,\"858 2nd Avenue Prior Lake, MN 55372\",202-555-0182Kristeen Ellman,\"169 Creekside Drive Front Royal, VA 22630\",202-555-0198Ocie Blansett,\"8 Grant Street Dracut, MA 01826\",202-555-0135Ami Feucht,\"783 4th Street Leland, NC 28451\",202-555-0105Elroy Geers,\"856 Grant Avenue Richmond, VA 23223\",202-555-0134Shaunte Brockwell,\"1000 Park Place Mooresville, NC 28115\",202-555-0140Evonne Kellar,\"309 Briarwood Drive Stow, OH 44224\",202-555-0155Gladis Schwalb,\"407 13th Street Hobart, IN 46342\",202-555-0109Terina Fukuda,\"25 Primrose Lane\"\" High Point, NC 27265\",202-555-0151Annetta Knicely,\"647 Fieldstone Drive Dalton, GA 30721\",202-555-0187Rozanne Westmoreland,\"36 9th Street West Voorhees, NJ 08043\",202-555-0156Louella Hutchens,\"63 Route 41 Helotes, TX 78023\",202-555-0113Alesha Ennis,\"505 Bank Street\"\" Morganton, NC 28655\",202-555-0133Carisa Motton,\"114 Orchard Avenue Fort Mill, SC 29708\",202-555-0153Zane Gard,\"678 Spruce Avenue Milford, MA 01757\",202-555-0124Marya Patchett,\"868 2nd Street Canonsburg, PA 15317\",202-555-0189", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package com.admfactory;import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;public class CSVParser {/** characters used as delimiters */private char[] separators = {',', '\\t'};/** when the delimiters appears in the text the value will be between two double quotas */private char specialChars = '\"';/** * Method used to spit each line into values *  * @param line * @return the array of values */private String[] lineParser(String line) {String[] result = null;/** Using ArrayList as the number of values are unknown at this stage */ArrayList<String> parsedLine = new ArrayList<String>();int len = line.length();int i = 0;/** iterate through all the chars in the line */while (i < len) {int nextSep = len;/** Get the next separator */for (int j = 0; j < separators.length; ++j) {int temp = line.indexOf(separators[j], i);if ((temp == -1) || (temp >= nextSep))continue;nextSep = temp;}/** Place the special separator at the end of the string */int nextSpecialSep = len;/** Check if there is any special separator */int temp = line.indexOf(specialChars, i);if ((temp == -1) || (temp >= nextSpecialSep))nextSpecialSep = len;elsenextSpecialSep = temp;/** if we are at the special separator get the text until the next special separator */if (nextSpecialSep == i) {char c = line.charAt(i);/** check if there is any double quote chars in the text */int d = line.indexOf((c + \"\") + (c + \"\"), i + 1);/** if there are two double quota chars jump to the next one - are part of the text */int end = line.indexOf(c, d >= 0 ? d + 3 : i + 1);if (end == -1) {end = len;}String toAdd = line.substring(i + 1, end);/** Replace two double quota with one double quota */toAdd = toAdd.replaceAll((c + \"\") + (c + \"\"), c + \"\");parsedLine.add(toAdd);i = end + 1;}/** if we are at a normal separator, ignore the separator and jump to the next char */else if (nextSep == i) {++i;}/** Copy the value in the result string */else {parsedLine.add(line.substring(i, nextSep));i = nextSep;}}/** Convert the result to String[] */result = parsedLine.toArray(new String[parsedLine.size()]);return result;}/** *  * Method used to parse the file *  * @param path * to the file * @return array of all lines */public ArrayList<String[]> parser(String path) {BufferedReader br = null;ArrayList<String[]> result = new ArrayList<String[]>();try {br = new BufferedReader(new FileReader(path));/** Parsing each line in the file */String line = \"\";while ((line = br.readLine()) != null) {/** Parse each line into values */String[] values = lineParser(line);/** Adding the lines to the array list */result.add(values);}}catch (Exception e) {/** Just display the error */e.printStackTrace();}finally {/** Closing the the stream */if (br != null) {try {br.close();} catch (IOException e) {e.printStackTrace();}}}return result;}/** * main method for testing *  * @param args */public static void main(String[] args){String path = \"names.csv\";System.out.println(\"CSV Parser Example\");System.out.println(\"Parsing file \" + path);CSVParser parser = new CSVParser();ArrayList<String[]> lines = parser.parser(path);System.out.println(\"File Content\");for (int i = 0; i < lines.size(); i++) {String[] line = lines.get(i);for (int j = 0; j < line.length; j++) {String print = String.format(\"%-45s\", line[j]);System.out.print(print);}System.out.println();}}}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "CSV Parser ExampleParsing file names.csvFile ContentName AddressPhoneDeidre Haider631 Grand Avenue Glendora, CA 91740202-555-0150 Annette Sharrock 230 Railroad Avenue Myrtle Beach, SC 29577 202-555-0149 Ebonie Skowron 762 Deerfield Drive Romeoville, IL 60446 202-555-0155 Devon Huynh573 Hudson Street Wooster, OH 44691202-555-0196 Cristine Riddle858 2nd Avenue Prior Lake, MN 55372202-555-0182 Kristeen Ellman169 Creekside Drive Front Royal, VA 22630202-555-0198 Ocie Blansett8 Grant Street Dracut, MA 01826202-555-0135 Ami Feucht 783 4th Street Leland, NC 28451202-555-0105 Elroy Geers856 Grant Avenue Richmond, VA 23223202-555-0134 Shaunte Brockwell1000 Park Place Mooresville, NC 28115202-555-0140 Evonne Kellar309 Briarwood Drive Stow, OH 44224 202-555-0155 Gladis Schwalb 407 13th Street Hobart, IN 46342 202-555-0109 Terina Fukuda25 Primrose Lane\" High Point, NC 27265 202-555-0151 Annetta Knicely647 Fieldstone Drive Dalton, GA 30721202-555-0187 Rozanne Westmoreland 36 9th Street West Voorhees, NJ 08043202-555-0156 Louella Hutchens 63 Route 41 Helotes, TX 78023202-555-0113 Alesha Ennis 505 Bank Street\" Morganton, NC 28655 202-555-0133 Carisa Motton114 Orchard Avenue Fort Mill, SC 29708 202-555-0153 Zane Gard678 Spruce Avenue Milford, MA 01757202-555-0124 Marya Patchett 868 2nd Street Canonsburg, PA 15317202-555-0189 ", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "http://opencsv.sourceforge.net/", "url position": 13, "segments": [{"code": "\n     List<MyBean> beans = new CsvToBeanBuilder(FileReader(\"yourfile.csv\"))\n       .withType(Visitors.class).build().parse();\n   \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     // List<MyBean> beans comes from somewhere earlier in your code.\n     Writer writer = new FileWriter(\"yourfile.csv\");\n     StatefulBeanToCsvBuilder beanToCsv = StatefulBeanToCsvBuilder(writer).build();\n     beanToCsv.write(beans);\n     writer.close();\n   \n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVReader reader = new CSVReader(new FileReader(\"yourfile.csv\"), '\\t');\n   \n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\n     CsvToBean csvToBean = CsvToBeanBuilder(new FileReader(\"yourfile.csv\"))\n       .withSeparator('\\t').build();\n   \n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVReader reader = new CSVReader(new FileReader(\"yourfile.csv\"), '\\t', '\\'');\n   \n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\n     CsvToBean csvToBean = CsvToBeanBuilder(new FileReader(\"yourfile.csv\"))\n       .withSeparator('\\t').withQuoteChar('\\'').build();\n   \n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVReader reader = new CSVReader(new FileReader(\"yourfile.csv\"));\n     String [] nextLine;\n     while ((nextLine = reader.readNext()) != null) {\n        // nextLine[] is an array of values from the line\n        System.out.println(nextLine[0] + nextLine[1] + \"etc...\");\n     }\n   \n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVReader reader = new CSVReader(new FileReader(\"yourfile.csv\"));\n     List<String[]> myEntries = reader.readAll();\n   \n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVIterator iterator = new CSVIterator(new CSVReader(new FileReader(\"yourfile.csv\")));\n     for(String[] nextLine : iterator) {\n        // nextLine[] is an array of values from the line\n        System.out.println(nextLine[0] + nextLine[1] + \"etc...\");\n     }\n   \n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVReader reader = new CSVReader(new FileReader(\"yourfile.csv\"));\n     for(String[] nextLine : reader.iterator()) {\n        // nextLine[] is an array of values from the line\n        System.out.println(nextLine[0] + nextLine[1] + \"etc...\");\n     }\n   \n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     firstName,lastName,visitsToWebsite\n     John,Doe,12\n     Jane,Doe,23\n   \n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n     public class Visitors {\n\n     @CsvBindByName\n     private String firstName;\n\n     @CsvBindByName\n     private String lastName;\n\n     @CsvBindByName\n     private int visitsToWebsite;\n\n     // Getters and setters go here.\n     }\n   \n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     List<Visitors> beans = new CsvToBeanBuilder(FileReader(\"yourfile.csv\"))\n       .withType(Visitors.class).build().parse();\n   \n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     First name,Last name,1 visit only\n     John,Doe,true\n     Jane,Doe,false\n   \n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n     public class Visitors {\n\n     @CsvBindByName(column = \"First Name\", required = true)\n     private String firstName;\n\n     @CsvBindByName(column = \"Last Name\", required = true)\n     private String lastName;\n\n     @CsvBindByName(column = \"1 visit only\")\n     private boolean onlyOneVisit;\n\n     // Getters and setters go here.\n     }\n   \n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     John,Doe,12\n     Jane,Doe,23\n   \n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n     public class Visitors {\n\n     @CsvBindByPosition(position = 0)\n     private String firstName;\n\n     @CsvBindByPosition(position = 1)\n     private String lastName;\n\n     @CsvBindByPosition(position = 2)\n     private int visitsToWebsite;\n\n     // Getters and setters go here.\n     }\n   \n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     username,valid since,annual salary\n     user1,01.01.2010,100.000\n     user2,31.07.2014,50.000\n   \n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\n     public class Employees {\n\n     @CsvBindByName(required = true)\n     private String username;\n\n     @CsvBindByName(column = \"valid since\")\n     @CsvDate(\"dd.MM.yyyy\")\n     private Date validSince;\n\n     @CsvBindByName(column = \"annual salary\", locale = \"de\")\n     private int salary;\n\n     // Getters and setters go here.\n     }\n   \n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     cluster,nodes,production\n     cluster1,node1 node2,wahr\n     cluster2,node3 node4 node5,falsch\n   \n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\n     public class Cluster {\n\n       @CsvBindByName\n       private String cluster;\n\n       @CsvCustomBindByName(converter = ConvertSplitOnWhitespace.class)\n       private String[] nodes;\n\n       @CsvCustomBindByName(converter = ConvertGermanToBoolean.class)\n       private boolean production;\n\n       // Getters and setters go here.\n     }\n   \n", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n    ColumnPositionMappingStrategy strat = new ColumnPositionMappingStrategy();\n    strat.setType(YourOrderBean.class);\n    String[] columns = new String[] {\"name\", \"orderNumber\", \"id\"}; // the fields to bind to in your bean\n    strat.setColumnMapping(columns);\n\n    CsvToBean csv = new CsvToBean();\n    List list = csv.parse(strat, yourReader);\n   \n", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVReader reader = new CSVReader(new FileReader(\"yourfile.csv\"), '\\t', '\\'', 2);\n   \n", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\n     CsvToBean csvToBean = CsvToBeanBuilder(new FileReader(\"yourfile.csv\"))\n       .withSeparator('\\t').withQuoteChar('\\'').withSkipLines(2).build();\n   \n", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     CSVWriter writer = new CSVWriter(new FileWriter(\"yourfile.csv\"), '\\t');\n     // feed in your array (or convert your data to an array)\n     String[] entries = \"first#second#third\".split(\"#\");\n     writer.writeNext(entries);\n     writer.close();\n   \n", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     // List<MyBean> beans comes from somewhere earlier in your code.\n     Writer writer = new FileWriter(\"yourfile.csv\");\n     StatefulBeanToCsvBuilder beanToCsv = StatefulBeanToCsvBuilder(writer).build();\n     beanToCsv.write(beans);\n     writer.close();\n   \n", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n     java.sql.ResultSet myResultSet = . . .\n     writer.writeAll(myResultSet, includeHeaders);\n   \n", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\n  <dependency>\n     <groupId>com.opencsv</groupId>\n     <artifactId>opencsv</artifactId>\n     <version>4.0</version>\n  </dependency>\n\n", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://stackoverflow.com/questions/101100/csv-api-for-java", "url position": 7, "segments": [{"code": "import au.com.bytecode.opencsv.CSVReader;", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "79", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "String fileName = \"data.csv\";\nCSVReader reader = new CSVReader(new FileReader(fileName ));\n\n// if the first line is the header\nString[] header = reader.readNext();\n// iterate over reader.readNext until it returns null\nString[] line = reader.readNext();\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "79", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class UserBean {\n    String username, password, street, town;\n    int zip;\n\n    public String getPassword() { return password; }\n    public String getStreet() { return street; }\n    public String getTown() { return town; }\n    public String getUsername() { return username; }\n    public int getZip() { return zip; }\n    public void setPassword(String password) { this.password = password; }\n    public void setStreet(String street) { this.street = street; }\n    public void setTown(String town) { this.town = town; }\n    public void setUsername(String username) { this.username = username; }\n    public void setZip(int zip) { this.zip = zip; }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "32", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "username, password,   date,        zip,  town\nKlaus,    qwexyKiks,  17/1/2007,   1111, New York\nOufu,     bobilop,    10/10/2007,  4555, New York\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "32", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "class ReadingObjects {\n  public static void main(String[] args) throws Exception{\n    ICsvBeanReader inFile = new CsvBeanReader(new FileReader(\"foo.csv\"), CsvPreference.EXCEL_PREFERENCE);\n    try {\n      final String[] header = inFile.getCSVHeader(true);\n      UserBean user;\n      while( (user = inFile.read(UserBean.class, header, processors)) != null) {\n        System.out.println(user.getZip());\n      }\n    } finally {\n      inFile.close();\n    }\n  }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "32", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "final CellProcessor[] processors = new CellProcessor[] {\n    new Unique(new StrMinMax(5, 20)),\n    new StrMinMax(8, 35),\n    new ParseDate(\"dd/MM/yyyy\"),\n    new Optional(new ParseInt()),\n    null\n};\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "32", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "+ maven\n\n+ maven - release version   // had some cryptic issues at _Hudson_ with snapshot references => prefer to be on a safe side\n\n+ code examples\n\n+ open source   // as in \"can hack myself if needed\"\n\n+ understandable javadoc   // as opposed to eg javadocs of _genjava gj-csv_\n\n+ compact API   // YAGNI (note *flatpack* seems to have much richer API than OpenCSV)\n\n- reference to specification used   // I really like it when people can explain what they're doing\n\n- reference to _RFC 4180_ support   // would qualify as simplest form of specification to me\n\n- releases changelog   // absence is quite a pity, given how simple it'd be to get with maven-changes-plugin   // _flatpack_, for comparison, has quite helpful changelog\n\n+ bug tracking\n\n+ active   // as in \"can submit a bug and expect a fixed release soon\"\n\n+ positive feedback   // Recommended By 51 users at sourceforge (as of now)\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": "19", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/ ************ For Reading ***************/\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport com.csvreader.CsvReader;\n\npublic class CsvReaderExample {\n\n    public static void main(String[] args) {\n        try {\n\n            CsvReader products = new CsvReader(\"products.csv\");\n\n            products.readHeaders();\n\n            while (products.readRecord())\n            {\n                String productID = products.get(\"ProductID\");\n                String productName = products.get(\"ProductName\");\n                String supplierID = products.get(\"SupplierID\");\n                String categoryID = products.get(\"CategoryID\");\n                String quantityPerUnit = products.get(\"QuantityPerUnit\");\n                String unitPrice = products.get(\"UnitPrice\");\n                String unitsInStock = products.get(\"UnitsInStock\");\n                String unitsOnOrder = products.get(\"UnitsOnOrder\");\n                String reorderLevel = products.get(\"ReorderLevel\");\n                String discontinued = products.get(\"Discontinued\");\n\n                // perform program logic here\n                System.out.println(productID + \":\" + productName);\n            }\n\n            products.close();\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": "5", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "/************* For Writing ***************************/\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport com.csvreader.CsvWriter;\n\npublic class CsvWriterAppendExample {\n\n    public static void main(String[] args) {\n\n        String outputFile = \"users.csv\";\n\n        // before we open the file check to see if it already exists\n        boolean alreadyExists = new File(outputFile).exists();\n\n        try {\n            // use FileWriter constructor that specifies open for appending\n            CsvWriter csvOutput = new CsvWriter(new FileWriter(outputFile, true), ',');\n\n            // if the file didn't already exist then we need to write out the header line\n            if (!alreadyExists)\n            {\n                csvOutput.write(\"id\");\n                csvOutput.write(\"name\");\n                csvOutput.endRecord();\n            }\n            // else assume that the file already has the correct header line\n\n            // write out a few records\n            csvOutput.write(\"1\");\n            csvOutput.write(\"Bruce\");\n            csvOutput.endRecord();\n\n            csvOutput.write(\"2\");\n            csvOutput.write(\"John\");\n            csvOutput.endRecord();\n\n            csvOutput.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": "5", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://www.youtube.com/watch?v=3_40oiUdLG8", "url position": 12, "segments": []},
{"query": "How to read CSV file", "url": "https://dzone.com/articles/how-to-read-a-big-csv-file-with-java-8-and-stream", "url position": 9, "segments": [{"code": "private List<YourJavaItem> processInputFile(String inputFilePath) {\n\n    List<YourJavaItem> inputList = new ArrayList<YourJavaItem>();\n\n    try{\n\n      File inputF = new File(inputFilePath);\n      InputStream inputFS = new FileInputStream(inputF);\n      BufferedReader br = new BufferedReader(new InputStreamReader(inputFS));\n\n      // skip the header of the csv\n      inputList = br.lines().skip(1).map(mapToItem).collect(Collectors.toList());\n      br.close();\n    } catch (FileNotFoundException|IOException e) {\n      ....\n    }\n\n    return inputList ;\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private Function<String, YourJavaItem> mapToItem = (line) -> {\n\n  String[] p = line.split(COMMA);// a CSV has comma separated lines\n\n  YourJavaItem item = new YourJavaItem();\n\n  item.setItemNumber(p[0]);//<-- this is the first column in the csv file\n  if (p[3] != null && p[3].trim().length() > 0) {\n    item.setSomeProeprty(p[3]);\n  }\n  //more initialization goes here\n\n  return item;\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://www.journaldev.com/2335/read-csv-file-java-scanner", "url position": 10, "segments": []},
{"query": "How to read CSV file", "url": "https://stackoverflow.com/questions/44137929/java-convert-string-csv-file-into-double-array", "url position": 4, "segments": [{"code": "import java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Example\n{\n    public static void main(String args[])\n    {\n        Scanner inputStream = null;\n        try\n        {\n            String fileName = \"dataset.csv\";\n            File file = new File(fileName);\n\n            // we don't know the amount of data ahead of time so we use lists\n            List<Double> col1 = new ArrayList<>();\n            List<Double> col2 = new ArrayList<>();\n\n            inputStream = new Scanner(file);\n            while (inputStream.hasNext())\n            {\n                String data = inputStream.next();\n                String [] arr = data.split(\",\");\n\n                col1.add(Double.parseDouble(arr[0]));\n                col2.add(Double.parseDouble(arr[1]));\n            }\n\n            // Covert the lists to double arrays\n            double[] column1 = new double[col1.size()];\n            double[] column2 = new double[col2.size()];\n\n            for (int i = 0; i < col1.size(); i++)\n            {\n                column1[i] = col1.get(i);\n            }\n\n            for (int i = 0; i < col2.size(); i++)\n            {\n                column2[i] = col2.get(i);\n            }\n\n            // print out just for verification\n            System.out.println(Arrays.toString(column1));\n            System.out.println(Arrays.toString(column2));\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        finally\n        {\n            if (inputStream != null)\n            {\n                inputStream.close();\n            }\n        }\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "double[][] data =\n    Files.lines(Paths.get(fileName))\n         .map(s -> s.split(\",\"))\n         .map(s -> Arrays.stream(s).mapToDouble(Double::parseDouble).toArray())\n         .toArray(double[][]::new);\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://www.javainterviewpoint.com/how-to-read-and-parse-csv-file-in-java/", "url position": 11, "segments": [{"code": "EmployeeID,FirstName,LastName,Salary\r\n1,FirstName1,LastName1,10000\r\n2,FirstName2,LastName2,20000\r\n3,FirstName3,LastName3,30000\r\n4,FirstName4,LastName4,40000\r\n5,FirstName5,LastName5,50000", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package com.javainterviewpoint;\r\n\r\npublic class Employee \r\n{\r\n    private int empId;\r\n    private String firstName;\r\n    private String lastName;\r\n    private int salary;\r\n    \r\n    public Employee(int empId, String firstName, \r\n                     String lastName, int salary) {\r\n        super();\r\n        this.empId = empId;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.salary = salary;\r\n    }\r\n    \r\n    public int getEmpId() {\r\n        return empId;\r\n    }\r\n    public void setEmpId(int empId) {\r\n        this.empId = empId;\r\n    }\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n    public void setFirstName(String firstName) {\r\n        this.firstName = firstName;\r\n    }\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n    public int getSalary() {\r\n        return salary;\r\n    }\r\n    public void setSalary(int salary) {\r\n        this.salary = salary;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Employee [empId=\" + empId + \", firstName=\" + firstName\r\n                + \", lastName=\" + lastName + \", salary=\" + salary + \"]\";\r\n    }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package com.javainterviewpoint;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ReadCSVFile_BufferedReader \r\n{\r\n\t//Delimiters used in the CSV file\r\n    private static final String COMMA_DELIMITER = \",\";\r\n    \r\n    public static void main(String args[])\r\n    {\r\n        BufferedReader br = null;\r\n        try\r\n        {\r\n            //Reading the csv file\r\n            br = new BufferedReader(new FileReader(\"Employee.csv\"));\r\n            \r\n            //Create List for holding Employee objects\r\n            List<Employee> empList = new ArrayList<Employee>();\r\n            \r\n            String line = \"\";\r\n            //Read to skip the header\r\n            br.readLine();\r\n            //Reading from the second line\r\n            while ((line = br.readLine()) != null) \r\n            {\r\n                String[] employeeDetails = line.split(COMMA_DELIMITER);\r\n                \r\n                if(employeeDetails.length > 0 )\r\n                {\r\n                    //Save the employee details in Employee object\r\n                    Employee emp = new Employee(Integer.parseInt(employeeDetails[0]),\r\n                            employeeDetails[1],employeeDetails[2],\r\n                            Integer.parseInt(employeeDetails[3]));\r\n                    empList.add(emp);\r\n                }\r\n            }\r\n            \r\n            //Lets print the Employee List\r\n            for(Employee e : empList)\r\n            {\r\n                System.out.println(e.getEmpId()+\"   \"+e.getFirstName()+\"   \"\r\n                \t\t+e.getLastName()+\"   \"+e.getSalary());\r\n            }\r\n        }\r\n        catch(Exception ee)\r\n        {\r\n            ee.printStackTrace();\r\n        }\r\n        finally\r\n        {\r\n            try\r\n            {\r\n                br.close();\r\n            }\r\n            catch(IOException ie)\r\n            {\r\n                System.out.println(\"Error occured while closing the BufferedReader\");\r\n                ie.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "1   FirstName1   LastName1   10000\r\n  FirstName2   LastName2   20000\r\n  FirstName3   LastName3   30000\r\n  FirstName4   LastName4   40000\r\n  FirstName5   LastName5   50000", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package com.javainterviewpoint;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class ReadCSV_Scanner \r\n{\r\n\t//Delimiters used in the CSV file\r\n\tprivate static final String COMMA_DELIMITER = \",\";\r\n\t\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\t \r\n\t\tScanner scanner = null;\r\n\t\ttry {\r\n\t\t\t//Get the scanner instance\r\n\t\t\tscanner = new Scanner(new File(\"Employee.csv\"));\r\n\t\t\t//Use Delimiter as COMMA\r\n\t\t\tscanner.useDelimiter(COMMA_DELIMITER);\r\n\t\t\twhile(scanner.hasNext())\r\n\t\t\t{\r\n\t\t\t\t\tSystem.out.print(scanner.next()+\"   \");\r\n\t\t\t}\r\n\t\t} \r\n\t\tcatch (FileNotFoundException fe) \r\n\t\t{\r\n\t\t\tfe.printStackTrace();\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tscanner.close();\r\n\t\t}\r\n\t}\r\n}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "EmployeeID   FirstName   LastName   Salary\r\n  FirstName1   LastName1   10000\r\n  FirstName2   LastName2   20000\r\n  FirstName3   LastName3   30000\r\n  FirstName4   LastName4   40000\r\n  FirstName5   LastName5   50000", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package com.javainterviewpoint;\r\n\r\nimport java.io.FileReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport au.com.bytecode.opencsv.CSVReader;\r\n\r\npublic class WriteCSV_OpenCSV \r\n{\r\n    public static void main(String args[])\r\n    {\r\n        CSVReader csvReader = null;\r\n        \r\n        try\r\n        {\r\n            /**\r\n             * Reading the CSV File\r\n             * Delimiter is comma\r\n             * Start reading from line 1\r\n             */\r\n            csvReader = new CSVReader(new FileReader(\"Employee.csv\"),',','\"',1);\r\n            //employeeDetails stores the values current line\r\n            String[] employeeDetails = null;\r\n            //Create List for holding Employee objects\r\n            List<Employee> empList = new ArrayList<Employee>();\r\n            \r\n            while((employeeDetails = csvReader.readNext())!=null)\r\n            {\r\n              //Save the employee details in Employee object\r\n                Employee emp = new Employee(Integer.parseInt(employeeDetails[0]),\r\n                        employeeDetails[1],employeeDetails[2],\r\n                        Integer.parseInt(employeeDetails[3]));\r\n                empList.add(emp);\r\n            }\r\n        \r\n        //Lets print the Employee List\r\n        for(Employee e : empList)\r\n        {\r\n            System.out.println(e.getEmpId()+\"   \"+e.getFirstName()+\"   \"\r\n                    +e.getLastName()+\"   \"+e.getSalary());\r\n        }\r\n        }\r\n        catch(Exception ee)\r\n        {\r\n            ee.printStackTrace();\r\n        }\r\n    }\r\n}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "1   FirstName1   LastName1   10000\r\n  FirstName2   LastName2   20000\r\n  FirstName3   LastName3   30000\r\n  FirstName4   LastName4   40000\r\n  FirstName5   LastName5   50000", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "http://zetcode.com/articles/opencsv/", "url position": 23, "segments": [{"code": "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n             http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    \n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.zetcode</groupId>\n    <artifactId>ReadOpenCSV</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n    </properties>\n\n    <dependencies>    \n        <dependency>\n            <groupId>com.opencsv</groupId>\n            <artifactId>opencsv</artifactId>\n            <version>3.8</version>\n        </dependency>\n    </dependencies>\n    \n</project>\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\n3,5,6,2,1,7,8\n4,5,7,3,2,8,9\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\npackage com.zetcode.readopencsv;\n\nimport com.opencsv.CSVReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadNumbersEx {\n\n    public static void main(String[] args) throws IOException {\n\n        String fileName = \"src/main/resources/numbers.csv\";\n        \n        try (CSVReader reader = new CSVReader(new FileReader(fileName))) {\n            String[] nextLine;\n            \n            while ((nextLine = reader.readNext()) != null) {\n                \n                for (String e: nextLine) {\n                    System.out.format(\"%s \", e);\n                }\n            }\n        }\n    }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nString fileName = \"src/main/resources/numbers.csv\";\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ntry (CSVReader reader = new CSVReader(new FileReader(fileName))) {\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nwhile ((nextLine = reader.readNext()) != null) {\n    \n    for (String e: nextLine) {\n        System.out.format(\"%s \", e);\n    }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n5 6 2 1 7 8 4 5 7 3 2 8 9 \n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n$ tree\n.\n build.gradle\n src\n     main\n         java\n            com\n                zetcode\n                    readopencsv\n                        ReadNumbersEx2.java\n         resources\n             numbers.csv\ndirectories, 3 files\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\napply plugin: 'java'\napply plugin: 'application'\n\narchivesBaseName = \"readnumbers2\"\nversion = '1.0'\nmainClassName = \"com.zetcode.readopencsv.ReadNumbersEx2\"\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile group: 'com.opencsv', name: 'opencsv', version: '3.8'\n}\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\n1|2|3|4|5\n6|7|3|9|8\n9|1|1|0|2\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\npackage com.zetcode.readopencsv;\n\nimport com.opencsv.CSVReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class ReadNumbersEx2 {\n\n    public static void main(String[] args) throws IOException {\n\n        String fileName = \"src/main/resources/numbers.csv\";\n        \n        try (CSVReader reader = new CSVReader(new FileReader(fileName), '|')) {\n            List<String[]> rows = reader.readAll();\n            \n            for (String[] row: rows) {\n                \n                for (String e: row) {\n                    System.out.format(\"%s \", e);\n                }\n                \n                System.out.println();\n            }\n        }\n    }\n}\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nCSVReader reader = new CSVReader(new FileReader(fileName), '|');\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nList<String[]> rows = reader.readAll();\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\n$ gradle build\n$ gradle run\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:run\n2 3 4 5 \n7 3 9 8 \n1 1 0 2 \n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\npackage com.zetcode.writeopencsv;\n\nimport com.opencsv.CSVWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class WriteOpenCSV {\n\n    public static void main(String[] args) throws IOException {\n\n        String[] entries = { \"book\", \"coin\", \"pencil\", \"cup\" }; \n        String fileName = \"items.csv\";\n        \n        try (CSVWriter writer = new CSVWriter(new FileWriter(fileName))) {\n            writer.writeNext(entries);\n        }        \n    }\n}\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npackage com.zetcode.writeopencsv2;\n\nimport com.opencsv.CSVWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class WriteOpenCSV2 {\n\n    public static void main(String[] args) throws IOException {\n\n        String[] items1 = {\"book\", \"coin\", \"pencil\"};\n        String[] items2 = {\"pen\", \"chair\", \"lamp\"};\n        String[] items3 = {\"ball\", \"bowl\", \"spectacles\"};\n\n        List<String[]> entries = new ArrayList<>();\n        entries.add(items1);\n        entries.add(items2);\n        entries.add(items3);\n\n        String fileName = \"items.csv\";\n\n        try (CSVWriter writer = new CSVWriter(new FileWriter(fileName))) {\n            writer.writeAll(entries);\n        }\n    }\n}\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nCREATE TABLE IF NOT EXISTS Cars(Id INTEGER PRIMARY KEY, Name VARCHAR(50), \n        Price INTEGER);\nINSERT INTO Cars VALUES(1,'Audi',52642);\nINSERT INTO Cars VALUES(2,'Mercedes',57127);\nINSERT INTO Cars VALUES(3,'Skoda',9000);\nINSERT INTO Cars VALUES(4,'Volvo',29000);\nINSERT INTO Cars VALUES(5,'Bentley',350000);\nINSERT INTO Cars VALUES(6,'Citroen',21000);\nINSERT INTO Cars VALUES(7,'Hummer',41400);\nINSERT INTO Cars VALUES(8,'Volkswagen',21600)\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n                http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    \n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.zetcode</groupId>\n    <artifactId>DatabaseEx</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n    </properties>\n    \n    <dependencies>    \n        <dependency>\n            <groupId>com.opencsv</groupId>\n            <artifactId>opencsv</artifactId>\n            <version>3.8</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.39</version>\n        </dependency>        \n    </dependencies>    \n    \n</project>\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\npackage com.zetcode.databaseex;\n\nimport com.opencsv.CSVWriter;\nimport static com.opencsv.CSVWriter.DEFAULT_SEPARATOR;\nimport static com.opencsv.CSVWriter.NO_QUOTE_CHARACTER;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class DatabaseEx {\n\n    public static void main(String[] args) throws IOException, SQLException {\n\n        Connection con = null;\n        PreparedStatement pst = null;\n        ResultSet rs = null;\n\n        CSVWriter writer = null;\n\n        String url = \"jdbc:mysql://localhost:3306/testdb\";\n        String user = \"testuser\";\n        String password = \"test623\";\n\n        try {\n\n            con = DriverManager.getConnection(url, user, password);\n            pst = con.prepareStatement(\"SELECT * FROM Cars\");\n            rs = pst.executeQuery();\n\n            writer = new CSVWriter(new FileWriter(\"cars.csv\"), \n                    DEFAULT_SEPARATOR, NO_QUOTE_CHARACTER);\n            writer.writeAll(rs, true);\n\n        } finally {\n\n            if (writer != null) {\n                writer.close();\n            }\n\n            if (rs != null) {\n                rs.close();\n            }\n\n            if (pst != null) {\n                pst.close();\n            }\n\n            if (con != null) {\n                con.close();\n            }\n        }\n    }\n}\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ncon = DriverManager.getConnection(url, user, password);\npst = con.prepareStatement(\"SELECT * FROM Cars\");\nrs = pst.executeQuery();\n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nwriter = new CSVWriter(new FileWriter(\"cars.csv\"), \n        DEFAULT_SEPARATOR, NO_QUOTE_CHARACTER);\n", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nwriter.writeAll(rs, true);\n", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\n$ cat cars.csv \nID,NAME,PRICE\n1,Audi,52642\n2,Mercedes,57127\n3,Skoda,9000\n4,Volvo,29000\n5,Bentley,350000\n6,Citroen,21000\n7,Hummer,41400\n8,Volkswagen,21600\n9,Toyota,26700\n", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\nID,NAME,PRICE\n1,Audi,52642\n2,Mercedes,57127\n3,Skoda,9000\n4,Volvo,29000\n5,Bentley,350000\n6,Citroen,21000\n7,Hummer,41400\n8,Volkswagen,21600\n9,Toyota,26700\n", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\npackage com.zetcode.beansex;\n\nimport com.opencsv.bean.CsvBindByName;\n\npublic class CarBean {\n    \n    @CsvBindByName\n    private int Id;\n    \n    @CsvBindByName\n    private String Name;\n    \n    @CsvBindByName\n    private int Price;\n\n    public int getId() {\n        return Id;\n    }\n\n    public void setId(int Id) {\n        this.Id = Id;\n    }\n\n    public String getName() {\n        return Name;\n    }\n\n    public void setName(String Name) {\n        this.Name = Name;\n    }\n\n    public int getPrice() {\n        return Price;\n    }\n\n    public void setPrice(int Price) {\n        this.Price = Price;\n    }\n    \n    @Override\n    public String toString() {\n        return \"CarBean{\" + \"Id=\" + Id + \", Name=\" + \n                Name + \", Price=\" + Price + '}';\n    }    \n}\n", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npackage com.zetcode.beansex;\n\nimport com.opencsv.CSVReader;\nimport com.opencsv.bean.CsvToBean;\nimport com.opencsv.bean.HeaderColumnNameMappingStrategy;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class BeansEx {\n\n    public static void main(String[] args) throws IOException {\n        \n        String fileName = \"src/main/resources/cars.csv\";\n        \n        try (CSVReader reader = new CSVReader(new FileReader(fileName))) {\n        \n            HeaderColumnNameMappingStrategy<CarBean> strategy =\n                    new HeaderColumnNameMappingStrategy<>();\n            strategy.setType(CarBean.class);\n            \n            CsvToBean<CarBean> csvToBean = new CsvToBean<>();\n            List<CarBean> beanList = csvToBean.parse(strategy, reader);\n            \n            for (CarBean bean: beanList) {\n                System.out.println(bean);\n            }\n        }\n    }\n}\n", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nHeaderColumnNameMappingStrategy<CarBean> strategy = \n        new HeaderColumnNameMappingStrategy<>();\nstrategy.setType(CarBean.class);\n", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nCsvToBean<CarBean> csvToBean = new CsvToBean<>();\nList<CarBean> beanList = csvToBean.parse(strategy, reader);\n", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nfor (CarBean bean: beanList) {\n    System.out.println(bean);\n}\n", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nCarBean{Id=1, Name=Audi, Price=52642}\nCarBean{Id=2, Name=Mercedes, Price=57127}\nCarBean{Id=3, Name=Skoda, Price=9000}\nCarBean{Id=4, Name=Volvo, Price=29000}\nCarBean{Id=5, Name=Bentley, Price=350000}\nCarBean{Id=6, Name=Citroen, Price=21000}\nCarBean{Id=7, Name=Hummer, Price=41400}\nCarBean{Id=8, Name=Volkswagen, Price=21600}\nCarBean{Id=9, Name=Toyota, Price=26700}\n", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://codereview.stackexchange.com/questions/149967/java-class-to-read-csv-files", "url position": 22, "segments": [{"code": "package com.mypackage.utils;\nimport com.opencsv.CSVParserBuilder;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVReaderBuilder;\nimport com.opencsv.enums.CSVReaderNullFieldIndicator;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Paths;\nimport java.util.*;\n\npublic class FileReader {\n\n    private String path;\n    private CSVReader reader;\n    private List<String> linesList;\n    private Set<List<String>> splitLinesSet;\n\n    public FileReader(String path) {\n        this.path = path;\n    }\n\n    public boolean readFile() {\n\n        this.splitLinesSet = new HashSet<>();\n\n        try {\n            File file = Paths.get(path).toFile();\n            reader = new CSVReaderBuilder(new java.io.FileReader(file))\n                    .withCSVParser(new CSVParserBuilder()\n                            .withSeparator('|')\n                            .withFieldAsNull(CSVReaderNullFieldIndicator.NEITHER).build())\n                    .build();\n            read();\n            reader.close();\n        } catch (IOException e) {\n            System.err.println(\"Error in reading CSV: \" + e.getMessage());\n            return false;\n        }\n\n        return true;\n    }\n\n    public Set<List<String>> getSplitLinesSet() {\n        return splitLinesSet;\n    }\n\n    private void read() throws IOException {\n        String[] lines;\n        while ((lines = reader.readNext()) != null) {\n            linesList = new ArrayList<>();\n            Collections.addAll(linesList, lines);\n            splitLinesSet.add(linesList);\n        }\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class FileReader {\n\n    private String path;\n    private List<String> linesList;\n    private Set<List<String>> splitLinesSet;\n\n    public FileReader(String path) {\n        this.path = path;\n    }\n\n    public boolean readFile() {\n\n        this.splitLinesSet = new HashSet<>();\n        File file = Paths.get(path).toFile();\n\n        try (\n            CSVReader reader = new CSVReaderBuilder(new java.io.FileReader(file))\n                    .withCSVParser(new CSVParserBuilder()\n                            .withSeparator('|')\n                            .withFieldAsNull(CSVReaderNullFieldIndicator.NEITHER).build())\n                    .build();\n            ) {\n            String[] lines;\n            while ((lines = reader.readNext()) != null) {\n                linesList = new ArrayList<>();\n                Collections.addAll(linesList, lines);\n                splitLinesSet.add(linesList);\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error in reading CSV: \" + e.getMessage());\n            return false;\n        }\n\n        return true;\n    }\n\n    public Set<List<String>> getSplitLinesSet() {\n        return splitLinesSet;\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVParser.html", "url position": 15, "segments": [{"code": "public final class CSVParser\nextends Object\nimplements Iterable<CSVRecord>, Closeable", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {\n     ...\n }\n ", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\n File csvData = new File(\"/path/to/csv\");\n CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n for (CSVRecord csvRecord : parser) {\n     ...\n }\n ", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n for (CSVRecord csvRecord : parser) {\n     ...\n }\n ", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n Reader in = new StringReader(\"a;b\\nc;d\");\n CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n List<CSVRecord> list = parser.getRecords();\n ", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "publicCSVParser(Readerreader,\n                 CSVFormatformat)\n          throws IOException", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicCSVParser(Readerreader,\n                 CSVFormatformat,\n                 longcharacterOffset,\n                 longrecordNumber)\n          throws IOException", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public staticCSVParserparse(Filefile,\n                              Charsetcharset,\n                              CSVFormatformat)\n                       throws IOException", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public staticCSVParserparse(InputStreaminputStream,\n                              Charsetcharset,\n                              CSVFormatformat)\n                       throws IOException", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public staticCSVParserparse(Pathpath,\n                              Charsetcharset,\n                              CSVFormatformat)\n                       throws IOException", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public staticCSVParserparse(Readerreader,\n                              CSVFormatformat)\n                       throws IOException", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public staticCSVParserparse(Stringstring,\n                              CSVFormatformat)\n                       throws IOException", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public staticCSVParserparse(URLurl,\n                              Charsetcharset,\n                              CSVFormatformat)\n                       throws IOException", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "publicvoidclose()\n           throws IOException", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publiclonggetCurrentLineNumber()", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicStringgetFirstEndOfLine()", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicMap<String,Integer>getHeaderMap()", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publiclonggetRecordNumber()", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicList<CSVRecord>getRecords()\n                           throws IOException", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicbooleanisClosed()", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "publicIterator<CSVRecord>iterator()", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://www.csvreader.com/java_csv_samples.php", "url position": 19, "segments": [{"code": "ProductID,ProductName,SupplierID,CategoryID,QuantityPerUnit,UnitPrice,UnitsInStock,UnitsOnOrder,ReorderLevel,Discontinued\r\n1,Chai,1,1,10 boxes x 20 bags,18,39,0,10,FALSE\r\n2,Chang,1,1,24 - 12 oz bottles,19,17,40,25,FALSE\r\n...", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\nimport com.csvreader.CsvReader;\r\n\r\npublic class CsvReaderExample {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tCsvReader products = new CsvReader(\"products.csv\");\r\n\t\t\r\n\t\t\tproducts.readHeaders();\r\n\r\n\t\t\twhile (products.readRecord())\r\n\t\t\t{\r\n\t\t\t\tString productID = products.get(\"ProductID\");\r\n\t\t\t\tString productName = products.get(\"ProductName\");\r\n\t\t\t\tString supplierID = products.get(\"SupplierID\");\r\n\t\t\t\tString categoryID = products.get(\"CategoryID\");\r\n\t\t\t\tString quantityPerUnit = products.get(\"QuantityPerUnit\");\r\n\t\t\t\tString unitPrice = products.get(\"UnitPrice\");\r\n\t\t\t\tString unitsInStock = products.get(\"UnitsInStock\");\r\n\t\t\t\tString unitsOnOrder = products.get(\"UnitsOnOrder\");\r\n\t\t\t\tString reorderLevel = products.get(\"ReorderLevel\");\r\n\t\t\t\tString discontinued = products.get(\"Discontinued\");\r\n\t\t\t\t\r\n\t\t\t\t// perform program logic here\r\n\t\t\t\tSystem.out.println(productID + \":\" + productName);\r\n\t\t\t}\r\n\t\r\n\t\t\tproducts.close();\r\n\t\t\t\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\nimport com.csvreader.CsvWriter;\r\n\r\npublic class CsvWriterAppendExample {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tString outputFile = \"users.csv\";\r\n\t\t\r\n\t\t// before we open the file check to see if it already exists\r\n\t\tboolean alreadyExists = new File(outputFile).exists();\r\n\t\t\t\r\n\t\ttry {\r\n\t\t\t// use FileWriter constructor that specifies open for appending\r\n\t\t\tCsvWriter csvOutput = new CsvWriter(new FileWriter(outputFile, true), ',');\r\n\t\t\t\r\n\t\t\t// if the file didn't already exist then we need to write out the header line\r\n\t\t\tif (!alreadyExists)\r\n\t\t\t{\r\n\t\t\t\tcsvOutput.write(\"id\");\r\n\t\t\t\tcsvOutput.write(\"name\");\r\n\t\t\t\tcsvOutput.endRecord();\r\n\t\t\t}\r\n\t\t\t// else assume that the file already has the correct header line\r\n\t\t\t\r\n\t\t\t// write out a few records\r\n\t\t\tcsvOutput.write(\"1\");\r\n\t\t\tcsvOutput.write(\"Bruce\");\r\n\t\t\tcsvOutput.endRecord();\r\n\t\t\t\r\n\t\t\tcsvOutput.write(\"2\");\r\n\t\t\tcsvOutput.write(\"John\");\r\n\t\t\tcsvOutput.endRecord();\r\n\t\t\t\r\n\t\t\tcsvOutput.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "id,name\r\n1,Bruce\r\n2,John\r\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://examples.javacodegeeks.com/core-java/writeread-csv-files-in-java-example/", "url position": 18, "segments": [{"code": "\npackage com.jcg;\n\n/**\n * @author ashraf\n *\n */\npublic class Student {\n\t\n\tprivate long id;\n\tprivate String firstName;\n\tprivate String lastName;\n\tprivate String gender;\n\tprivate int age;\n\t/**\n\t * @param id\n\t * @param firstName\n\t * @param lastName\n\t * @param gender\n\t * @param age\n\t */\n\tpublic Student(long id, String firstName, String lastName, String gender,\n\t\t\tint age) {\n\t\tsuper();\n\t\tthis.id = id;\n\t\tthis.firstName = firstName;\n\t\tthis.lastName = lastName;\n\t\tthis.gender = gender;\n\t\tthis.age = age;\n\t}\n\t/**\n\t * @return the id\n\t */\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\t/**\n\t * @param id the id to set\n\t */\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\t/**\n\t * @return the firstName\n\t */\n\tpublic String getFirstName() {\n\t\treturn firstName;\n\t}\n\t/**\n\t * @param firstName the firstName to set\n\t */\n\tpublic void setFirstName(String firstName) {\n\t\tthis.firstName = firstName;\n\t}\n\t/**\n\t * @return the lastName\n\t */\n\tpublic String getLastName() {\n\t\treturn lastName;\n\t}\n\t/**\n\t * @param lastName the lastName to set\n\t */\n\tpublic void setLastName(String lastName) {\n\t\tthis.lastName = lastName;\n\t}\n\t/**\n\t * @return the gender\n\t */\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\t/**\n\t * @param gender the gender to set\n\t */\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\t/**\n\t * @return the age\n\t */\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\t/**\n\t * @param age the age to set\n\t */\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Student [id=\" + id + \", firstName=\" + firstName\n\t\t\t\t+ \", lastName=\" + lastName + \", gender=\" + gender + \", age=\"\n\t\t\t\t+ age + \"]\";\n\t}\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npackage com.jcg;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author ashraf\n * \n */\npublic class CsvFileWriter {\n\t\n\t//Delimiter used in CSV file\n\tprivate static final String COMMA_DELIMITER = \",\";\n\tprivate static final String NEW_LINE_SEPARATOR = \"\\n\";\n\t\n\t//CSV file header\n\tprivate static final String FILE_HEADER = \"id,firstName,lastName,gender,age\";\n\n\tpublic static void writeCsvFile(String fileName) {\n\t\t\n\t\t//Create new students objects\n\t\tStudent student1 = new Student(1, \"Ahmed\", \"Mohamed\", \"M\", 25);\n\t\tStudent student2 = new Student(2, \"Sara\", \"Said\", \"F\", 23);\n\t\tStudent student3 = new Student(3, \"Ali\", \"Hassan\", \"M\", 24);\n\t\tStudent student4 = new Student(4, \"Sama\", \"Karim\", \"F\", 20);\n\t\tStudent student5 = new Student(5, \"Khaled\", \"Mohamed\", \"M\", 22);\n\t\tStudent student6 = new Student(6, \"Ghada\", \"Sarhan\", \"F\", 21);\n\t\t\n\t\t//Create a new list of student objects\n\t\tList students = new ArrayList();\n\t\tstudents.add(student1);\n\t\tstudents.add(student2);\n\t\tstudents.add(student3);\n\t\tstudents.add(student4);\n\t\tstudents.add(student5);\n\t\tstudents.add(student6);\n\t\t\n\t\tFileWriter fileWriter = null;\n\t\t\t\t\n\t\ttry {\n\t\t\tfileWriter = new FileWriter(fileName);\n\n\t\t\t//Write the CSV file header\n\t\t\tfileWriter.append(FILE_HEADER.toString());\n\t\t\t\n\t\t\t//Add a new line separator after the header\n\t\t\tfileWriter.append(NEW_LINE_SEPARATOR);\n\t\t\t\n\t\t\t//Write a new student object list to the CSV file\n\t\t\tfor (Student student : students) {\n\t\t\t\tfileWriter.append(String.valueOf(student.getId()));\n\t\t\t\tfileWriter.append(COMMA_DELIMITER);\n\t\t\t\tfileWriter.append(student.getFirstName());\n\t\t\t\tfileWriter.append(COMMA_DELIMITER);\n\t\t\t\tfileWriter.append(student.getLastName());\n\t\t\t\tfileWriter.append(COMMA_DELIMITER);\n\t\t\t\tfileWriter.append(student.getGender());\n\t\t\t\tfileWriter.append(COMMA_DELIMITER);\n\t\t\t\tfileWriter.append(String.valueOf(student.getAge()));\n\t\t\t\tfileWriter.append(NEW_LINE_SEPARATOR);\n\t\t\t}\n\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(\"CSV file was created successfully !!!\");\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Error in CsvFileWriter !!!\");\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\t\n\t\t\ttry {\n\t\t\t\tfileWriter.flush();\n\t\t\t\tfileWriter.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tSystem.out.println(\"Error while flushing/closing fileWriter !!!\");\n                e.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nid,firstName,lastName,gender,age\n1,Ahmed,Mohamed,M,25\n2,Sara,Said,F,23\n3,Ali,Hassan,M,24\n4,Sama,Karim,F,20\n5,Khaled,Mohamed,M,22\n6,Ghada,Sarhan,F,21\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\npackage com.jcg;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author ashraf_sarhan\n *\n */\npublic class CsvFileReader {\n\t\n\t//Delimiter used in CSV file\n\tprivate static final String COMMA_DELIMITER = \",\";\n\t\n\t//Student attributes index\n\tprivate static final int STUDENT_ID_IDX = 0;\n\tprivate static final int STUDENT_FNAME_IDX = 1;\n\tprivate static final int STUDENT_LNAME_IDX = 2;\n\tprivate static final int STUDENT_GENDER = 3; \n\tprivate static final int STUDENT_AGE = 4;\n\t\n\tpublic static void readCsvFile(String fileName) {\n\n\t\tBufferedReader fileReader = null;\n     \n        try {\n        \t\n        \t//Create a new list of student to be filled by CSV file data \n        \tList students = new ArrayList();\n        \t\n            String line = \"\";\n            \n            //Create the file reader\n            fileReader = new BufferedReader(new FileReader(fileName));\n            \n            //Read the CSV file header to skip it\n            fileReader.readLine();\n            \n            //Read the file line by line starting from the second line\n            while ((line = fileReader.readLine()) != null) {\n                //Get all tokens available in line\n                String[] tokens = line.split(COMMA_DELIMITER);\n                if (tokens.length > 0) {\n                \t//Create a new student object and fill his  data\n\t\t\t\t\tStudent student = new Student(Long.parseLong(tokens[STUDENT_ID_IDX]), tokens[STUDENT_FNAME_IDX], tokens[STUDENT_LNAME_IDX], tokens[STUDENT_GENDER], Integer.parseInt(tokens[STUDENT_AGE]));\n\t\t\t\t\tstudents.add(student);\n\t\t\t\t}\n            }\n            \n            //Print the new student list\n            for (Student student : students) {\n\t\t\t\tSystem.out.println(student.toString());\n\t\t\t}\n        } \n        catch (Exception e) {\n        \tSystem.out.println(\"Error in CsvFileReader !!!\");\n            e.printStackTrace();\n        } finally {\n            try {\n                fileReader.close();\n            } catch (IOException e) {\n            \tSystem.out.println(\"Error while closing fileReader !!!\");\n                e.printStackTrace();\n            }\n        }\n\n\t}\n\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npackage com.jcg;\n\n/**\n * @author ashraf\n *\n */\npublic class CsvWriteReadTest {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t\n\t\tString fileName = System.getProperty(\"user.home\")+\"/student.csv\";\n\t\t\n\t\tSystem.out.println(\"Write CSV file:\");\n\t\tCsvFileWriter.writeCsvFile(fileName);\n\t\t\n\t\tSystem.out.println(\"\\nRead CSV file:\");\n\t\tCsvFileReader.readCsvFile(fileName);\n\n\t}\n\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nWrite CSV file:\nCSV file was created successfully !!!\n\nRead CSV file:\nStudent [id=1, firstName=Ahmed, lastName=Mohamed, gender=M, age=25]\nStudent [id=2, firstName=Sara, lastName=Said, gender=F, age=23]\nStudent [id=3, firstName=Ali, lastName=Hassan, gender=M, age=24]\nStudent [id=4, firstName=Sama, lastName=Karim, gender=F, age=20]\nStudent [id=5, firstName=Khaled, lastName=Mohamed, gender=M, age=22]\nStudent [id=6, firstName=Ghada, lastName=Sarhan, gender=F, age=21]\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://github.com/arnaudroger/SimpleFlatMapper/wiki/How-to-parse-a-csv-file-in-java", "url position": 17, "segments": []},
{"query": "How to read CSV file", "url": "http://www.jusfortechies.com/sample_programs/read-csv-file.php", "url position": 25, "segments": [{"code": "\n package org.jusfortechies.example; \n\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.util.StringTokenizer;\n\n public class ReadCSVFile {\n\n   public static void main(String[] args) {\n\n     try { \n\t\t\t\n       String csvFile = \"C:\\\\SampleCSV.csv\";\n\n       //create BufferedReader to read csv file\n       BufferedReader br = new BufferedReader(new FileReader(csvFile));\n       String line = \"\";\n       StringTokenizer st = null;\n\n       int lineNumber = 0; \n       int tokenNumber = 0;\n\n       //read comma separated file line by line\n       while ((line = br.readLine()) != null) {\n         lineNumber++;\n\n         //use comma as token separator\n         st = new StringTokenizer(line, \",\");\n\n         while (st.hasMoreTokens()) {\n           tokenNumber++;\n\n           //display csv values\n           System.out.print(st.nextToken() + \"  \");\n         }\n\n         System.out.println();\n\n         //reset token number\n         tokenNumber = 0;\n       }\n\n     } catch (Exception e) {\n       System.err.println(\"CSV file cannot be read : \" + e);\n     }\n   }\n\n }\n\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://crunchify.com/how-to-read-convert-csv-comma-separated-values-file-to-arraylist-in-java-using-split-operation/", "url position": 24, "segments": [{"code": "Crunchify,Web Development,NYC,5 EmployeesGoogle,Search Company,Mountain View,53600 EmployeesYahoo,News Company,Sunnyvale,12500 EmployeesMicrosoft,Windows Company,Washington,128000 Employees", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package crunchify.com.tutorial;import java.io.BufferedReader;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;/** * @author Crunchify.com *  */public class CrunchifyCSVtoArrayList {\tpublic static void main(String[] args) {\t\t\t\tBufferedReader crunchifyBuffer = null;\t\t\t\ttry {\t\t\tString crunchifyLine;\t\t\tcrunchifyBuffer = new BufferedReader(new FileReader(\"/Users/appshah/Documents/Crunchify-CSV-to-ArrayList.txt\"));\t\t\t\t\t\t// How to read file in java line by line?\t\t\twhile ((crunchifyLine = crunchifyBuffer.readLine()) != null) {\t\t\t\tSystem.out.println(\"Raw CSV data: \" + crunchifyLine);\t\t\t\tSystem.out.println(\"Converted ArrayList data: \" + crunchifyCSVtoArrayList(crunchifyLine) + \"\\n\");\t\t\t}\t\t\t\t\t} catch (IOException e) {\t\t\te.printStackTrace();\t\t} finally {\t\t\ttry {\t\t\t\tif (crunchifyBuffer != null) crunchifyBuffer.close();\t\t\t} catch (IOException crunchifyException) {\t\t\t\tcrunchifyException.printStackTrace();\t\t\t}\t\t}\t}\t\t// Utility which converts CSV to ArrayList using Split Operation\tpublic static ArrayList<String> crunchifyCSVtoArrayList(String crunchifyCSV) {\t\tArrayList<String> crunchifyResult = new ArrayList<String>();\t\t\t\tif (crunchifyCSV != null) {\t\t\tString[] splitData = crunchifyCSV.split(\"\\\\s*,\\\\s*\");\t\t\tfor (int i = 0; i < splitData.length; i++) {\t\t\t\tif (!(splitData[i] == null) || !(splitData[i].length() == 0)) {\t\t\t\t\tcrunchifyResult.add(splitData[i].trim());\t\t\t\t}\t\t\t}\t\t}\t\t\t\treturn crunchifyResult;\t}\t}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Raw CSV data: Crunchify,Web Development,NYC,5 EmployeesConverted ArrayList data: [Crunchify, Web Development, NYC, 5 Employees]Raw CSV data: Google,Search Company,Mountain View,53600 EmployeesConverted ArrayList data: [Google, Search Company, Mountain View, 53600 Employees]Raw CSV data: Yahoo,News Company,Sunnyvale,12500 EmployeesConverted ArrayList data: [Yahoo, News Company, Sunnyvale, 12500 Employees]Raw CSV data: Microsoft,Windows Company,Washington,128000 EmployeesConverted ArrayList data: [Microsoft, Windows Company, Washington, 128000 Employees]", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://howtodoinjava.com/core-java/io/parse-csv-files-in-java/", "url position": 16, "segments": [{"code": "\npackage com.howtodoinjava.csv.demoScanner;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class ScannerExample \n{\n\tpublic static void main(String[] args) throws FileNotFoundException \n\t{\n\t\t//Get scanner instance\n\t\tScanner scanner = new Scanner(new File(\"SampleCSVFile.csv\"));\n\t\t\n\t\t//Set the delimiter used in file\n\t\tscanner.useDelimiter(\",\");\n\t\t\n\t\t//Get all tokens and store them in some data structure\n\t\t//I am just printing them\n\t\twhile (scanner.hasNext()) \n\t\t{\n\t\t\tSystem.out.print(scanner.next() + \"|\");\n\t\t}\n\t\t\n\t\t//Do not forget to close the scanner  \n\t\tscanner.close();\n\t}\n}\n\nOutput:\n\n1|Lokesh|Gupta|howtodoinjava.com|enabled\n2|Rakesh|Gupta|howtodoinjava.com|enabled\n3|Manoj|Sharma|howtodoinjava.com|enabled\n4|Abhay|Dwivedi|howtodoinjava.com|enabled\n5|John|Adward|howtodoinjava.com|enabled\n6|Steve|Jobs|howtodoinjava.com|disabled\n7|Bill|Gates|howtodoinjava.com|enabled\n8|Tom|Hanks|howtodoinjava.com|enabled\n9|Dev|Patel|howtodoinjava.com|disabled\n\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npackage com.howtodoinjava.csv.demoSplit;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class SplitterExample\n{\n\tpublic static void main(String[] args)\n\t{\n\t\t//Input file which needs to be parsed\n\t\tString fileToParse = \"SampleCSVFile.csv\";\n\t\tBufferedReader fileReader = null;\n\t\t\n\t\t//Delimiter used in CSV file\n\t\tfinal String DELIMITER = \",\";\n\t\ttry \n\t\t{\n\t\t\tString line = \"\";\n\t\t\t//Create the file reader\n\t\t\tfileReader = new BufferedReader(new FileReader(fileToParse));\n\t\t\t\n\t\t\t//Read the file line by line\n\t\t\twhile ((line = fileReader.readLine()) != null) \n\t\t\t{\n\t\t\t\t//Get all tokens available in line\n\t\t\t\tString[] tokens = line.split(DELIMITER);\n\t\t\t\tfor(String token : tokens)\n\t\t\t\t{\n\t\t\t\t\t//Print all tokens\n\t\t\t\t\tSystem.out.println(token);\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} \n\t\tfinally \n\t\t{\n\t\t\ttry {\n\t\t\t\tfileReader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\nOutput:\nLokesh\nGupta\nhowtodoinjava.com\nenabled\nRakesh\nGupta\nhowtodoinjava.com\nenabled\n\n..More output will appear here\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npackage com.howtodoinjava.csv.demoOpenCSV;\n\nimport java.io.FileReader;\nimport java.io.IOException;\n\nimport au.com.bytecode.opencsv.CSVReader;\n\npublic class OpenCSVExample {\n\t\n\tpublic static void main(String[] args) \n\t{\n\t\tCSVReader reader = null;\n\t\ttry \n\t\t{\n\t\t\t//Get the CSVReader instance with specifying the delimiter to be used\n\t\t\treader = new CSVReader(new FileReader(\"SampleCSVFile.csv\"),',');\n\t\t\tString [] nextLine;\n\t\t\t//Read one line at a time\n\t\t    while ((nextLine = reader.readNext()) != null) \n\t\t    {\n\t\t    \tfor(String token : nextLine)\n\t\t\t\t{\n\t\t\t\t\t//Print all tokens\n\t\t\t\t\tSystem.out.println(token);\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t    catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinally\t{\n\t\t\ttry {\n\t\t\t\treader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\nOutput:\nLokesh\nGupta\nhowtodoinjava.com\nenabled\nRakesh\nGupta\nhowtodoinjava.com\nenabled\n\n..More output will appear here\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Sourcecode Download", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "[java] public static void main (String[] args) {...} [/java]", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read CSV file", "url": "http://www.novixys.com/blog/howto-read-csv-file-java/", "url position": 20, "segments": [{"code": "package sample;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.PushbackInputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.Reader;\r\nimport java.io.BufferedReader;\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\n/*\r\n * @Author Jay Sridhar\r\n */\r\npublic class CSV\r\n{\r\n  static final private int NUMMARK = 10;\r\n  static final private char COMMA = ',';\r\n  static final private char DQUOTE = '\"';\r\n  static final private char CRETURN = '\\r';\r\n  static final private char LFEED = '\\n';\r\n  static final private char SQUOTE = '\\'';\r\n  static final private char COMMENT = '#';\r\n\r\n  /**\r\n   * Should we ignore multiple carriage-return/newline characters\r\n   * at the end of the record?\r\n   */\r\n  private boolean stripMultipleNewlines;\r\n\r\n  /**\r\n   * What should be used as the separator character?\r\n   */\r\n  private char separator;\r\n  private ArrayList<String> fields;\r\n  private boolean eofSeen;\r\n  private Reader in;\r\n\r\n  static public Reader stripBom(InputStream in)\r\n    throws java.io.IOException,\r\n           java.io.UnsupportedEncodingException\r\n  {\r\n    PushbackInputStream pin = new PushbackInputStream(in, 3);\r\n    byte[] b = new byte[3];\r\n    int len = pin.read(b, 0, b.length);\r\n    if ( (b[0] & 0xFF) == 0xEF && len == 3 ) {\r\n      if ( (b[1] & 0xFF) == 0xBB && \r\n           (b[2] & 0xFF) == 0xBF ) {\r\n        return new InputStreamReader(pin, \"UTF-8\");\r\n      } else {\r\n        pin.unread(b, 0, len);\r\n      }\r\n    }\r\n    else if ( len >= 2 ) {\r\n      if ( (b[0] & 0xFF) == 0xFE &&\r\n           (b[1] & 0xFF) == 0xFF ) {\r\n        return new InputStreamReader(pin, \"UTF-16BE\");\r\n      } else if ( (b[0] & 0xFF) == 0xFF &&\r\n                  (b[1] & 0xFF) == 0xFE ) {\r\n        return new InputStreamReader(pin, \"UTF-16LE\");\r\n      } else {\r\n        pin.unread(b, 0, len);\r\n      }\r\n    } else if ( len > 0 ) {\r\n      pin.unread(b, 0, len);\r\n    }\r\n    return new InputStreamReader(pin, \"UTF-8\");\r\n  }\r\n\r\n  public CSV(boolean stripMultipleNewlines,\r\n             char separator,\r\n             Reader input)\r\n  {\r\n    this.stripMultipleNewlines = stripMultipleNewlines;\r\n    this.separator = separator;\r\n    this.fields = new ArrayList<String>();\r\n    this.eofSeen = false;\r\n    this.in = new BufferedReader(input);\r\n  }\r\n\r\n  public CSV(boolean stripMultipleNewlines,\r\n             char separator,\r\n             InputStream input)\r\n    throws java.io.IOException,\r\n           java.io.UnsupportedEncodingException\r\n  {\r\n    this.stripMultipleNewlines = stripMultipleNewlines;\r\n    this.separator = separator;\r\n    this.fields = new ArrayList<String>();\r\n    this.eofSeen = false;\r\n    this.in = new BufferedReader(stripBom(input));\r\n  }\r\n\r\n  public boolean hasNext() throws java.io.IOException\r\n  {\r\n    if ( eofSeen ) return false;\r\n    fields.clear();\r\n    eofSeen = split( in, fields );\r\n    if ( eofSeen ) return ! fields.isEmpty();\r\n    else return true;\r\n  }\r\n\r\n  public List<String> next()\r\n  {\r\n    return fields;\r\n  }\r\n\r\n  // Returns true if EOF seen.\r\n  static private boolean discardLinefeed(Reader in,\r\n                                         boolean stripMultiple)\r\n    throws java.io.IOException\r\n  {\r\n    if ( stripMultiple ) {\r\n      in.mark(NUMMARK);\r\n      int value = in.read();\r\n      while ( value != -1 ) {\r\n        char c = (char)value;\r\n        if ( c != CRETURN && c != LFEED ) {\r\n          in.reset();\r\n          return false;\r\n        } else {\r\n          in.mark(NUMMARK);\r\n          value = in.read();\r\n        }\r\n      }\r\n      return true;\r\n    } else {\r\n      in.mark(NUMMARK);\r\n      int value = in.read();\r\n      if ( value == -1 ) return true;\r\n      else if ( (char)value != LFEED ) in.reset();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private boolean skipComment(Reader in)\r\n    throws java.io.IOException\r\n  {\r\n    /* Discard line. */\r\n    int value;\r\n    while ( (value = in.read()) != -1 ) {\r\n      char c = (char)value;\r\n      if ( c == CRETURN )\r\n        return discardLinefeed( in, stripMultipleNewlines );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Returns true when EOF has been seen.\r\n  private boolean split(Reader in,ArrayList<String> fields)\r\n    throws java.io.IOException\r\n  {\r\n    StringBuilder sbuf = new StringBuilder();\r\n    int value;\r\n    while ( (value = in.read()) != -1 ) {\r\n      char c = (char)value;\r\n      switch(c) {\r\n      case CRETURN:\r\n        if ( sbuf.length() > 0 ) {\r\n          fields.add( sbuf.toString() );\r\n          sbuf.delete( 0, sbuf.length() );\r\n        }\r\n        return discardLinefeed( in, stripMultipleNewlines );\r\n\r\n      case LFEED:\r\n        if ( sbuf.length() > 0 ) {\r\n          fields.add( sbuf.toString() );\r\n          sbuf.delete( 0, sbuf.length() );\r\n        }\r\n        if ( stripMultipleNewlines )\r\n          return discardLinefeed( in, stripMultipleNewlines );\r\n        else return false;\r\n\r\n      case DQUOTE:\r\n        {\r\n          // Processing double-quoted string ..\r\n          while ( (value = in.read()) != -1 ) {\r\n            c = (char)value;\r\n            if ( c == DQUOTE ) {\r\n              // Saw another double-quote. Check if\r\n              // another char can be read.\r\n              in.mark(NUMMARK);\r\n              if ( (value = in.read()) == -1 ) {\r\n                // Nope, found EOF; means End of\r\n                // field, End of record and End of\r\n                // File\r\n                if ( sbuf.length() > 0 ) {\r\n                  fields.add( sbuf.toString() );\r\n                  sbuf.delete( 0, sbuf.length() );\r\n                }\r\n                return true;\r\n              } else if ( (c = (char)value) == DQUOTE ) {\r\n                // Found a second double-quote\r\n                // character. Means the double-quote\r\n                // is included.\r\n                sbuf.append( DQUOTE );\r\n              } else if ( c == CRETURN ) {\r\n                // Found End of line. Means End of\r\n                // field, and End of record.\r\n                if ( sbuf.length() > 0 ) {\r\n                  fields.add( sbuf.toString() );\r\n                  sbuf.delete( 0, sbuf.length() );\r\n                }\r\n                // Read and discard a line-feed if we\r\n                // can indeed do so.\r\n                return discardLinefeed( in,\r\n                                        stripMultipleNewlines );\r\n              } else if ( c == LFEED ) {\r\n                // Found end of line. Means End of\r\n                // field, and End of record.\r\n                if ( sbuf.length() > 0 ) {\r\n                  fields.add( sbuf.toString() );\r\n                  sbuf.delete( 0, sbuf.length() );\r\n                }\r\n                // No need to check further. At this\r\n                // point, we have not yet hit EOF, so\r\n                // we return false.\r\n                if ( stripMultipleNewlines )\r\n                  return discardLinefeed( in, stripMultipleNewlines );\r\n                else return false; \r\n              } else {\r\n                // Not one of EOF, double-quote,\r\n                // newline or line-feed. Means end of\r\n                // double-quote processing. Does NOT\r\n                // mean end-of-field or end-of-record.\r\n                // System.err.println(\"EOR on '\" + c +\r\n                // \"'\");\r\n                in.reset();\r\n                break;\r\n              }\r\n            } else {\r\n              // Not a double-quote, so no special meaning.\r\n              sbuf.append( c );\r\n            }\r\n          }\r\n          // Hit EOF, and did not see the terminating double-quote.\r\n          if ( value == -1 ) {\r\n            // We ignore this error, and just add whatever\r\n            // left as the next field.\r\n            if ( sbuf.length() > 0 ) {\r\n              fields.add( sbuf.toString() );\r\n              sbuf.delete( 0, sbuf.length() );\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n        break;\r\n\r\n      default:\r\n        if ( c == separator ) {\r\n          fields.add( sbuf.toString() );\r\n          sbuf.delete(0, sbuf.length());\r\n        } else {\r\n          /* A comment line is a line starting with '#' with\r\n           * optional whitespace at the start. */\r\n          if ( c == COMMENT && fields.isEmpty() &&\r\n               sbuf.toString().trim().isEmpty() ) {\r\n            boolean eof = skipComment(in);\r\n            if ( eof ) return eof;\r\n            else sbuf.delete(0, sbuf.length());\r\n            /* Continue with next line if not eof. */\r\n          } else sbuf.append(c);\r\n        }\r\n      }\r\n    }\r\n    if ( sbuf.length() > 0 ) {\r\n      fields.add( sbuf.toString() );\r\n      sbuf.delete( 0, sbuf.length() );\r\n    }\r\n    return true;\r\n  }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "List<List<String>> rows = new ArrayList<>();\r\ntry (InputStream in = new FileInputStream(csvFile);) {\r\n  CSV csv = new CSV(true, ',', in);\r\n  List<String> colNames = null;\r\n  if ( csv.hasNext() ) colNames = new ArrayList<String>(csv.next());\r\n  while (csv.hasNext()) {\r\n    List<String> fields = new ArrayList<String>(csv.next());\r\n    rows.add(fields);\r\n  }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try (Reader in = new StringReader(csvStr);) {\r\n    CSV csv = new CSV(true, ',', in);\r\n    int nrows = 0;\r\n    while (csv.hasNext()) {\r\n\tList<String> fields = csv.next();\r\n\tfor (int i = 0 ; i < fields.size() ; i++) {\r\n\t    System.out.printf(\"%-3d: %s%n\", (i+1), fields.get(i));\r\n\t}\r\n\tSystem.out.println();\r\n\tnrows++;\r\n    }\r\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "@Test\r\npublic void quotedCommaTest() throws Exception\r\n{\r\n    try(Reader in = new StringReader(\"A,B,\\\"C,D\\\",e\");) {\r\n\tCSV csv = new CSV(true, ',', in);\r\n\tassertTrue(csv.hasNext());\r\n\tList<String> fields = csv.next();\r\n\tassertTrue(fields.size() == 4);\r\n\tList<String> expected = Arrays.asList(\"A\", \"B\", \"C,D\", \"e\");\r\n\tassertThat(fields, is(expected));\r\n    }\r\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "@Test\r\npublic void quotesStrippedTest() throws Exception\r\n{\r\n  try(Reader in = new StringReader(\"A,B,I said \\\"How are you?\\\",d\");) {\r\n    CSV csv = new CSV(true, ',', in);\r\n    assertTrue(csv.hasNext());\r\n    List<String> fields = csv.next();\r\n    assertTrue(fields.size() == 4);\r\n    List<String> expected = Arrays.asList(\"A\",\r\n\t\t\t\t\t  \"B\",\r\n\t\t\t\t\t  \"I said How are you?\",\r\n\t\t\t\t\t  \"d\");\r\n    assertThat(fields, is(expected));\r\n  }\r\n}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "@Test\r\npublic void includeQuotesTest() throws Exception\r\n{\r\n  try(Reader in = new StringReader(\"A,B,\\\"I said \\\"\\\"How about you?\\\"\\\"\\\",d\");) {\r\n    CSV csv = new CSV(true, ',', in);\r\n    assertTrue(csv.hasNext());\r\n    List<String> fields = csv.next();\r\n    assertTrue(fields.size() == 4);\r\n    List<String> expected = Arrays.asList(\"A\",\r\n\t\t\t\t\t  \"B\",\r\n\t\t\t\t\t  \"I said \\\"How about you?\\\"\",\r\n\t\t\t\t\t  \"d\");\r\n    assertThat(fields, is(expected));\r\n  }\r\n}", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "@Test\r\npublic void multilineFieldQuoteTest() throws Exception\r\n{\r\n  try(Reader in = new StringReader(\"A,B,\\\"I said\\n\\\"\\\"How are you?\\\"\\\"\\\",d\");) {\r\n    CSV csv = new CSV(true, ',', in);\r\n    assertTrue(csv.hasNext());\r\n    List<String> fields = csv.next();\r\n    // fields.stream().forEach(System.out::println);\r\n    assertTrue(fields.size() == 4);\r\n    List<String> expected = Arrays\r\n      .asList(\"A\",\r\n\t      \"B\",\r\n\t      \"I said\\n\\\"How are you?\\\"\",\r\n\t      \"d\");\r\n    assertThat(fields, is(expected));\r\n  }\r\n}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://beginwithjava.blogspot.gr/2011/05/java-csv-file-reader.html", "url position": 21, "segments": [{"code": "// CSVRead.java//Reads a Comma Separated Value file and prints its contents.import java.io.*;import java.util.Arrays;public class CSVRead{ public static void main(String[] arg) throws Exception {  BufferedReader CSVFile =         new BufferedReader(new FileReader(\"Example.csv\"));  String dataRow = CSVFile.readLine(); // Read first line.  // The while checks to see if the data is null. If   // it is, we've hit the end of the file. If not,   // process the data.  while (dataRow != null){   String[] dataArray = dataRow.split(\",\");   for (String item:dataArray) {       System.out.print(item + \"\\t\");    }   System.out.println(); // Print the data line.   dataRow = CSVFile.readLine(); // Read next line of data.  }  // Close the file once all data has been read.  CSVFile.close();  // End the printout with a blank line.  System.out.println(); } //main()} // CSVRead", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://www.java-forums.org/new-java/96732-reading-data-csv-file-java.html", "url position": 28, "segments": [{"code": "public static void getList() {\n        String fileName = \"books.csv\";\n        File file = new File(\"C:\\\\Users\\\\Jacob\\\\Documents\\\\NetBeansProjects\\\\Books\\\\src\\\\Books\\\\books.csv\"); \n        \n        try {\n            try (Scanner inputStream = new Scanner(file)) {\n                while (inputStream.hasNext()){\n                    String data = inputStream.next();\n                    System.out.println(data);\n                }\n            }\n        } catch (FileNotFoundException e){\n        }\n    }", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "/*\n * Copyright 2013 Keith D Swenson\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.workcast.streams;\n\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Helps to read and write a CSV file, all methods are static writeLine:\n * Converts list of String values into a line of a CSV file parseLine: read a\n * line from a LineNumberReader and return the list of Strings\n *\n * That should be all you need. Create or open the file & streams yourself from\n * whatever source you need to read from.. Everything in this class works on\n * characters, and not bytes.\n */\npublic class CSVHelper {\n\n    public static void writeLine(Writer w, List<String> values) throws Exception {\n        boolean firstVal = true;\n        for (String val : values) {\n            if (!firstVal) {\n                w.write(\",\");\n            }\n            w.write(\"\\\"\");\n            for (int i = 0; i < val.length(); i++) {\n                char ch = val.charAt(i);\n                if (ch == '\\\"') {\n                    w.write(\"\\\"\"); // extra quote\n                }\n                w.write(ch);\n            }\n            w.write(\"\\\"\");\n            firstVal = false;\n        }\n        w.write(\"\\n\");\n    }\n\n\n    /**\n    * returns a row of values as a list\n    * returns null if you are past the end of the line\n    */\n    public static List<String> parseLine(Reader r) throws Exception {\n        int ch = r.read();\n        while (ch == '\\r') {\n            //ignore linefeed characters wherever they are, particularly just before end of file\n            ch = r.read();\n        }\n        if (ch<0) {\n            return null;\n        }\n        ArrayList<String> store = new ArrayList<String>();\n        StringBuffer curVal = new StringBuffer();\n        boolean inquotes = false;\n        boolean started = false;\n        while (ch>=0) {\n            if (inquotes) {\n                started=true;\n                if (ch == '\\\"') {\n                    inquotes = false;\n                }\n                else {\n                    curVal.append((char)ch);\n                }\n            }\n            else {\n                if (ch == '\\\"') {\n                    inquotes = true;\n                    if (started) {\n                        // if this is the second quote in a value, add a quote\n                        // this is for the double quote in the middle of a value\n                        curVal.append('\\\"');\n                    }\n                }\n                else if (ch == ',') {\n                    store.add(curVal.toString());\n                    curVal = new StringBuffer();\n                    started = false;\n                }\n                else if (ch == '\\r') {\n                    //ignore LF characters\n                }\n                else if (ch == '\\n') {\n                    //end of a line, break out\n                    break;\n                }\n                else {\n                    curVal.append((char)ch);\n                }\n            }\n            ch = r.read();\n        }\n        store.add(curVal.toString());\n        return store;\n    }\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "public static Book toString (List<String> values) {\n       String _title = values.get(0);\n       String _author = values.get(1);\n       int _year = Integer.parseInt(values.get(2));\n       return new Book(_title, _author, _year);\n    }\n    \n    public List<String> getValues() {\n        Vector<String> values = new Vector<> ();\n        values.add(title);\n        values.add(author);\n        values.add(Integer.toString(year));\n        return values;\n    }\n    \n    public static List<Book> getList() throws Exception {\n    List<Book> collection = new Vector<>();\n    File csvFile = new File(\"C:\\\\Users\\\\Jacob\\\\Documents\\\\NetBeansProjects\\\\Books\\\\src\\\\Books\\\\books.csv\");\n    FileInputStream fis = new FileInputStream(csvFile);\n    Reader fr = new InputStreamReader(fis, \"UTF-8\");\n \n    List<String> values = CSVHelper.parseLine(fr);\n    while (values!= null) {\n        collection.add( Book.toString(values));\n        values = CSVHelper.parseLine(fr);\n    }\n    fis.close();\n    return collection;\n    }", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://it.toolbox.com/question/what-is-the-the-best-way-to-read-large-csv-file-using-java-081910", "url position": 26, "segments": []},
{"query": "How to read CSV file", "url": "http://www.opencodez.com/java/generic-csv-file-reader-in-java.htm", "url position": 27, "segments": [{"code": "Id,Name,Series1,John Rambo, Rambo2,Jack Baur, 243,Ethan Hunt, Mission Impossible", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "public class CsvData {\t\tprivate String id;\t\tprivate String name;\t\tprivate String series;\t//all getters and setters will be defined here.//Simple method to print our data\tpublic String toString() {\t\tStringBuffer sb = new StringBuffer();\t\tsb.append(this.getId())\t\t.append(\" | \")\t\t.append(this.getName())\t\t.append(\" | \")\t\t.append(this.getSeries());\t\treturn sb.toString();\t}\t}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class CustomCsvReader<T> {\t\tprivate String seperator;\t\tprivate String file;\t\tprivate Map<String, Field> privateFields = new LinkedHashMap<String, Field>();\t\tprivateClass<T> genericType;\t\tprivate List<T> data;\t\tprivate List<String> order;\t\tprivate List<String> headers;\t\t\tprivate boolean initCompleted;\t\tprivate boolean hasHeader;", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public CustomCsvReader(final Class<T> type, String file, boolean hasHeader) {\tthis.file = file;\tthis.hasHeader = hasHeader;\tthis.genericType = type;\tthis.seperator = \",\";}\tpublic CustomCsvReader(final Class<T> type, String file, boolean hasHeader, String separator) {\tthis.file = file;\tthis.hasHeader = hasHeader;\tthis.genericType = type;\tthis.seperator = separator;}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private void initialize() {\tif (!this.initCompleted) {\t\tField[] allFields = genericType.getDeclaredFields();\t\tfor (Field field : allFields) {\t\t\tif (Modifier.isPrivate(field.getModifiers())) {\t\t\t\tprivateFields.put(field.getName(), field);\t\t\t}\t\t}\t\ttry {\t\t\treadData();\t\t} catch (InstantiationException | IllegalAccessException e) {\t\t\tthis.initCompleted = false;\t\t}\t\tthis.initCompleted = true;\t}}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "reader = new BufferedReader(new FileReader(file));while ((line = reader.readLine()) != null) {\t\tList<String> row = Arrays.asList(line.split(seperator));\t\tif (this.hasHeader){\t\tsetHeaders(row);;\t\tthis.hasHeader = false;\t\tcontinue;\t}\t\tT refObject = genericType.newInstance();\tint index = 0;\t\t\t\t\t\tList<String> listOfFieldNames = (null != getOrder()) ? getOrder() : new ArrayList<String>(privateFields.keySet());\t\tfor(String fieldName : listOfFieldNames) {\t\tif( index >= row.size()) {\t\t\tbreak;\t\t}\t\tassign(refObject,privateFields.get(fieldName),row.get(index++));\t}\tgetData().add(refObject);}reader.close();", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public interface CsvProcessor<T> {\tpublic T process(T inData);}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "public class CustomCsvProcessor implements CsvProcessor<CsvData> {\t@Override\tpublic CsvData process(CsvData inData) {\t\tinData.setName(inData.getName().toUpperCase());\t\treturn inData;\t}}", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "String file = \"src/main/resources/sample-data.csv\";List<String> ord = new ArrayList<String>();ord.add(\"id\");ord.add(\"name\");ord.add(\"series\");CustomCsvReader<CsvData> reader = new CustomCsvReader<CsvData>(CsvData.class, file, true)\t\t.setOrder(ord)\t\t.read()\t\t.process(new CustomCsvProcessor());for(CsvData msg :reader.getData()) {\tSystem.out.println(msg);}", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://docs.geotools.org/latest/userguide/_downloads/CSVTest.java", "url position": 34, "segments": []},
{"query": "How to read CSV file", "url": "http://www.java2s.com/Code/Java/Development-Class/CSVfilereader.htm", "url position": 30, "segments": [{"code": "  \n/*\n *  Copyright (C) 2010 takaji\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n//package dakside.csv;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.ArrayList;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * CSV file reader\n * \n * @author Takaji\n */\npublic final class CSVFileReader {\n\n    private CSVFormat format;\n    private final BufferedReader reader;\n    private int col = 1;\n    private int row = 1;\n    private StringBuilder element = new StringBuilder(); // store current\n    // element\n    private CSVLine currentLine = null; // current CSV line\n    private boolean isOpened = false; // a string is opened with text delimiter\n\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Constructors\">\n    public CSVFileReader(Reader reader) {\n        //validate parameter\n        checkNotNull(reader, \"Reader cannot be null\");\n        this.reader = new BufferedReader(reader);\n        this.format = new CSVFormat();\n    }\n\n    public CSVFileReader(Reader reader, CSVFormat format) {\n        //validate parameter\n        checkNotNull(reader, \"Reader cannot be null\");\n        this.reader = new BufferedReader(reader);\n        this.format = format;\n    }\n\n    public CSVFileReader(BufferedReader reader) throws FileNotFoundException {\n        //validate parameter\n        checkNotNull(reader, \"Reader cannot be null\");\n        this.reader = reader;\n        this.format = new CSVFormat();\n    }\n\n    public CSVFileReader(BufferedReader reader, CSVFormat format) {\n        //validate parameter\n        checkNotNull(reader, \"Reader cannot be null\");\n        this.reader = reader;\n        this.format = format;\n    }\n\n    public CSVFileReader(String filename) throws CSVException {\n        //validate parameter\n        checkNotNull(filename, \"File name cannot be empty\");\n        try {\n            this.reader = new BufferedReader(new FileReader(filename));\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(CSVFileReader.class.getName()).log(Level.SEVERE, null, ex);\n            throw new CSVException(\"Cannot create reading buffer\", ex);\n        }\n        this.format = new CSVFormat();\n    }\n\n    public CSVFileReader(File f) {\n        //validate parameter\n        checkNotNull(f, \"File object cannot be null\");\n        try {\n            this.reader = new BufferedReader(new FileReader(f));\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(CSVFileReader.class.getName()).log(Level.SEVERE, null, ex);\n            throw new CSVException(\"Cannot create reading buffer\", ex);\n        }\n        this.format = new CSVFormat();\n    }\n\n    public CSVFileReader(InputStream input) {\n        //validate parameter\n        checkNotNull(input, \"InputStream cannot be null\");\n        reader = new BufferedReader(new InputStreamReader(input));\n        this.format = new CSVFormat();\n    }\n\n    public CSVFileReader(String filename, CSVFormat format) {\n        //validate parameter\n        checkNotNull(filename, \"File name cannot be empty\");\n        try {\n            this.reader = new BufferedReader(new FileReader(filename));\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(CSVFileReader.class.getName()).log(Level.SEVERE, null, ex);\n            throw new CSVException(\"Cannot create reading buffer\", ex);\n        }\n        this.format = format;\n    }\n\n    public CSVFileReader(File f, CSVFormat format) {\n        //validate parameter\n        checkNotNull(f, \"File object cannot be null\");\n        try {\n            this.reader = new BufferedReader(new FileReader(f));\n        } catch (FileNotFoundException ex) {\n            Logger.getLogger(CSVFileReader.class.getName()).log(Level.SEVERE, null, ex);\n            throw new CSVException(\"Cannot create reading buffer\", ex);\n        }\n        this.format = format;\n    }\n\n    public CSVFileReader(InputStream input, CSVFormat format) {\n        //validate parameter\n        checkNotNull(input, \"InputStream cannot be null\");\n        reader = new BufferedReader(new InputStreamReader(input));\n        this.format = format;\n    }\n\n    // </editor-fold>\n    /**\n     * read next char\n     */\n    private int read() throws IOException {\n        int next = -1;\n        next = reader.read();\n        if (next != -1) {\n            col++;\n        }\n        return next;\n    }\n\n    /**\n     * Do carriage return\n     */\n    private void carriageReturn() {\n        synchronized (this) {\n            row++;\n            col = 1;\n        }\n    }\n\n    /**\n     * Finished read a cell, flush to current line\n     */\n    private void flushElement() {\n        currentLine.add(element.toString());\n        element.setLength(0); // reset current element\n        isOpened = false;\n    }\n\n    /**\n     * Parse a CSV string to data\n     * \n     * @param rawData\n     * @return a simple CSV object with data. null if the raw data cannot be\n     *         parse\n     * @throw CSVException\n     */\n    public CSVLine readLine() throws CSVException {\n        if (reader == null) {\n            throw new CSVException(\"No reader found.\");\n        }\n        synchronized (this) {\n            element = new StringBuilder(); // store current\n            // element\n            currentLine = null; // current CSV line\n            isOpened = false; // a string is opened with text delimiter\n\n            try {\n                int currentInt = -1;\n                // parse data\n                while ((currentInt = read()) != -1) {\n                    if (currentLine == null) {\n                        currentLine = new CSVLine();\n                    }\n\n                    // reach field delimiter\n                    if (currentInt == format.getTextDelimiter()) {\n                        if (isOpened) {\n                            // check next char is escape?\n                            if ((currentInt = read()) != -1) {\n                                if (currentInt == format.getTextDelimiter()) {\n                                    // is special char\n                                    element.append(format.getTextDelimiter());\n                                    continue;\n                                } else {\n                                    // is close string then flush\n                                    flushElement();\n                                    // next char must be field delimiter\n                                    //or a line terminator\n                                    if (currentInt == format.getFieldDelimiter()) {\n                                        continue;\n                                    } else if (currentInt == format.getLineTerminator()) {\n                                        carriageReturn();\n                                        return currentLine;\n                                    } else {\n                                        raiseExpected(format.getFieldDelimiter(),\n                                                (char) currentInt);\n                                    }\n                                    continue;\n                                }\n                            } else {\n                                flushElement();\n                                continue;\n                            }\n                        } else {\n                            // is first open of the string\n                            isOpened = true;\n                            continue;\n                        }\n                    }\n\n                    if (!isOpened) {\n                        // ignore character\n                        if (format.isIgnored((char) currentInt)) {\n                            continue; // just ignore\n                        } else if (currentInt == format.getLineTerminator()) {\n                            flushElement();\n\n                            if (currentLine != null) {\n                                carriageReturn();\n                            }\n                            return currentLine;\n                        }\n                    }\n\n                    // meet field delimiter\n                    if (currentInt == format.getFieldDelimiter()) {\n                        if (isOpened) {\n                            element.append((char) currentInt);\n                            continue;\n                        } else {\n                            flushElement();\n                            continue;\n                        }\n                    }\n\n                    // otherwise, it's a normal character, just add\n                    element.append((char) currentInt);\n                }// continue while\n\n                // flush last element if needed\n                if (element != null && currentLine != null) {\n                    flushElement();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n                raiseException(ex);\n            }\n            // if currentLine exists, return carriage\n            if (currentLine != null) {\n                carriageReturn();\n            }\n        }// end of synchronize\n        return currentLine;\n    }\n\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Exception related tasks\">\n    /**\n     * Expected char [expected] but found another char [actual] so we\n     * throw an exception here.\n     * @param expected\n     * @param actual\n     */\n    private void raiseExpected(char expected, char actual) {\n        raiseException(new Exception(String.format(\n                \"Invalid data. Expected [%s] but [%s] was found.\", String.valueOf(expected), String.valueOf(actual))));\n    }\n\n    private void raiseException(Exception ex) {\n        throw new CSVException(\"Error happened while processing at row: \" + row\n                + \" - col: \" + (col - 1) + \")\", ex);\n    }\n\n    /**\n     * Check if argument null then throw a new CSV Exception\n     * @param argument\n     */\n    public static void checkNotNull(Object argument, String message) throws CSVException {\n        if (argument == null) {\n            throw new CSVException(message);\n        }\n    }\n\n    /**\n     * Close current reader and underline stream\n     */\n    public void close() {\n        try {\n            synchronized (reader) {\n                reader.close();\n            }\n        } catch (Exception ex) {\n            Logger.getLogger(CSVFileReader.class.getName()).log(Level.SEVERE,\n                    null, ex);\n        }\n    }\n    // </editor-fold>\n\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Quick CSV reading\">\n    /**\n     * Parse a CSV stream to data\n     * \n     * @param stream\n     *            InputStream\n     * @return a simple CSV object with data. null if the raw data cannot be\n     *         parse\n     */\n    public static CSVFile parse(InputStream stream) throws CSVException {\n        try {\n            CSVFileReader reader = new CSVFileReader(stream);\n            CSVFile file = new CSVFile();\n            CSVLine line = null;\n            do {\n                line = reader.readLine();\n                file.append(line);\n            } while (line != null);\n            return file;\n        } catch (Exception ex) {\n            throw new CSVException(ex);\n        }\n    }\n\n    /**\n     * Parse file content to CSV\n     * \n     * @param path\n     * @return\n     */\n    public static CSVFile parseFile(String path) {\n        if (path == null || !(new File(path)).exists()) {\n            throw new CSVException(\"Invalid path\");\n        }\n        try {\n            return parse(new FileInputStream(path));\n        } catch (Exception ex) {\n            Logger.getLogger(CSVFile.class.getName()).log(Level.SEVERE, null,\n                    ex);\n            throw new CSVException(ex);\n        }\n    }\n    // </editor-fold>\n}\nclass CSVFile {\n\n    private ArrayList<CSVLine> lines; //lines inside a CSV file\n\n    /**\n     * Default constructor\n     */\n    public CSVFile() {\n        this.lines = new ArrayList<CSVLine>();\n    }\n\n    public CSVLine[] getLines() {\n        return this.lines.toArray(new CSVLine[0]);\n    }\n\n    /**\n     * Get line at a specified index\n     * @param idx\n     * @return\n     * @throws IndexOutOfBoundsException\n     */\n    public CSVLine getLine(int idx) throws IndexOutOfBoundsException{\n        return this.lines.get(idx);\n    }\n\n    /**\n     * Add a new line to current csv\n     * @return new line object\n     */\n    public CSVLine newLine() {\n        CSVLine line = new CSVLine();\n        this.lines.add(line);\n        return line;\n    }\n\n    /**\n     * get number of line\n     * @return number of line\n     */\n    public int size() {\n        return this.lines.size();\n    }\n\n    /**\n     * discard a line at the specified index\n     * @param idx\n     */\n    public void discard(int idx) {\n        if (idx >= 0 && idx < size()) {\n            this.lines.remove(idx);\n        }\n    }\n\n    /**\n     * discard empty record\n     */\n    public void discardEmpty() {\n        for (int i = this.lines.size() - 1; i > -1; i--) {\n            if (this.lines.get(i) == null || this.lines.get(i).isEmpty()) {\n                discard(i);\n            }\n        }\n    }\n\n    /**\n     * append a CSV line to file (line is ignored if null)\n     * @param line\n     */\n    void append(CSVLine line) {\n        if (line == null) {\n            return;\n        }\n        this.lines.add(line);\n    }\n}\nclass CSVException extends RuntimeException {\n\n    private static final long serialVersionUID = 1L;\n\n    public CSVException() {\n    }\n\n    public CSVException(Throwable throwable) {\n        super(throwable);\n    }\n\n    public CSVException(String message) {\n        super(message);\n    }\n\n    public CSVException(String message, Throwable throwable) {\n        super(message, throwable);\n    }\n\n}\nclass CSVLine {\n\n    private ArrayList<Object> elements;\n\n    /**\n     * Default constructor\n     */\n    public CSVLine() {\n        this.elements = new ArrayList<Object>();\n    }\n\n    /**\n     * Get all elements (cells) inside a line\n     * @return empty String array if there's no element found inside\n     */\n    public Object[] getElements() {\n        return this.elements.toArray();\n    }\n\n    /**\n     * Get element at index\n     * @param idx\n     * @return\n     * @throws IndexOutOfBoundsException\n     */\n    public Object getElementAt(int idx) throws IndexOutOfBoundsException {\n        return elements.get(idx);\n    }\n\n    /**\n     * Set element at\n     * @param idx\n     * @param value\n     * @throws IndexOutOfBoundsException\n     */\n    public void setElementAt(int idx, Object value) throws IndexOutOfBoundsException {\n        elements.set(idx, value);\n    }\n\n    /**\n     * count elements inside this line\n     * @return\n     */\n    public int size() {\n        return elements.size();\n    }\n\n    /**\n     * Add a new element\n     */\n    public CSVLine add(Object obj) {\n        this.elements.add(obj);\n        return this;\n    }\n\n    /**\n     * if CSV line is empty\n     * @return\n     */\n    public boolean isEmpty() {\n        return this.elements.isEmpty();\n    }\n\n    /**\n     * Remove all elements\n     */\n    public void clear() {\n        this.elements.clear();\n    }\n\n    /**\n     * Remove element at a specified index\n     * @param idx\n     * @throws IndexOutOfBoundsException\n     */\n    public void remove(int idx) throws IndexOutOfBoundsException {\n        elements.remove(idx);\n    }\n\n    /**\n     * Trim down or expand with null cell to a new length\n     * @param newLength\n     */\n    public void setLength(int newLength) {\n        if (elements.size() > newLength) {\n            //trim down\n            while (elements.size() > newLength) {\n                elements.remove(elements.size() - 1);\n            }\n        } else {\n            //add more\n            while (elements.size() < newLength) {\n                add(null);\n            }\n        }\n    }\n}\nclass CSVFormat {\n\n    private String charset;\n    private char fieldDelimiter;\n    private char textDelimiter;\n    private char lineTerminator;\n    private char[] ignoreCharacters;\n\n    /**\n     * Construct a standard CSV format\n     */\n    public CSVFormat() {\n        this.setCharset(\"UTF-8\");\n        this.setFieldDelimiter(',');\n        this.setTextDelimiter('\"');\n\n        //auto detect line separator\n        String s = System.getProperty(\"line.separator\");\n        if (s.length() > 0) {\n            this.setLineTerminator(s.charAt(0));\n            char[] ignoreChars = new char[s.length() - 1];\n            for (int i = 1; i < s.length(); i++) {\n                ignoreChars[i-1] = s.charAt(i);\n            }\n            this.setIgnoreCharacters(ignoreChars);\n        } else {\n            this.setLineTerminator('\\n');\n            this.setIgnoreCharacters(new char[]{'\\r'});\n        }\n    }\n\n    /**\n     * @param lineTerminator\n     *            the lineTerminator to set\n     */\n    public void setLineTerminator(char lineTerminator) {\n        this.lineTerminator = lineTerminator;\n    }\n\n    /**\n     * @return the lineTerminator\n     */\n    public char getLineTerminator() {\n        return lineTerminator;\n    }\n\n    /**\n     * @param ignoreCharacters\n     *            the ignoreCharacters to set\n     */\n    public void setIgnoreCharacters(char[] ignoreCharacters) {\n        this.ignoreCharacters = ignoreCharacters;\n    }\n\n    /**\n     * @return the ignoreCharacters\n     */\n    public char[] getIgnoreCharacters() {\n        return ignoreCharacters;\n    }\n\n    /**\n     * @param charset\n     *            the charset to set\n     */\n    public void setCharset(String charset) {\n        this.charset = charset;\n    }\n\n    /**\n     * @return the charset\n     */\n    public String getCharset() {\n        return charset;\n    }\n\n    /**\n     * @param fieldDelimiter\n     *            the fieldDelimiter to set\n     */\n    public void setFieldDelimiter(char fieldDelimiter) {\n        this.fieldDelimiter = fieldDelimiter;\n    }\n\n    /**\n     * @return the fieldDelimiter\n     */\n    public char getFieldDelimiter() {\n        return fieldDelimiter;\n    }\n\n    /**\n     * @param textDelimiter\n     *            the textDelimiter to set\n     */\n    public void setTextDelimiter(char textDelimiter) {\n        this.textDelimiter = textDelimiter;\n    }\n\n    /**\n     * @return the textDelimiter\n     */\n    public char getTextDelimiter() {\n        return textDelimiter;\n    }\n\n    /**\n     * is ignored characters\n     * @param c\n     * @return\n     */\n    public boolean isIgnored(char c) {\n        return Arrays.binarySearch(ignoreCharacters, c) >= 0;\n    }\n}\n\n   \n    \n  \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://www.quora.com/In-Java-how-do-you-go-about-parsing-a-CSV-of-Integers-Doubles-Strings-and-then-saving-them-within-an-ArrayList-s", "url position": 32, "segments": [{"code": "Name, Age, Height\nRichard, 50, 180\n\"John Smith\", 12, 157.5\n\"Josh \\\"Face\\\" MacMan\", 23, 190\n\"Villers, Andr\", 85, NA\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\"Josh \"\"Face\"\" MacMan\", 23, 190\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "name,age\nRajeev Kumar Singh,25\nSachin Tendulkar,44\nBarak Obama,53\nDonald Trump,55\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "public class CSVUser {\n    @CsvBindByName(column=\"name\")\n    private String name;\n\n    @CsvBindByName(column=\"age\")\n    private Integer age;\n\n\t// Getters and Setters (Omitted for brevity)\t\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "try (\n    Reader reader = Files.newBufferedReader(Paths.get(\"./users.csv\"));\n) {\n    CsvToBean csvToBean = new CsvToBeanBuilder(reader)\n            .withType(CSVUser.class)\n            .withIgnoreLeadingWhiteSpace(true)\n            .build();\n\n    List<CSVUser> csvUsers = csvToBean.parse();\n\n    for (CSVUser csvUser : csvUsers) {\n        System.out.println(\"Name : \" + csvUser.getName());\n        System.out.println(\"Age : \" + csvUser.getAge());\n    }\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public static void main(String args[]){\n\t//This scanner receives input from STDIN\n\tScanner in = new Scanner(System.in);\n\t//This scanner divides (tokenize) the input line (from in)\n\tScanner lineTokenizer;\n\twhile(in.hasNextLine()){\n\t\t//Due to the fact that the file is a CSV,\n\t\t//use comma as a delimiter.\n\t\tlineTokenizer = new Scanner(\n\t\t\t\t\tin.nextLine()).useDelimiter(\", \");\n\t\t\n\t\twhile(lineTokenizer.hasNext()){\n\t\t\t\tif(lineTokenizer.hasNextInt()){\n\t\t\t\t\t//Save in INT ARRAYLIST\t\n\t\t\t\t}\n\t\t\t\telse if(lineTokenizer.hasNextDouble()){\n\t\t\t\t\t//Save in DOUBLE ARRAYLIST\n\t\t\t\t}else{\n\t\t\t\t\t//If is not a INT and not a double,\n\t\t\t\t\t//only remains a String\n\t\t\t\t\t//Save in STRING ARRAYLIST\n\t\t\t\t}\n\t\t}\n\t}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://super-csv.github.io/super-csv/examples_reading.html", "url position": 35, "segments": [{"code": "customerNo,firstName,lastName,birthDate,mailingAddress,married,numberOfKids,favouriteQuote,email,loyaltyPoints\n1,John,Dunbar,13/06/1945,\"1600 Amphitheatre Parkway\nMountain View, CA 94043\nUnited States\",,,\"\"\"May the Force be with you.\"\" - Star Wars\",jdunbar@gmail.com,0\n2,Bob,Down,25/02/1919,\"1601 Willow Rd.\nMenlo Park, CA 94025\nUnited States\",Y,0,\"\"\"Frankly, my dear, I don't give a damn.\"\" - Gone With The Wind\",bobdown@hotmail.com,123456\n3,Alice,Wunderland,08/08/1985,\"One Microsoft Way\nRedmond, WA 98052-6399\nUnited States\",Y,0,\"\"\"Play it, Sam. Play \"\"As Time Goes By.\"\"\"\" - Casablanca\",throughthelookingglass@yahoo.com,2255887799\n4,Bill,Jobs,10/07/1973,\"2701 San Tomas Expressway\nSanta Clara, CA 95050\nUnited States\",Y,3,\"\"\"You've got to ask yourself one question: \"\"Do I feel lucky?\"\" Well, do ya, punk?\"\" - Dirty Harry\",billy34@hotmail.com,36", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/**\n * Sets up the processors used for the examples. There are 10 CSV columns, so 10 processors are defined. Empty\n * columns are read as null (hence the NotNull() for mandatory columns).\n * \n * @return the cell processors\n */\nprivate static CellProcessor[] getProcessors() {\n        \n        final String emailRegex = \"[a-z0-9\\\\._]+@[a-z0-9\\\\.]+\"; // just an example, not very robust!\n        StrRegEx.registerMessage(emailRegex, \"must be a valid email address\");\n        \n        final CellProcessor[] processors = new CellProcessor[] { \n                new UniqueHashCode(), // customerNo (must be unique)\n                new NotNull(), // firstName\n                new NotNull(), // lastName\n                new ParseDate(\"dd/MM/yyyy\"), // birthDate\n                new NotNull(), // mailingAddress\n                new Optional(new ParseBool()), // married\n                new Optional(new ParseInt()), // numberOfKids\n                new NotNull(), // favouriteQuote\n                new StrRegEx(emailRegex), // email\n                new LMinMax(0L, LMinMax.MAX_LONG) // loyaltyPoints\n        };\n        \n        return processors;\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "customerNo,firstName,lastName,birthDate,mailingAddress,married,numberOfKids,favouriteQuote,email,loyaltyPoints", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/**\n * An example of reading using CsvBeanReader.\n */\nprivate static void readWithCsvBeanReader() throws Exception {\n        \n        ICsvBeanReader beanReader = null;\n        try {\n                beanReader = new CsvBeanReader(new FileReader(CSV_FILENAME), CsvPreference.STANDARD_PREFERENCE);\n                \n                // the header elements are used to map the values to the bean (names must match)\n                final String[] header = beanReader.getHeader(true);\n                final CellProcessor[] processors = getProcessors();\n                \n                CustomerBean customer;\n                while( (customer = beanReader.read(CustomerBean.class, header, processors)) != null ) {\n                        System.out.println(String.format(\"lineNo=%s, rowNo=%s, customer=%s\", beanReader.getLineNumber(),\n                                beanReader.getRowNumber(), customer));\n                }\n                \n        }\n        finally {\n                if( beanReader != null ) {\n                        beanReader.close();\n                }\n        }\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "lineNo=4, rowNo=2, customer=CustomerBean [customerNo=1, firstName=John, lastName=Dunbar, birthDate=Wed Jun 13 00:00:00 EST 1945, mailingAddress=1600 Amphitheatre Parkway\nMountain View, CA 94043\nUnited States, married=null, numberOfKids=null, favouriteQuote=\"May the Force be with you.\" - Star Wars, email=jdunbar@gmail.com, loyaltyPoints=0]\nlineNo=7, rowNo=3, customer=CustomerBean [customerNo=2, firstName=Bob, lastName=Down, birthDate=Tue Feb 25 00:00:00 EST 1919, mailingAddress=1601 Willow Rd.\nMenlo Park, CA 94025\nUnited States, married=true, numberOfKids=0, favouriteQuote=\"Frankly, my dear, I don't give a damn.\" - Gone With The Wind, email=bobdown@hotmail.com, loyaltyPoints=123456]\nlineNo=10, rowNo=4, customer=CustomerBean [customerNo=3, firstName=Alice, lastName=Wunderland, birthDate=Thu Aug 08 00:00:00 EST 1985, mailingAddress=One Microsoft Way\nRedmond, WA 98052-6399\nUnited States, married=true, numberOfKids=0, favouriteQuote=\"Play it, Sam. Play \"As Time Goes By.\"\" - Casablanca, email=throughthelookingglass@yahoo.com, loyaltyPoints=2255887799]\nlineNo=13, rowNo=5, customer=CustomerBean [customerNo=4, firstName=Bill, lastName=Jobs, birthDate=Tue Jul 10 00:00:00 EST 1973, mailingAddress=2701 San Tomas Expressway\nSanta Clara, CA 95050\nUnited States, married=true, numberOfKids=3, favouriteQuote=\"You've got to ask yourself one question: \"Do I feel lucky?\" Well, do ya, punk?\" - Dirty Harry, email=billy34@hotmail.com, loyaltyPoints=36]", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/**\n * An example of reading using CsvListReader.\n */\nprivate static void readWithCsvListReader() throws Exception {\n        \n        ICsvListReader listReader = null;\n        try {\n                listReader = new CsvListReader(new FileReader(CSV_FILENAME), CsvPreference.STANDARD_PREFERENCE);\n                \n                listReader.getHeader(true); // skip the header (can't be used with CsvListReader)\n                final CellProcessor[] processors = getProcessors();\n                \n                List<Object> customerList;\n                while( (customerList = listReader.read(processors)) != null ) {\n                        System.out.println(String.format(\"lineNo=%s, rowNo=%s, customerList=%s\", listReader.getLineNumber(),\n                                listReader.getRowNumber(), customerList));\n                }\n                \n        }\n        finally {\n                if( listReader != null ) {\n                        listReader.close();\n                }\n        }\n}", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "lineNo=4, rowNo=2, customerList=[1, John, Dunbar, Wed Jun 13 00:00:00 EST 1945, 1600 Amphitheatre Parkway\nMountain View, CA 94043\nUnited States, null, null, \"May the Force be with you.\" - Star Wars, jdunbar@gmail.com, 0]\nlineNo=7, rowNo=3, customerList=[2, Bob, Down, Tue Feb 25 00:00:00 EST 1919, 1601 Willow Rd.\nMenlo Park, CA 94025\nUnited States, true, 0, \"Frankly, my dear, I don't give a damn.\" - Gone With The Wind, bobdown@hotmail.com, 123456]\nlineNo=10, rowNo=4, customerList=[3, Alice, Wunderland, Thu Aug 08 00:00:00 EST 1985, One Microsoft Way\nRedmond, WA 98052-6399\nUnited States, true, 0, \"Play it, Sam. Play \"As Time Goes By.\"\" - Casablanca, throughthelookingglass@yahoo.com, 2255887799]\nlineNo=13, rowNo=5, customerList=[4, Bill, Jobs, Tue Jul 10 00:00:00 EST 1973, 2701 San Tomas Expressway\nSanta Clara, CA 95050\nUnited States, true, 3, \"You've got to ask yourself one question: \"Do I feel lucky?\" Well, do ya, punk?\" - Dirty Harry, billy34@hotmail.com, 36]", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "/**\n * An example of reading using CsvMapReader.\n */\nprivate static void readWithCsvMapReader() throws Exception {\n        \n        ICsvMapReader mapReader = null;\n        try {\n                mapReader = new CsvMapReader(new FileReader(CSV_FILENAME), CsvPreference.STANDARD_PREFERENCE);\n                \n                // the header columns are used as the keys to the Map\n                final String[] header = mapReader.getHeader(true);\n                final CellProcessor[] processors = getProcessors();\n                \n                Map<String, Object> customerMap;\n                while( (customerMap = mapReader.read(header, processors)) != null ) {\n                        System.out.println(String.format(\"lineNo=%s, rowNo=%s, customerMap=%s\", mapReader.getLineNumber(),\n                                mapReader.getRowNumber(), customerMap));\n                }\n                \n        }\n        finally {\n                if( mapReader != null ) {\n                        mapReader.close();\n                }\n        }\n}", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "lineNo=4, rowNo=2, customerMap={loyaltyPoints=0, lastName=Dunbar, numberOfKids=null, married=null, email=jdunbar@gmail.com, customerNo=1, birthDate=Wed Jun 13 00:00:00 EST 1945, firstName=John, mailingAddress=1600 Amphitheatre Parkway\nMountain View, CA 94043\nUnited States, favouriteQuote=\"May the Force be with you.\" - Star Wars}\nlineNo=7, rowNo=3, customerMap={loyaltyPoints=123456, lastName=Down, numberOfKids=0, married=true, email=bobdown@hotmail.com, customerNo=2, birthDate=Tue Feb 25 00:00:00 EST 1919, firstName=Bob, mailingAddress=1601 Willow Rd.\nMenlo Park, CA 94025\nUnited States, favouriteQuote=\"Frankly, my dear, I don't give a damn.\" - Gone With The Wind}\nlineNo=10, rowNo=4, customerMap={loyaltyPoints=2255887799, lastName=Wunderland, numberOfKids=0, married=true, email=throughthelookingglass@yahoo.com, customerNo=3, birthDate=Thu Aug 08 00:00:00 EST 1985, firstName=Alice, mailingAddress=One Microsoft Way\nRedmond, WA 98052-6399\nUnited States, favouriteQuote=\"Play it, Sam. Play \"As Time Goes By.\"\" - Casablanca}\nlineNo=13, rowNo=5, customerMap={loyaltyPoints=36, lastName=Jobs, numberOfKids=3, married=true, email=billy34@hotmail.com, customerNo=4, birthDate=Tue Jul 10 00:00:00 EST 1973, firstName=Bill, mailingAddress=2701 San Tomas Expressway\nSanta Clara, CA 95050\nUnited States, favouriteQuote=\"You've got to ask yourself one question: \"Do I feel lucky?\" Well, do ya, punk?\" - Dirty Harry}", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "http://www.baeldung.com/apache-commons-csv", "url position": 39, "segments": [{"code": "<dependency>\r\n<groupId>org.apache.commons</groupId>\r\n<artifactId>commons-csv</artifactId>\r\n<version>1.4</version>\r\n</dependency>\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "author,title\r\nDan Simmons,Hyperion\r\nDouglas Adams,The Hitchhiker's Guide to the Galaxy", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "Map<String, String> AUTHOR_BOOK_MAP = new HashMap<>() {\r\n    {\r\n        put(\"Dan Simmons\", \"Hyperion\");\r\n        put(\"Douglas Adams\", \"The Hitchhiker's Guide to the Galaxy\");\r\n    }\r\n});\r\nString[] HEADERS = { \"author\", \"title\"};\r\n\r\n@Test\r\npublic void givenCSVFile_whenRead_thenContentsAsExpected() throws IOException {\r\n    Reader in = new FileReader(\"book.csv\");\r\n    Iterable<CSVRecord> records = CSVFormat.DEFAULT\r\n      .withHeader(HEADERS)\r\n      .withFirstRecordAsHeader()\r\n      .parse(in);\r\n    for (CSVRecord record : records) {\r\n        String author = record.get(\"author\");\r\n        String title = record.get(\"title\");\r\n        assertEquals(AUTHOR_BOOK_MAP.get(author), title);\r\n    }\r\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public void createCSVFile() throws IOException {\r\n    FileWriter out = new FileWriter(\"book_new.csv\");\r\n    try (CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT\r\n      .withHeader(HEADERS))) {\r\n        AUTHOR_BOOK_MAP.forEach((author, title) -> {\r\n            printer.printRecord(author, title);\r\n        });\r\n    }\r\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Reader in = new FileReader(\"book.csv\");\r\nIterable<CSVRecord> records = CSVFormat.DEFAULT.parse(in);\r\nfor (CSVRecord record : records) {\r\n    String columnOne = record.get(0);\r\n    String columnTwo = record.get(1);\r\n}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Iterable<CSVRecord> records = CSVFormat.DEFAULT\r\n  .withHeader(\"author\", \"title\").parse(in);\r\nfor (CSVRecord record : records) {\r\n    String author = record.get(\"author\");\r\n    String title = record.get(\"title\");\r\n}", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "enum BookHeaders {\r\n    author, title\r\n}\r\n\r\nIterable<CSVRecord> records = CSVFormat.DEFAULT\r\n  .withHeader(BookHeaders.class).parse(in);\r\nfor (CSVRecord record : records) {\r\n    String author = record.get(BookHeaders.author);\r\n    String title = record.get(BookHeaders.title);\r\n}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Iterable<CSVRecord> records = CSVFormat.DEFAULT\r\n  .withFirstRowAsHeader().parse(in);\r\nfor (CSVRecord record : records) {\r\n    String author = record.get(\"author\");\r\n    String title = record.get(\"title\");\r\n}", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "FileWriter out = new FileWriter(\"book_new.csv\");\r\nCSVPrinter printer = CSVFormat.DEFAULT\r\n  .withHeader(\"author\", \"title\").print(out);", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://codippa.com/how-to-read-csv-file-in-java/", "url position": 38, "segments": [{"code": "static void processBySplit() {\n\tBufferedReader reader = null;\n\ttry {\n\t\treader = new BufferedReader(new FileReader(\"d:\\\\discoveries.csv\"));\n\t\tString line = null;\n\t\twhile ((line = reader.readLine()) != null) {\n\t\t\tString[] words = line.split(\",\");\n\t\t\tSystem.out.println(\"[Discovery = \\\"\" + words[0] + \"\\\", Discoverer = \\\"\" + words[1]\n                        + \"\\\", Country = \\\"\" + words[2] + \"\\\"]\");\n\t\t}\n\t} catch (FileNotFoundException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (reader != null) {\n\t\t\ttry {\n\t\t\t\treader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "static void processByRegEx() {\n   BufferedReader reader = null;\n   try {\n\treader = new BufferedReader(new FileReader(\"d:\\\\discoveries.csv\"));\n\tString line = null;\n\twhile ((line = reader.readLine()) != null) {\n\t   String[] words = line.split(\"\\\\s*,\\\\s*\");\n\t   System.out.println(\"[Discovery = \\\"\" + words[0] + \"\\\", Discoverer = \\\"\" + words[1]\n           + \"\\\", Country = \\\"\" + words[2] + \"\\\"]\");\n\t}\n   } catch (FileNotFoundException e) {\n\te.printStackTrace();\n   } catch (IOException e) {\n\te.printStackTrace();\n   } finally {\n\tif (reader != null) {\n\t\ttry {\n\t\t\treader.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n      }\n   }\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import com.opencsv.CSVReader;\nimport java.io.IOException;\n\nstatic void processByOpenCsv() {\n    CSVReader reader = null;\n    try {\n\treader = new CSVReader(new FileReader(\"d:\\\\discoveries.csv\"));\n\tList<String[]> lines = reader.readAll();\n\tfor (int i = 0; i < lines.size(); i++) {\n\t\tString[] lineContents = lines.get(i);\n\t\tSystem.out.println(\"[Discovery = \\\"\" + lineContents[0] + \"\\\", Discoverer = \\\"\" + lineContents[1]\n                + \"\\\", Country = \\\"\" + lineContents[2] + \"\\\"]\");\n\t}\n    } catch (FileNotFoundException e) {\n\te.printStackTrace();\n    } catch (IOException e) {\n\te.printStackTrace();\n    } finally {\n\tif (reader != null) {\n\t\ttry {\n\t\t\treader.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n   }\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "CSVReader reader = null;\ntry {\n   reader = new CSVReader(new FileReader(\"d:\\\\discoveries.csv\"));\n   Iterator<String[]> iterator = reader.iterator();\n   while(iterator.hasNext()){\n\tString[] lineContents = iterator.next();\n\tSystem.out.println(\"[Discovery = \\\"\" + lineContents[0] + \"\\\", Discoverer = \\\"\" + lineContents[1] \n        + \"\\\", Country = \\\"\" + lineContents[2] + \"\\\"]\");\n   }\n} catch (FileNotFoundException e) {\n   e.printStackTrace();\n} catch (IOException e) {\n   e.printStackTrace();\n} finally {\n   if (reader != null) {\n\ttry {\n\t\treader.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n   }\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "<dependency>\r\n  <groupId>com.opencsv</groupId>\r\n  <artifactId>opencsv</artifactId>\r\n  <version>3.8</version>\r\n</dependency>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://processing.org/tutorials/data/", "url position": 37, "segments": [{"code": "<pre>\nString search = \"def\";\nString toBeSearched = \"abcdefghi\";\nint index = toBeSearched.indexOf(search);  // The value of index in this example is 3.\n</pre>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString alphabet = \"abcdefghi\";\nString sub = alphabet.substring(3, 6); // The String sub is now \"def\".\n</pre>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nPFont f;\n\t\t\n// Variable to store text currently being typed\nString typing = \"\";\n// Variable to store saved text when return is hit\nString saved = \"\";\n\t\t\nvoid setup() {  \n  size(300, 200);  \n  f = createFont(\"Arial\", 16);\n}\n\t\t\nvoid draw() {  \n  background(255);  \n  int indent = 25;  \n\n  // Set the font and fill for text  \n  textFont(f);  \n  fill(0);  \n\n  // Display everything  \n  text(\"Click in this sketch and type. \\nHit return to save what you typed.\", indent, 40);  \n  text(typing, indent, 90);  \n  text(saved, indent, 130);\n}\n\t\t\nvoid keyPressed() {  \n  // If the return key is pressed, save the String and clear it  \n  if (key == '\\n') {    \n    saved = typing;    \n    typing = \"\";  \n    // Otherwise, concatenate the String  \n  } else {    \n    typing = typing + key;   \n  }\n}\n</pre>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Splitting a string based on spaces\nString spaceswords = \"The quick brown fox jumps over the lazy dog.\";\nString[] list = split(spaceswords, \" \");\nprintArray(list);\n</pre>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Splitting a string based on commas\nString commaswords = \"The,quick,brown,fox,jumps,over,the,lazy,dog.\";\nString[] list = split(commaswords, \",\");\nprintArray(list);\n</pre>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Splitting a String based on multiple delimiters\nString stuff = \"hats &amp; apples, cars + phones % elephants dog.\"; \nString[] list = splitTokens(stuff, \" &amp;,+.\" );\nprintArray(list);\n</pre>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Calculate sum of a list of numbers in a String\nString numbers = \"8,67,5,309\";\n// Converting the String array to an int array\nint[] list = int(split(numbers, ','));\nint sum = 0;\nfor (int i = 0; i&lt;list.length; i++ ) {\n  sum = sum + list[i];\n}\nprintln(sum);\n</pre>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString[] lines = {\"It\", \"was\", \"a\", \"dark\", \"and\", \"stormy\", \"night.\"};\n</pre>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Manual Concatenation\nString onelongstring = \"\";\nfor (int i = 0; i &lt; lines.length; i++) {\n   onelongstring = onelongstring + lines[i] + \" \";\n}\n</pre>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Using Processing's join()\nString onelongstring = join(lines, \" \");\n</pre>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nimport flowers.*;\n\nvoid setup() {\n  FlowerDatabase fdb = new FlowerDatabase();\n  Flower sunflower = fdb.findFlower(\"sunflower\");\n  float h = sunflower.getAverageHeight();\n}  \n</pre>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// This code will print all the lines from the source text file.\nString[] lines = loadStrings(\"file.txt\");\nprintln(\"There are \" + lines.length + \" lines.\");\nprintArray(lines);\n</pre>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nint[] data;\n\nvoid setup() {\n  size(200, 200);\n  // Load text file as a String\n  String[] stuff = loadStrings(\"data.csv\");\n  // Convert string into an array of integers using ',' as a delimiter\n  data = int(split(stuff[0], ','));\n}\n\nvoid draw() {\n  background(255);\n  stroke(0);\n  for (int i = 0; i&lt;data.length; i++) { \n  \t// Use array of ints to set the color and height of each rectangle.\n    rect(i*20, 0, 20, data[i]);\n  }\n  noLoop();\n}\n</pre>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString[] stuff = loadStrings(\"data.csv\");\n</pre>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nTable table = loadTable(\"data.csv\");\n</pre>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nTable table = loadTable(\"data.csv\", \"header\");\n</pre>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nint val1 = table.getInt(2, 1);      // val now has the value 235\n\nfloat val2 = table.getFloat(3, 2);  // val2 now has the value 44.758068\n\nString s = table.getString(0, 3);   // s now has the value \u201cHappy\u201d\n</pre>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nTableRow row = table.getRow(2); // Gets the third row (index 2)\n</pre>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nint x = row.getInt(\"x\"); // \t    // x has the value 273\n\nint y = row.getInt(\"y\");            // y has the value 235\n\nfloat d = row.getFloat(\"diameter\"); // d has the value 61.14072\n\nString s = row.getString(\"name\");   // s has the value \u201cJoyous\u201d\n</pre>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nfor (int i = 0; i&lt;table.getRowCount(); i++) {\n\n  // Access each row of the table one at a time, in a loop.\n  TableRow row = table.getRow(i);\n  float x = row.getFloat(\"x\");\n  float y = row.getFloat(\"y\");\n  float d = row.getFloat(\"diameter\");\n  String n = row.getString(\"name\");\n\n  // Do something with the data of each row\n\n}\n</pre>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nrow.setInt(\"x\", mouseX); // Update the value of column \"x\" to mouseX in a given TableRow.\n</pre>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n//Create a new row.\nTableRow row = table.addRow();\n\n//Set the values of all columns in that row.\nrow.setFloat(\"x\", mouseX);\nrow.setFloat(\"y\", mouseY);\nrow.setFloat(\"diameter\", random(40, 80));\nrow.setString(\"name\", \"new label\");\n</pre>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// If the table has more than 10 rows\nif (table.getRowCount()&gt;10) {\n\n//Delete the first row (index 0).\n  table.removeRow(0);\n}\n</pre>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// The data from the Table object will fill the array of Bubble objects\nTable table;\nBubble[] bubbles;\n\nvoid setup() {\n  size(480, 360);\n  loadData();\n}\n\nvoid draw() {\n  background(255);\n  // Display all bubbles\n  for (int i = 0; i&lt;bubbles.length; i++) {\n    bubbles[i].display();\n  }\n}\n\nvoid loadData() {\n  // \"header\" indicates the file has header row. The size of the array \n  // is then determined by the number of rows in the table. \n  table = loadTable(\"data.csv\", \"header\");\n  bubbles = new Bubble[table.getRowCount()];\n\n\n  for (int i = 0; i&lt;table.getRowCount(); i++) {\n    // Iterate over all the rows in a table.\n    TableRow row = table.getRow(i);\n\n\t\n    // Access the fields via their column name (or index).\n    float x = row.getFloat(\"x\");\n    float y = row.getFloat(\"y\");\n    float d = row.getFloat(\"diameter\");\n    String n = row.getString(\"name\");\n    // Make a Bubble object out of the data from each row.\n    bubbles[i] = new Bubble(x, y, d, n);\n  }\n}\n\n\nvoid mousePressed() {\n  // When the mouse is pressed, create a new row and set the values for each column of that row.\n  TableRow row = table.addRow();\n  row.setFloat(\"x\", mouseX);\n  row.setFloat(\"y\", mouseY);\n  row.setFloat(\"diameter\", random(40, 80));\n  row.setString(\"name\", \"Blah\");\n\n  // If the table has more than 10 rows, delete the oldest row.\n  if (table.getRowCount()&gt;10) {\n    table.removeRow(0);\n  }\n\n  // This writes the table back to the original CSV file\n  // and reloads the file so that what's drawn matches.\n  saveTable(table, \"data/data.csv\");\n  loadData();\n}\n\n// This simple Bubble class draws a circle to the window \n// and displays a text label when the mouse hovers.\nclass Bubble {\n  float x, y;\n  float diameter;\n  String name;\n  \n  boolean over = false;\n  \n  // Create the Bubble\n  Bubble(float tempX, float tempY, float tempD, String s) {\n    x = tempX;\n    y = tempY;\n    diameter = tempD;\n    name = s;\n  }\n  \n  // Checking if mouse is over the bubble\n  void rollover(float px, float py) {\n    float d = dist(px, py, x, y);\n    if (d&lt;diameter/2) {\n      over = true; \n    } else {\n      over = false;\n    }\n  }\n  \n  // Display the Bubble\n  void display() {\n    stroke(0);\n    strokeWeight(2);\n    noFill();\n    ellipse(x, y, diameter, diameter);\n    if (over) {\n      fill(0);\n      textAlign(CENTER);\n      text(name, x, y+diameter/2+20);\n    }\n  }\n}\n</pre>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nboolean rollover(int mx, int my) {\n  if (dist(mx, my, x, y)&lt;diameter/2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString[] lines = loadStrings(\"http://www.yahoo.com\");\n</pre>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString onelongstring = join(lines, \" \");\n</pre>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString stuff = \"Number of apples:62. Boy, do I like apples or what!\";\n</pre>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nint start      = stuff.indexOf(\"apples:\" ) + 8;  // STEP 1 \n// The index where a string ends can be found by \n// searching for that string and adding its length (here, 8).\nint end        = stuff.indexOf(\".\", start);      // STEP 2\nString apples  = stuff.substring(start, end);    // STEP 3\nint apple_no   = int(apples);                    // STEP 4\n</pre>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// A function that returns a substring between two substrings. \n// If the beginning of end \"tag\" is not found, the function returns an empty string.\nString giveMeTextBetween(String s, String startTag, String endTag) {\n  // Find the index of the beginning tag\n  int startIndex = s.indexOf(startTag);\n  // If I don't find anything\n  if (startIndex == -1) {\n    return \"\";\n  }\n  // Move to the end of the beginning tag\n  startIndex += startTag.length();\n\n  // Find the index of the end tag\n  int endIndex = s.indexOf(endTag, startIndex);\n  \n  // If I don't find the end tag,\n  if (endIndex == -1) {\n    return \"\";\n  }\n  // Return the text in between\n  return s.substring(startIndex, endIndex);\n}\n</pre>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;div class=\"txt-block\"&gt;\n  &lt;h4 class=\"inline\"&gt;Runtime:&lt;/h4&gt; \n    &lt;time itemprop=\"duration\" datetime=\"PT139M\"&gt;139 min&lt;/time&gt;\n&lt;/div&gt;\n</pre>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;time itemprop=\"duration\" datetime=\"PT139M\"&gt;\n</pre>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;/time&gt;\n</pre>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString url = \"http://www.imdb.com/title/tt0058331\";\nString[] lines = loadStrings(url);\n// Get rid of the array in order to search the whole page\nString html = join(lines, \" \");\n\n// Searching for running time\nString start = \"<time itemprop='\\\"duration\\\"' datetime='\\\"PT139M\\\"'>\"; \n\nString end = \"</time>\";\nString runningtime = giveMeTextBetween(html, start, end);\nprintln(runningtime);\n</pre>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString runningtime;\nPImage poster;\n\nvoid setup() {\n  size(300, 350);\n  loadData();\n}\n\nvoid draw() {\n  // Display all the stuff I want to display\n  background(255);\n  image(poster, 10, 10, 164, 250);\n  fill(0);\n  text(\"Shaun the Sheep\", 10, 300);\n  text(runningtime, 10, 320);\n}\n\nvoid loadData() {\n  String url = \"http://www.imdb.com/title/tt2872750/\";\n\n  // Get the raw HTML source into an array of strings (each line is one element in the array).\n  // The next step is to turn array into one long string with join().\n  String[] lines = loadStrings(url);\n  String html = join(lines, \"\");\n\n  String start = \"<time itemprop='\\\"duration\\\"' datetime='\\\"PT139M\\\"'>\";\n  String end = \"</time>\";\n  runningtime = giveMeTextBetween(html, start, end);Searching for running time.\n\n  start = \"<link rel=\"image_src\" href=\"%5C%22%22;\" end=\"\\\">\";\n  // Search for the URL of the poster image.\n  String imgUrl = giveMeTextBetween(html, start, end);\n  // Now, load that image!\n  poster = loadImage(imgUrl);\n}\n\nString giveMeTextBetween(String s, String before, String after) {\n\n  // This function returns a substring between two substrings (before and after).\n  //  If it can\u2019t find anything it returns an empty string.\n  String found = \"\";\n\n  // Find the index of before\n  int start = s.indexOf(before);     \n  if (start == -1) {\n    return \"\";                       \n  }    \n\n  // Move to the end of the beginning tag\n  // and find the index of the \"after\" String      \n  start += before.length();    \n  int end = s.indexOf(after, start); \n  if (end == -1) {\n    return \"\";                       \n  }\n\n  // Return the text in between\n  return s.substring(start, end); \n}\n</pre>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nIntDict inventory = new IntDict();\n</pre>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// set() assigns an integer to a String.\ninventory.set(\"pencils\", 10);\ninventory.set(\"paper clips\", 128);\ninventory.set(\"pens, 16\");\n</pre>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\ninventory.add(\"pencils\", 5);\t// The value of \u201cpencils\u201d is now 15.\n</pre>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\ninventory.increment(\"pens\");\t// The value of \u201cpencils\u201d is now 16.\n</pre>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nint num = inventory.get(\"pencils\"); \t// The value of num is 16.\n</pre>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString[] allwords;\n\n// Any punctuation is used as a delimiter.\nString delimiters = \" ,.?!;:[]\";\n\nIntDict concordance;\n\nvoid setup() {\n  size(360, 640);\n\n  // Load A Midsummer Night's Dream into an array of strings\n  String url = \"http://www.gutenberg.org/cache/epub/1514/pg1514.txt\";\n  String[] rawtext = loadStrings(url);\n\n  // Join the big array together as one long string\n  String everything = join(rawtext, \"\" );\n\n  // All the lines in A Midsummer Night's Dream are first joined as one big string\n  // and then split up into an array of individual words.\n  // Note the use of splitTokens() since I am using spaces and punctuation marks as delimiters.\n  allwords = splitTokens(everything, delimiters);  \n\n\n  // Make a new empty dictionary\n  concordance = new IntDict();\n\n  for (int i = 0; i&lt;allwords.length; i++) {\n    // It's useful to convert each word to lower case so that,\n    // for example, \u201cThe\u201d and \u201cthe\u201d are both counted as the same word.\n    String s = allwords[i].toLowerCase();\n    // For every single word, increase its count in the dictionary.\n    concordance.increment(s);\n  }\n  \n  // Sort the dictionary so that words that appear most often are first.\n  concordance.sortValuesReverse();\n}\n\nvoid draw() {\n  background(255);\n\n  // Display the text and total times the word appears\n  int h = 20;\n  // In order to iterate over every word in the dictionary,\n  // first ask for an array of all of the keys.\n  String[] keys = concordance.keyArray();\n\n  for (int i = 0; i&lt;height/h; i++) {\n    // Look at each key one at a time and retrieve its count.\n    String word = keys[i]; \n    int count = concordance.get(word);\n\n    fill(51);\n    // Displaying a rectangle along with the count as a simple graph.\n    rect(0, i*20, count/4, h-4);\n    fill(0);\n    text(word + \": \" + count, 10+count/4, i*h+h/2);\n    stroke(0);\n  }\n}\n</pre>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;?xml version = \"1.0\" encoding = \"UTF-8 \"?&gt;\n&lt;students&gt;\n  &lt;student&gt;\n    &lt;id&gt;001&lt;/id&gt;\n    &lt;name&gt;Daniel Shiffman&lt;/name&gt;\n    &lt;phone&gt;555-555-5555&lt;/phone&gt;\n    &lt;email&gt;daniel@shiffman.net&lt;/email&gt;\n    &lt;address&gt;\n      &lt;street&gt;123 Processing Way&lt;/street&gt;\n      &lt;city&gt;Loops&lt;/city&gt;\n      &lt;state&gt;New York&lt;/state&gt;\n      &lt;zip&gt;01234&lt;/zip&gt;\n    &lt;/address&gt;\n  &lt;/student&gt;\n  &lt;student&gt;\n    &lt;id&gt;002&lt;/id&gt;\n    &lt;name&gt;Zoog&lt;/name&gt;\n    &lt;phone&gt;555-555-5555&lt;/phone&gt;\n    &lt;email&gt;zoog@planetzoron.uni&lt;/email&gt;\n    &lt;address&gt;\n      &lt;street&gt;45.3 Nebula 5&lt;/street&gt;\n      &lt;city&gt;Boolean City&lt;/city&gt;\n      &lt;state&gt;Booles&lt;/state&gt;\n      &lt;zip&gt;12358&lt;/zip&gt;\n    &lt;/address&gt;\n  &lt;/student&gt;\n&lt;/students&gt;\n</pre>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?&gt;\n&lt;rss version=\"2.0\" xmlns:yweather=\"http://xml.weather.yahoo.com/ns/rss/1.0\"&gt;\n  &lt;channel&gt;\n    &lt;item&gt;\n      &lt;title&gt;Conditions for New York, NY at 12:49 pm EDT&lt;/title&gt;\n      &lt;geo:lat&gt;40.67&lt;/geo:lat&gt;\n      &lt;geo:long&gt;-73.94&lt;/geo:long&gt;\n      &lt;link&gt;http://us.rd.yahoo.com/dailynews/rss/weather/New_York__NY//link&gt;\n      &lt;pubDate&gt;Thu, 24 Jul 2014 12:49 pm EDT&lt;/pubDate&gt;\n      &lt;yweather:condition text=\"Partly Cloudy\" code=\"30\" temp=\"76\"/&gt;\n      &lt;yweather:forecast day=\"Thu\" low=\"65\" high=\"82\" text=\"Partly Cloudy\"/&gt;\n    &lt;/item&gt;\n  &lt;/channel&gt;\n&lt;/rss&gt;\n</pre>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;title&gt;Conditions for New York, NY at 12:49 pm EDT&lt;/title&gt;\n</pre>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;yweather:forecast day=\"Thu\" low=\"65\" high=\"82\" text=\"Partly Cloudy\"/&gt;\n</pre>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nXML xml = loadXML(\"http://xml.weather.yahoo.com/forecastrss?p=10003\");\n</pre>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Accessing the \u201cchannel\u201d child element of the root element --&gt;\nXML channel = xml.getChild(\"channel\");\n</pre>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nXML root = loadXML(\"http://xml.weather.yahoo.com/forecastrss?p=10003\"); // Step 1\n\nXML channel     = root.getChild(\"channel\"); // Step 2\n\nXML item        = channel.getChild(\"item\"); // Step 3\n\nXML yweather    = item.getChild(\"yweather:condition\"); // Step 4\n\nint temperature = yweather.getInt(\"temp\"); // Step 5\n</pre>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nXML root = loadXML(http://xml.weather.yahoo.com/forecastrss?p=10003);\n\nXML forecast = \n  root.getChild(\"channel\").getChild(\"item\").getChild(\"yweather:condition\"); // Steps 2-4\nint temperature = forecast.getInt(\"temp\");\n</pre>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nXML forecast = xml.getChild(\"channel/item/yweather:condition\"); // Steps 2-4\n</pre>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nint temperature = 0;Temperature is stored as a number and the description of the weather as a string. \nString weather = \"\";\n\n\n// The zip code\nString zip = \"10003\";\n\nvoid setup() {\n  size(200, 200);\n\n  // The URL for the XML document\n  String url = \"http://xml.weather.yahoo.com/forecastrss?p=\" + zip;\n\n  // Load the XML document\n  XML xml = loadXML(url);\n\n  // Here, I grab the XML element that I want. \n  XML forecast = xml.getChild(\"channel/item/yweather:forecast\");\n\n  // And then I pull the attributes from that XML element.\n  temperature = forecast.getInt(\"high\"); \n  weather = forecast.getString(\"text\");\n}\n\nvoid draw() {\n  background(255);\n  fill(0);\n\n  // Display all the stuff I want to display\n  text(\"Zip code: \" + zip, 10, 50);\n  text(\"Today\u2019s high: \" + temperature, 10, 70);\n  text(\"Forecast: \" + weather, 10, 90);\n}\n</pre>", "in_page_order": 51, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;bubbles&gt;\n  &lt;bubble&gt;\n    &lt;position x=\"160\" y=\"103\"/&gt;\n    &lt;diameter&gt;43.19838&lt;/diameter&gt;\n    &lt;label&gt;Happy&lt;/label&gt;\n  &lt;/bubble&gt;\n  &lt;bubble&gt;\n    &lt;position x=\"372\" y=\"137\"/&gt;\n    &lt;diameter&gt;52.42526&lt;/diameter&gt;\n    &lt;label&gt;Sad&lt;/label&gt;\n  &lt;/bubble&gt;\n  &lt;bubble&gt;\n    &lt;position x=\"273\" y=\"235\"/&gt;\n    &lt;diameter&gt;61.14072&lt;/diameter&gt;\n    &lt;label&gt;Joyous&lt;/label&gt;\n  &lt;/bubble&gt;\n  &lt;bubble&gt;\n    &lt;position x=\"121\" y=\"179\"/&gt;\n    &lt;diameter&gt;44.758068&lt;/diameter&gt;\n    &lt;label&gt;Melancholy&lt;/label&gt;\n  &lt;/bubble&gt;\n&lt;/bubbles&gt;\n</pre>", "in_page_order": 52, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// An Array of Bubble objects\nBubble[] bubbles;\n// An XML object\n<strong>XML xml;</strong>\n\nvoid setup() {\n  size(480, 360);\n  loadData();\n}\n\nvoid loadData() {\n  <strong>// Load XML file</strong>\n  <strong>xml = loadXML(\"data.xml\");</strong>\n  <strong>// Get all the child nodes named \"bubble\"</strong>\n  <strong>XML[] children = xml.getChildren(\"bubble\");</strong>\n\n  <strong>bubbles = new Bubble[children.length];\n  // The size of the <code>Bubble</code> array is determined by the total XML elements named \u201cbubble.\u201d</strong>\n\n  <strong>for (int i = 0; i &lt; bubbles.length; i++) {</strong>\n    \n    <strong>XML positionElement = children[i].getChild(\"position\");</strong>\n\t// The position element has two attributes: \u201cx\u201d and \u201cy\u201d.\n\t// Attributes can be accessed as an integer or float via <code>getInt()</code> and <code>getFloat()</code>.\n    <strong>float x = positionElement.getInt(\"x\");</strong>\n    <strong>float y = positionElement.getInt(\"y\");</strong>\n\t\n    <strong>// The diameter is the content of the child named \"diameter\"</strong>\n    <strong>XML diameterElement = children[i].getChild(\"diameter\");</strong>\n    <strong>float diameter = diameterElement.getFloatContent();</strong>\n    // Notice, however, with the content of an XML node, \n\t// I retrieve via getIntContent() and getFloatContent().\n\n    <strong>// The label is the content of the child named \"label\"</strong>\n    <strong>XML labelElement = children[i].getChild(\"label\");</strong>\n    <strong>String label = labelElement.getContent();</strong>\n\n    // Make a Bubble object out of the data read\n    bubbles[i] = new Bubble(x, y, diameter, label);\n  }  \n}\n\nvoid draw() {\n  background(255);\n  // Display all bubbles\n  for (int i = 0; i &lt; bubbles.length; i++) {\n    bubbles[i].display();\n    bubbles[i].rollover(mouseX, mouseY);\n  }\n}\n</pre>", "in_page_order": 53, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n{\n  \"name\":\"Olympia\",\n  // Each name/value pair is separated by a comma.\n  \"age\":3,\n  \"height\":96.5,\n  \"state\":\"giggling\"\n}</pre>", "in_page_order": 54, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre data-type=\"programlisting\">\nclass Person {\n  String name;\n  int age;\n  float height;\n  String state;\n}\n</pre>", "in_page_order": 55, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n{\n  \"name\":\"Olympia\",\n  \"age\":3,\n  \"height\":96.5,\n  \"state\":\"giggling\",\n  // The value of \u201cbrother\u201d is an object containing two name/value pairs.\n  \"brother\":{\n    \"name\":\"Elias\",\n    \"age\":6\n  }\n}</pre>", "in_page_order": 56, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n&lt;xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;person&gt;\n  &lt;name&gt;Olympia&lt;/name&gt;\n  &lt;age&gt;3&lt;/age&gt;\n  &lt;height&gt;96.5&lt;/height&gt;\n  &lt;state&gt;giggling&lt;/state&gt;\n  &lt;brother&gt;\n    &lt;name&gt;Elias&lt;/name&gt;\n    &lt;age&gt;6&lt;/age&gt;\n  &lt;/brother&gt;\n&lt;/person&gt;\n</pre>", "in_page_order": 57, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n[1, 7, 8, 9, 10, 13, 15]\n</pre>", "in_page_order": 58, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n{\n  \"name\":\"Olympia\",\n  // The value of \u201cfavorite colors\u201d is an array of strings.\n  \"favorite colors\":[\n    \"purple\",\n    \"blue\",\n    \"pink\"\n  ]\n}\n</pre>", "in_page_order": 59, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n{\n  \"bubbles\":[\n    {\n      \"position\":{\n        \"x\":160,\n        \"y\":103\n      },\n      \"diameter\":43.19838,\n      \"label\":\"Happy\"\n    },\n    {\n      \"position\":{\n        \"x\":372,\n        \"y\":137\n      },\n      \"diameter\":52.42526,\n      \"label\":\"Sad\"\n    },\n    {\n      \"position\":{\n        \"x\":273,\n        \"y\":235\n      },\n      \"diameter\":61.14072,\n      \"label\":\"Joyous\"\n    }\n  ]\n}\n</pre>", "in_page_order": 60, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n[\n  {\n    \"name\":\"Elias\"\n  },\n  {\n    \"name\":\"Olympia\"\n  }\n]\n</pre>", "in_page_order": 61, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n{\n  \"names\":[\n    {\n      \"name\":\"Elias\"\n    },\n    {\n      \"name\":\"Olympia\"\n    }\n  ]\n}\n</pre>", "in_page_order": 62, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nJSONObject json = loadJSONObject(\"file.json\");\n\nJSONArray json = JSONArray(\"file.json\");\n</pre>", "in_page_order": 63, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n{\n  \"bubbles\":[\n    {\n      \"position\":{\n        \"x\":160,\n        \"y\":103\n      },\n      \"diameter\":43.19838,\n      \"label\":\"Happy\"\n    },\n    {\n      \"position\":{\n        \"x\":372,\n        \"y\":137\n      },\n      \"diameter\":52.42526,\n      \"label\":\"Sad\"\n    }\n  ]\n}\n</pre>", "in_page_order": 64, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nJSONObject json = loadJSONObject(\"data.json\");\nJSONArray bubbleData = json.getJSONArray(\"bubbles\");\n</pre>", "in_page_order": 65, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nfor (int i = 0; i &lt; bubbleData.size(); i++) {\n  JSONObject bubble = bubbleData.getJSONObject(i);\n }\n</pre>", "in_page_order": 66, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n  JSONObject position = bubble.getJSONObject(\"position\");\n\n\n  int x = position.getInt(\"x\");\n  int y = position.getInt(\"y\");\n\n  float diameter = bubble.getFloat(\"diameter\");\n  String label = bubble.getString(\"label\");\n</pre>", "in_page_order": 67, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// An Array of Bubble objects\nBubble[] bubbles;\n\nvoid setup() {\n  size(480, 360);\n  loadData();\n}\n\nvoid loadData() {\n  // Load the JSON file and grab the array.\n  JSONObject json = loadJSONObject(\"data.json\");\n  JSONArray bubbleData = json.getJSONArray(\"bubbles\");\n\n  // The size of the array of Bubble objects is determined by the length of the JSON array.\n  bubbles = new Bubble[bubbleData.size()]; \n\n\n  for (int i = 0; i&lt;bubbleData.size(); i++) {\n\n    // Iterate through the array, grabbing each JSON object one at a time.\n    JSONObject bubble = bubbleData.getJSONObject(i);\n\n    // Get a position object\n    JSONObject position = bubble.getJSONObject(\"position\");\n    // Get (x,y) from JSON object \"position\"\n    int x = position.getInt(\"x\");\n    int y = position.getInt(\"y\");\n    \n    // Get diamter and label\n    float diameter = bubble.getFloat(\"diameter\");\n    String label = bubble.getString(\"label\");\n\n    // Put the Bubble objects into an array.\n    bubbles[i] = new Bubble(x, y, diameter, label);\n  }\n}\n</pre>", "in_page_order": 68, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nvoid setup() {\n  thread(\"someFunction\");\n}\n \nvoid draw() {\n \n}\n \nvoid someFunction() {\n  // This function will run as a thread when called via\n  // thread(\"someFunction\") as it was in setup!\n}\n</pre>", "in_page_order": 69, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nvoid draw() {\n  // The code will stop here and wait to receive the data before moving on.\n  JSONObject json = loadJSONObject(\"http://time.jsontest.com/\");\n  String time = json.getString(\"time\");\n  text(time, 40, 100);\n}\n</pre>", "in_page_order": 70, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString time = \"\";\n\nvoid draw() {\n  // Now the code will move on to the next line while requestData() executes in a separate thread.\n  thread(\"requestData\");\n  text(time, 40, 100);\n}\n\nvoid requestData() {\n  JSONObject json = loadJSONObject(\"http://time.jsontest.com/\");\n  time = json.getString(\"time\");\n}\n</pre>", "in_page_order": 71, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nTimer timer = new Timer(1000);\nString time = \"\";\n\nvoid setup() {\n  size(200, 200);\n  // Start by requesting the data asynchronously in a thread.\n  thread(\"retrieveData\");\n  timer.start();\n}\n\nvoid draw() {\n  background(255);\n  // Every one second, make a new request.\n  if (timer.isFinished()) {\n    retrieveData();\n  \n  // And restart the timer.\n    timer.start();\n  }\n\n  fill(0);\n  text(time, 40, 100);\n\n  translate(20, 100);\n  stroke(0);\n  //Draw a little animation to demonstrate that the draw() loop never pauses.\n  rotate(frameCount*0.04);\n  for (int i = 0; i&lt;10; i++) {\n    rotate(radians(36));\n    line(5, 0, 10, 0);\n  }\n}\n\n// get the data\nvoid retrieveData() {\n  JSONObject json = loadJSONObject(\"http://time.jsontest.com/\");\n  time = json.getString(\"time\");\n}\n</pre>", "in_page_order": 72, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// This is not a real key\nString apiKey = \"40e2es0b3ca44563f9c62aeded4431dc:12:51913116\";\n</pre>", "in_page_order": 73, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nString url = \"http://api.nytimes.com/svc/search/v2/articlesearch.json\";\n</pre>", "in_page_order": 74, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nsearch(\"processing\");\n</pre>", "in_page_order": 75, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// The name/value pairs that configure the API query are: (q,processing) and (sort,oldest)\nString query = \"?q=processing&amp;sort=oldest\";\n</pre>", "in_page_order": 76, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\nvoid setup() {\n  size(200, 200);\n  \n  String apiKey = \"40e2ea0b3ca44563f9c62aeded0431dc:18:51513116\";\n  String url = \"http://api.nytimes.com/svc/search/v2/articlesearch.json\";\n  String query = \"?q=processing&amp;sort=newest\";\n\n  // Make the API query\n  // Here, I format the call to the API by joing the URL with the API key with the query string.\n  JSONObject json = loadJSONObject(url+query+\"&amp;api-key=\"+apiKey);\n\n  String headline = json.getJSONObject(\"response\").getJSONArray(\"docs\").\n    // Grabbing a single headline from the results.\n    getJSONObject(0).getJSONObject(\"headline\").getString(\"main\");\n  background(255);\n  fill(0);\n  text(headline, 10, 10, 180, 190);\n}\n</pre>", "in_page_order": 77, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>\n// Temboo acts as a go-between you and Twitter, so first you just authenticate with Temboo.\nTembooSession session = new TembooSession(\"ACCOUNT_NAME\", \"APP_NAME\", \"APP_KEY\");\n\nTweets tweets = new Tweets(session);\n// Then you can configure a query to send to Twitter itself and grab the results.\ntweets.setCredential(\"your-twitter-name\");\ntweetsChoreo.setQuery(\"arugula\");\nTweetsResultSet tweetsResults = tweets.run();\n\nJSONObject searchResults = parseJSONObject(tweetsResults.getResponse());\n\nJSONArray statuses = searchResults.getJSONArray(\"statuses\");\n\n// Finally, you can search through the results and grab a tweet.\nJSONObject tweet = statuses.getJSONObject(0);\nString tweetText = tweet.getString(\"text\"); \n</pre>", "in_page_order": 78, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read CSV file", "url": "https://www.ibm.com/support/knowledgecenter/en/SSSHRK_4.2.0/disco/reference/dsc_javacollectorpropertiesfilereference.html", "url position": 42, "segments": []},
{"query": "How to read CSV file", "url": "https://forums.mulesoft.com/questions/71459/get-csv-file-as-payload-from-java-and-pass-it-to-t.html", "url position": 36, "segments": [{"code": "     import java.io.BufferedReader;\n     import java.io.FileNotFoundException;\n     import java.io.FileReader;\n     import java.io.IOException;\n     import java.util.ArrayList;\n     import java.util.HashMap;\n     \n     public class CSVReader {\n     \n         public ArrayList readFile() {\n     \n             String file = \"path/to/file.csv\";\n             BufferedReader br = null;\n             String line = null;\n             String[] country = null;\n             ArrayList<HashMap<String, String>> listOfCountries = new ArrayList<HashMap<String, String>>();\n             HashMap<String, String> mapOfCountry = null;\n     \n             try {\n                 br = new BufferedReader(new FileReader(file));\n                 while ((line = br.readLine()) != null) {\n                     country = line.split(\",\");\n                     mapOfCountry = new HashMap<String, String>();\n                     mapOfCountry.put(\"column0\", country[0]);\n                     mapOfCountry.put(\"column1\", country[1]);\n                     mapOfCountry.put(\"column2\", country[2]);\n                     listOfCountries.add(mapOfCountry);\n                 }\n                 return listOfCountries;\n             } catch (FileNotFoundException e) {\n                 e.printStackTrace();\n             } catch (IOException e) {\n                 e.printStackTrace();\n             } finally {\n                 if (br != null) {\n                     try {\n                         br.close();\n                     } catch (IOException e) {\n                         e.printStackTrace();\n                     }\n                 }\n             }\n             return null;\n         }\n     }\n \n \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "http://blog.pengyifan.com/how-to-read-csv-files-in-java-a-case-study-of-iterator-and-decorator/", "url position": 41, "segments": [{"code": "COL1,COL2\na,b\nc,d\ne,f\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\npublic void test() throws FileNotFoundException, IOException {\n  CSVParser parser = new CSVParser(\n      new FileReader(\"test.csv\"), \n      CSVFormat.DEFAULT.withHeader());\n  for (CSVRecord record : parser) {\n    System.out.printf(\"%st%sn\", \n      record.get(\"COL1\"), \n      record.get(\"COL2\"));\n  }\n  parser.close();\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\"COL1\",\"COL2\"\n\"a\",\"b\"\n\"c\",\"d\"\n\"e\",\"f\"\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nCSVFormat format = CSVFormat.newFormat(',')\n    .withQuoteChar('\"')\n    .withHeader();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "CSVFormat format = CSVFormat.newFormat(',');\nCSVFormat format1 = format.withQuoteChar('\"');\nCSVFormat format2 = format.withHeader();\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "COL1    COL2\n# comments\na       b\nc       d\ne       f\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nCSVFormat format = CSVFormat.newFormat('t')\n    .withCommentStart('#')\n    .withIgnoreEmptyLines(true)\n    .withNullString(\"\")\n    .withHeader();\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read CSV file", "url": "https://www.pluralsight.com/guides/microsoft-net/building-a-generic-csv-writer-reader-using-reflection", "url position": 40, "segments": []},
{"query": "How to read CSV file", "url": "http://seleniummaster.com/sitecontent/index.php/java-tutorial/java-csv/299-read-csv-in-java", "url position": 33, "segments": [{"code": "<dependency>\r\n        <groupId>net.sourceforge.javacsv</groupId>\r\n        <artifactId>javacsv</artifactId>\r\n        <version>2.0</version>\r\n</dependency>\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "TestId,TestName,TestModule,TestType,TestSteps,Action,TestResult,Note\r\n1234,Login,Dashboard,Regression,1,Open Browser,,\r\n1234,Login,Dashboard,Regression,2,Enter user name,,\r\n1234,Login,Dashboard,Regression,3,Enter user password,,\r\n1234,Login,Dashboard,Regression,4,Click on login button,,\r\n1234,Login,Dashboard,Regression,5,Verify that Logout link should be displayed,,\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package com.example.csv;\r\nimport com.csvreader.CsvReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\npublic class ReadCsvFile {\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n\r\n            CsvReader testcases = new CsvReader(\"test.csv\");\r\n\r\n            testcases.readHeaders();\r\n            //get total numbers of header column\r\n           int numberOfHeaders=testcases.getHeaderCount();\r\n            //print header column\r\n            for(int i=0;i<numberOfHeaders;i++)\r\n            {\r\n                System.out.print(testcases.getHeader(i)+\",  \");\r\n            }\r\n            System.out.println();\r\n            while (testcases.readRecord())\r\n            {\r\n                String TestId = testcases.get(\"TestId\");\r\n                String TestName = testcases.get(\"TestName\");\r\n                String TestModule = testcases.get(\"TestModule\");\r\n                String TestType = testcases.get(\"TestType\");\r\n                String TestSteps = testcases.get(\"TestSteps\");\r\n                String Action = testcases.get(\"Action\");\r\n                String TestResult = testcases.get(\"TestResult\");\r\n                String Note = testcases.get(\"Note\");\r\n                 // output file content\r\n                System.out.println(TestId +\",   \" + TestName +\",    \" + TestModule +\",  \" + TestType +\",    \" + TestSteps +\",   \" + Action +\",  \" + TestResult+\",   \"+Note);\r\n            }\r\n\r\n            testcases.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "TestId,  TestName,  TestModule,  TestType,  TestSteps,  Action,  TestResult,  Note,  \r\n1234,   Login,    Dashboard,  Regression,    1,   Open Browser,  ,   \r\n1234,   Login,    Dashboard,  Regression,    2,   Enter user name,  ,   \r\n1234,   Login,    Dashboard,  Regression,    3,   Enter user password,  ,   \r\n1234,   Login,    Dashboard,  Regression,    4,   Click on login button,  ,   \r\n1234,   Login,    Dashboard,  Regression,    5,   Verify that Logout link should be displayed,  , \r\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]}
]