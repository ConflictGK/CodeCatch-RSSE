[
  {
    "query": "How to generate MD5 hash code",
    "url": "https://stackoverflow.com/questions/415953/how-can-i-generate-an-md5-hash",
    "url position": 1,
    "segments": [
      {
        "code": "String plaintext = \"your text here\";\nMessageDigest m = MessageDigest.getInstance(\"MD5\");\nm.reset();\nm.update(plaintext.getBytes());\nbyte[] digest = m.digest();\nBigInteger bigInt = new BigInteger(1,digest);\nString hashtext = bigInt.toString(16);\n// Now we need to zero pad it if you actually want the full 32 chars.\nwhile(hashtext.length() < 32 ){\n  hashtext = \"0\"+hashtext;\n}\n",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "237",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.reset": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true,
          "BigInteger.toString": true
        },
        "APIsProjects": {
          "MessageDigest.reset": 72,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185,
          "BigInteger.toString": 76
        },
        "APIsFiles": {
          "MessageDigest.reset": 128,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674,
          "BigInteger.toString": 161
        },
        "APIsSnippets": {
          "MessageDigest.reset": 167,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478,
          "BigInteger.toString": 322
        },
        "APIsQualifiedNames": {
          "MessageDigest.reset": "java.security.MessageDigest.reset",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__",
          "BigInteger.toString": "java.math.BigInteger.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public String MD5(String md5) {\n   try {\n        java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\n        byte[] array = md.digest(md5.getBytes());\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < array.length; ++i) {\n          sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));\n       }\n        return sb.toString();\n    } catch (java.security.NoSuchAlgorithmException e) {\n    }\n    return null;\n}\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "137",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "final MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.reset();\nmessageDigest.update(string.getBytes(Charset.forName(\"UTF8\")));\nfinal byte[] resultByte = messageDigest.digest();\nfinal String result = new String(Hex.encodeHex(resultByte));\n",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "80",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.reset": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "String.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.reset": 72,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "String.__init__": 525
        },
        "APIsFiles": {
          "MessageDigest.reset": 128,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "String.__init__": 5322
        },
        "APIsSnippets": {
          "MessageDigest.reset": 167,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "String.__init__": 10364
        },
        "APIsQualifiedNames": {
          "MessageDigest.reset": "java.security.MessageDigest.reset",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "String.__init__": "java.lang.String.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\nmd5.update(StandardCharsets.UTF_8.encode(string));\nreturn String.format(\"%032x\", new BigInteger(1, md5.digest()));\n",
        "in_page_order": 8,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "48",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.security.*;\nimport java.math.*;\n\npublic class MD5 {\n    public static void main(String args[]) throws Exception{\n        String s=\"This is a test\";\n        MessageDigest m=MessageDigest.getInstance(\"MD5\");\n        m.update(s.getBytes(),0,s.length());\n        System.out.println(\"MD5: \"+new BigInteger(1,m.digest()).toString(16));\n    }\n}\n",
        "in_page_order": 9,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "31",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "Hasher hasher = Hashing.md5().newHasher();\nhasher.putString(\"my string\");\nbyte[] md5 = hasher.hash().asBytes();\n",
        "in_page_order": 10,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "29",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Hasher.putString": true,
          "Hasher.hash": true
        },
        "APIsProjects": {
          "Hasher.putString": 4,
          "Hasher.hash": 15
        },
        "APIsFiles": {
          "Hasher.putString": 5,
          "Hasher.hash": 32
        },
        "APIsSnippets": {
          "Hasher.putString": 8,
          "Hasher.hash": 42
        },
        "APIsQualifiedNames": {
          "Hasher.putString": "com.google.common.hash.Hasher.putString",
          "Hasher.hash": "com.google.common.hash.Hasher.hash"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public class Hash {\n    /**\n     * \n     * @param txt, text in plain format\n     * @param hashType MD5 OR SHA1\n     * @return hash in hashType \n     */\n    public static String getHash(String txt, String hashType) {\n        try {\n                    java.security.MessageDigest md = java.security.MessageDigest.getInstance(hashType);\n                    byte[] array = md.digest(txt.getBytes());\n                    StringBuffer sb = new StringBuffer();\n                    for (int i = 0; i < array.length; ++i) {\n                        sb.append(Integer.toHexString((array[i] & 0xFF) | 0x100).substring(1,3));\n                 }\n                    return sb.toString();\n            } catch (java.security.NoSuchAlgorithmException e) {\n                //error action\n            }\n            return null;\n    }\n\n    public static String md5(String txt) {\n        return Hash.getHash(txt, \"MD5\");\n    }\n\n    public static String sha1(String txt) {\n        return Hash.getHash(txt, \"SHA1\");\n    }\n}\n",
        "in_page_order": 12,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "25",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "private String md5(String s) {\n    try {\n        MessageDigest m = MessageDigest.getInstance(\"MD5\");\n        m.update(s.getBytes(), 0, s.length());\n        BigInteger i = new BigInteger(1,m.digest());\n        return String.format(\"%1$032x\", i);         \n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n",
        "in_page_order": 13,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "21",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class MD5Example {\n\npublic static void main(String[] args) throws Exception {\n\n    final String inputString = \"Hello MD5\";\n\n    System.out.println(\"MD5 hex for '\" + inputString + \"' :\");\n    System.out.println(getMD5Hex(inputString));\n}\n\npublic static String getMD5Hex(final String inputString) throws NoSuchAlgorithmException {\n\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(inputString.getBytes());\n\n    byte[] digest = md.digest();\n\n    return convertByteToHex(digest);\n}\n\nprivate static String convertByteToHex(byte[] byteData) {\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < byteData.length; i++) {\n        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n    }\n\n    return sb.toString();\n}\n}\n",
        "in_page_order": 16,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "13",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "StringBuilder.__init__": true,
          "StringBuilder.toString": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "StringBuilder.__init__": 662,
          "StringBuilder.toString": 651
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "StringBuilder.__init__": 20643,
          "StringBuilder.toString": 19289
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "StringBuilder.__init__": 30174,
          "StringBuilder.toString": 28699
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__",
          "StringBuilder.toString": "java.lang.StringBuilder.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "String hash = MD5.asHex(MD5.getHash(new File(filename)));\n",
        "in_page_order": 18,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "8",
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "File.__init__": true
        },
        "APIsProjects": {
          "File.__init__": 591
        },
        "APIsFiles": {
          "File.__init__": 13065
        },
        "APIsSnippets": {
          "File.__init__": 40468
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public static String getHashMD5(String string) {\n    try {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        BigInteger bi = new BigInteger(1, md.digest(string.getBytes()));\n        return bi.toString(16);\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getLogger(MD5Utils.class\n                .getName()).log(Level.SEVERE, null, ex);\n\n        return \"\";\n    }\n}\n",
        "in_page_order": 23,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "3",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "BigInteger.__init__": true,
          "BigInteger.toString": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185,
          "BigInteger.toString": 76
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674,
          "BigInteger.toString": 161
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478,
          "BigInteger.toString": 322
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__",
          "BigInteger.toString": "java.math.BigInteger.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public static String md5( String input ) {\n    try {\n        java.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\n        byte[] array = md.digest(input.getBytes( \"UTF-8\" ));\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < array.length; i++) {\n            sb.append( String.format( \"%02x\", array[i]));\n        }\n        return sb.toString();\n    } catch ( NoSuchAlgorithmException | UnsupportedEncodingException e) {\n        return null;            \n    }\n\n}\n",
        "in_page_order": 24,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "3",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public static String md5encryption(String text)\n    {   String hashtext = null;\n        try \n        {\n            String plaintext = text;\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            m.reset();\n            m.update(plaintext.getBytes());\n            byte[] digest = m.digest();\n            BigInteger bigInt = new BigInteger(1,digest);\n            hashtext = bigInt.toString(16);\n            // Now we need to zero pad it if you actually want the full 32 chars.\n            while(hashtext.length() < 32 ){\n              hashtext = \"0\"+hashtext;   \n            }\n        } catch (Exception e1) \n        {\n            // TODO: handle exception\n            JOptionPane.showMessageDialog(null,e1.getClass().getName() + \": \" + e1.getMessage());   \n        }\n        return hashtext;     \n    }\n",
        "in_page_order": 25,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "3",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.reset": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true,
          "BigInteger.toString": true
        },
        "APIsProjects": {
          "MessageDigest.reset": 72,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185,
          "BigInteger.toString": 76
        },
        "APIsFiles": {
          "MessageDigest.reset": 128,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674,
          "BigInteger.toString": 161
        },
        "APIsSnippets": {
          "MessageDigest.reset": 167,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478,
          "BigInteger.toString": 322
        },
        "APIsQualifiedNames": {
          "MessageDigest.reset": "java.security.MessageDigest.reset",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__",
          "BigInteger.toString": "java.math.BigInteger.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": " import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n\n/**\n* MD5 encryption\n*\n* @author Hongten\n*\n*/\npublic class MD5 {\n\n public static void main(String[] args) {\n     System.out.println(MD5.getMD5(\"123456\"));\n }\n\n /**\n  * Use md5 encoded code value\n  *\n  * @param sInput\n  * clearly\n  * @ return md5 encrypted password\n  */\n public static String getMD5(String sInput) {\n\n     String algorithm = \"\";\n     if (sInput == null) {\n         return \"null\";\n     }\n     try {\n         algorithm = System.getProperty(\"MD5.algorithm\", \"MD5\");\n     } catch (SecurityException se) {\n     }\n     MessageDigest md = null;\n     try {\n         md = MessageDigest.getInstance(algorithm);\n     } catch (NoSuchAlgorithmException e) {\n         e.printStackTrace();\n     }\n     byte buffer[] = sInput.getBytes();\n\n     for (int count = 0; count < sInput.length(); count++) {\n         md.update(buffer, 0, count);\n     }\n     byte bDigest[] = md.digest();\n     BigInteger bi = new BigInteger(bDigest);\n     return (bi.toString(16));\n }\n}\n",
        "in_page_order": 28,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "0",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "BigInteger.__init__": true,
          "BigInteger.toString": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185,
          "BigInteger.toString": 76
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674,
          "BigInteger.toString": 161
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478,
          "BigInteger.toString": 322
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__",
          "BigInteger.toString": "java.math.BigInteger.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public final class MD5 {\npublic enum SaltOption {\n    BEFORE, AFTER, BOTH, NONE;\n}\nprivate static final String ALG = \"MD5\";\n//For conversion to 2-char hex\nprivate static final char[] digits = {\n    '0' , '1' , '2' , '3' , '4' , '5' ,\n    '6' , '7' , '8' , '9' , 'a' , 'b' ,\n    'c' , 'd' , 'e' , 'f' , 'g' , 'h' ,\n    'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,\n    'o' , 'p' , 'q' , 'r' , 's' , 't' ,\n    'u' , 'v' , 'w' , 'x' , 'y' , 'z'\n};\n\nprivate SaltOption opt;\n\n/**\n * Added the SaltOption constructor since everybody\n * has their own standards when it comes to salting\n * hashes.\n * \n * This gives the developer the option...\n * \n * @param option The salt option to use, BEFORE, AFTER, BOTH or NONE.\n */\npublic MD5(final SaltOption option) {\n    //TODO: Add Char Encoding options too... I was too lazy!\n    this.opt = option;\n}\n\n/**\n * \n * Returns the salted MD5 checksum of the text passed in as an argument.\n * \n * If the salt is an empty byte array - no salt is applied.\n * \n * @param txt The text to run through the MD5 algorithm.\n * @param salt The salt value in bytes.\n * @return The salted MD5 checksum as a <code>byte[]</code>\n * @throws NoSuchAlgorithmException\n */\nprivate byte[] createChecksum(final String txt, final byte[] salt) throws NoSuchAlgorithmException {\n    final MessageDigest complete = MessageDigest.getInstance(ALG);\n    if(opt.equals(SaltOption.BEFORE) || opt.equals(SaltOption.BOTH)) {\n        complete.update(salt);\n    }\n    complete.update(txt.getBytes());\n    if(opt.equals(SaltOption.AFTER) || opt.equals(SaltOption.BOTH)) {\n        complete.update(salt);\n    }\n    return complete.digest();\n}\n\n/**\n * \n * Returns the salted MD5 checksum of the file passed in as an argument.\n * \n * If the salt is an empty byte array - no salt is applied.\n * \n * @param fle The file to run through the MD5 algorithm.\n * @param salt The salt value in bytes.\n * @return The salted MD5 checksum as a <code>byte[]</code>\n * @throws IOException\n * @throws NoSuchAlgorithmException\n */\nprivate byte[] createChecksum(final File fle, final byte[] salt)\n        throws IOException, NoSuchAlgorithmException {\n    final byte[] buffer = new byte[1024];\n    final MessageDigest complete = MessageDigest.getInstance(ALG);\n            if(opt.equals(SaltOption.BEFORE) || opt.equals(SaltOption.BOTH)) {\n            complete.update(salt);\n        }\n    int numRead;\n    InputStream fis = null;\n    try {\n        fis = new FileInputStream(fle);\n        do {\n            numRead = fis.read(buffer);\n            if (numRead > 0) {\n                complete.update(buffer, 0, numRead);\n            }\n        } while (numRead != -1);\n    } finally {\n    if (fis != null) {\n            fis.close();\n        }\n    }\n            if(opt.equals(SaltOption.AFTER) || opt.equals(SaltOption.BOTH)) {\n            complete.update(salt);\n        }\n    return complete.digest();\n}\n\n/**\n * \n * Efficiently converts a byte array to its 2 char per byte hex equivalent.\n * \n * This was adapted from JDK code in the Integer class, I just didn't like\n * having to use substrings once I got the result...\n *\n * @param b The byte array to convert\n * @return The converted String, 2 chars per byte...\n */\nprivate String convertToHex(final byte[] b) {\n    int x;\n    int charPos;\n    int radix;\n    int mask;\n    final char[] buf = new char[32];\n    final char[] tmp = new char[3];\n    final StringBuilder md5 = new StringBuilder();\n    for (int i = 0; i < b.length; i++) {\n        x = (b[i] & 0xFF) | 0x100;\n        charPos = 32;\n        radix = 1 << 4;\n        mask = radix - 1;\n        do {\n            buf[--charPos] = digits[x & mask];\n            x >>>= 4;\n        } while (x != 0);\n        System.arraycopy(buf, charPos, tmp, 0, (32 - charPos));\n        md5.append(Arrays.copyOfRange(tmp, 1, 3));\n    }\n    return md5.toString();\n}\n\n/**\n * \n * Returns the salted MD5 checksum of the file passed in as an argument.\n * \n * @param fle The file you want want to run through the MD5 algorithm.\n * @param salt The salt value in bytes\n * @return The salted MD5 checksum as a 2 char per byte HEX <code>String</code>\n * @throws NoSuchAlgorithmException\n * @throws IOException\n */\npublic String getMD5Checksum(final File fle, final byte[] salt)\n        throws NoSuchAlgorithmException, IOException {\n    return convertToHex(createChecksum(fle, salt));\n}\n\n/**\n * \n * Returns the MD5 checksum of the file passed in as an argument.\n * \n * @param fle The file you want want to run through the MD5 algorithm.\n * @return The MD5 checksum as a 2 char per byte HEX <code>String</code>\n * @throws NoSuchAlgorithmException\n * @throws IOException\n */\npublic String getMD5Checksum(final File fle)\n        throws NoSuchAlgorithmException, IOException {\n    return convertToHex(createChecksum(fle, new byte[0]));\n}\n\n/**\n * \n * Returns the salted MD5 checksum of the text passed in as an argument.\n * \n * @param txt The text you want want to run through the MD5 algorithm.\n * @param salt The salt value in bytes.\n * @return The salted MD5 checksum as a 2 char per byte HEX <code>String</code>\n * @throws NoSuchAlgorithmException\n * @throws IOException\n */\npublic String getMD5Checksum(final String txt, final byte[] salt)\n        throws NoSuchAlgorithmException {\n    return convertToHex(createChecksum(txt, salt));\n}\n\n/**\n * \n * Returns the MD5 checksum of the text passed in as an argument.\n * \n * @param txt The text you want want to run through the MD5 algorithm.\n * @return The MD5 checksum as a 2 char per byte HEX <code>String</code>\n * @throws NoSuchAlgorithmException\n * @throws IOException\n */\npublic String getMD5Checksum(final String txt)\n        throws NoSuchAlgorithmException {\n\n    return convertToHex(createChecksum(txt, new byte[0]));\n}\n}\n",
        "in_page_order": 30,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "-3",
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "SaltOption.equals": false,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "InputStream.__init__": true,
          "InputStream.read": true,
          "InputStream.close": true,
          "StringBuilder.__init__": true,
          "StringBuilder.toString": true,
          "IOException.fle": false,
          "IOException.txt": false
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "InputStream.__init__": 350,
          "InputStream.read": 397,
          "InputStream.close": 441,
          "StringBuilder.__init__": 662,
          "StringBuilder.toString": 651
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "InputStream.__init__": 1711,
          "InputStream.read": 1923,
          "InputStream.close": 2481,
          "StringBuilder.__init__": 20643,
          "StringBuilder.toString": 19289
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "InputStream.__init__": 2609,
          "InputStream.read": 4134,
          "InputStream.close": 3284,
          "StringBuilder.__init__": 30174,
          "StringBuilder.toString": 28699
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "InputStream.__init__": "java.io.InputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close",
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__",
          "StringBuilder.toString": "java.lang.StringBuilder.toString"
        },
        "API_Ratio": 0.7
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.baeldung.com/java-md5",
    "url position": 6,
    "segments": [
      {
        "code": "@Test\r\npublic void givenPassword_whenHashing_thenVerifying() \r\n  throws NoSuchAlgorithmException {\r\n    String hash = \"35454B055CC325EA1AF2126E27707052\";\r\n    String password = \"ILoveJava\";\r\n        \r\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n    md.update(password.getBytes());\r\n    byte[] digest = md.digest();\r\n    String myHash = DatatypeConverter\r\n      .printHexBinary(digest).toUpperCase();\r\n        \r\n    assertThat(myHash.equals(hash)).isTrue();\r\n}",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "@Test\r\npublic void givenFile_generatingChecksum_thenVerifying() \r\n  throws NoSuchAlgorithmException, IOException {\r\n    String filename = \"src/test/resources/test_md5.txt\";\r\n    String checksum = \"5EB63BBBE01EEED093CB22BB8F5ACDC3\";\r\n        \r\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n    md.update(Files.readAllBytes(Paths.get(filename)));\r\n    byte[] digest = md.digest();\r\n    String myChecksum = DatatypeConverter\r\n      .printHexBinary(digest).toUpperCase();\r\n        \r\n    assertThat(myChecksum.equals(checksum)).isTrue();\r\n}",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "@Test\r\npublic void givenFile_whenChecksumUsingGuava_thenVerifying() \r\n  throws IOException {\r\n    String filename = \"src/test/resources/test_md5.txt\";\r\n    String checksum = \"5EB63BBBE01EEED093CB22BB8F5ACDC3\";\r\n        \r\n    HashCode hash = com.google.common.io.Files\r\n      .hash(new File(filename), Hashing.md5());\r\n    String myChecksum = hash.toString()\r\n      .toUpperCase();\r\n        \r\n    assertThat(myChecksum.equals(checksum)).isTrue();\r\n}",
        "in_page_order": 7,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "HashCode.toString": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "HashCode.toString": 3
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "HashCode.toString": 5
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "HashCode.toString": 7
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "HashCode.toString": "com.google.common.hash.HashCode.toString"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://codereview.stackexchange.com/questions/153182/java-class-to-compute-and-get-a-md5-hash-as-a-string",
    "url position": 10,
    "segments": [
      {
        "code": "package Md5Generator;\n\n/**\n *\n * @author jacob\n */\n import java.io.IOException;\n import java.security.*;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.nio.file.Path;\n\n /**\n  * The point of this class it to compute the MD5 sum of a file\n  */\n public class Md5 {\n// two instance variables, one to store the file path and one to store the MD5 sum\nprivate String path;\nprivate String md5Sum;\n\n/**\n * Constructor that takes a file path and and calcs the MD5 sum\n *\n * @param filePath the string that contains the full path to the file\n */\npublic Md5(String filePath) {\n    path = filePath;\n    calcMd5(path);\n}\n\nprivate void calcMd5(String filePath) {\n    //create a messagedigest object to compute an MD5 sum\n    try {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        //create a input stream to get the bytes of the file\n        Path path = Paths.get(filePath);\n        //read the bytes from the file and put them in the message digest\n        md.update(Files.readAllBytes(path));\n        //digest the bytes and generate an MD5 sum thats stored in an array of bytes\n        byte[] hash = md.digest();\n        //convert the byte array to its hex counter parts and store it as a string\n        md5Sum = toHexString(hash);\n    } catch (IOException | NoSuchAlgorithmException ex) {\n        ex.printStackTrace();\n    }\n\n}\n\nprivate String toHexString(byte[] bytes) {\n    char[] hexArray = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n    char[] hexChars = new char[bytes.length * 2];\n    int v;\n    for (int j = 0; j < bytes.length; j++) {\n        v = bytes[j] & 0xFF;\n        hexChars[j * 2] = hexArray[v / 16];\n        hexChars[j * 2 + 1] = hexArray[v % 16];\n    }\n    return new String(hexChars);\n}\n\n/**\n * Returns the MD5 sum as a String\n *\n * @return the string that contains the MD5 sum\n */\npublic String getMd5Sum() {\n    return md5Sum;\n}\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "String.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "String.__init__": 525
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "String.__init__": 5322
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "String.__init__": 10364
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "String.__init__": "java.lang.String.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "// digest the bytes, generate an MD5 hash and store it as a hex string\nmd5sum = String.format(\"%032x\", new BigInteger(1, md.digest()));\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.anyexample.com/programming/java/java_simple_class_to_compute_md5_hash.xml",
    "url position": 11,
    "segments": [
      {
        "code": "\r\nimport java.io.UnsupportedEncodingException; \r\nimport java.security.MessageDigest; \r\nimport java.security.NoSuchAlgorithmException; \r\n\r\npublic class AeSimpleMD5 { \r\n\r\n    private static String convertToHex(byte[] data) { \r\n        StringBuffer buf = new StringBuffer();\r\n        for (int i = 0; i < data.length; i++) { \r\n            int halfbyte = (data[i] >>> 4) & 0x0F;\r\n            int two_halfs = 0;\r\n            do { \r\n                if ((0 <= halfbyte) && (halfbyte <= 9)) \r\n                    buf.append((char) ('0' + halfbyte));\r\n                else \r\n                    buf.append((char) ('a' + (halfbyte - 10)));\r\n                halfbyte = data[i] & 0x0F;\r\n            } while(two_halfs++ < 1);\r\n        } \r\n        return buf.toString();\r\n    } \r\n\r\n    public static String MD5(String text) \r\n    throws NoSuchAlgorithmException, UnsupportedEncodingException  { \r\n        MessageDigest md;\r\n        md = MessageDigest.getInstance(\"MD5\");\r\n        byte[] md5hash = new byte[32];\r\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\r\n        md5hash = md.digest();\r\n        return convertToHex(md5hash);\r\n    } \r\n} \r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true
        },
        "APIsProjects": {
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\r\nimport java.io.BufferedReader; \r\nimport java.io.IOException; \r\nimport java.io.InputStreamReader; \r\nimport java.io.UnsupportedEncodingException; \r\nimport java.security.NoSuchAlgorithmException; \r\n\r\npublic class Ex01 { \r\n\r\n    public static void main(String[] args) throws IOException { \r\n        BufferedReader userInput = new BufferedReader (new InputStreamReader(System.in));\r\n\r\n        System.out.println(\"Enter string:\");\r\n        String rawString = userInput.readLine();\r\n\r\n        try { \r\n            System.out.println(\"MD5 hash of string: \" + AeSimpleMD5.MD5(rawString));\r\n        } catch (NoSuchAlgorithmException e) { \r\n            // TODO Auto-generated catch block \r\n            e.printStackTrace();\r\n        } catch (UnsupportedEncodingException e) { \r\n            // TODO Auto-generated catch block \r\n            e.printStackTrace();\r\n        } \r\n    } \r\n} \r\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "InputStreamReader.__init__": true,
          "BufferedReader.__init__": true,
          "BufferedReader.readLine": true
        },
        "APIsProjects": {
          "InputStreamReader.__init__": 463,
          "BufferedReader.__init__": 450,
          "BufferedReader.readLine": 429
        },
        "APIsFiles": {
          "InputStreamReader.__init__": 2683,
          "BufferedReader.__init__": 2803,
          "BufferedReader.readLine": 2480
        },
        "APIsSnippets": {
          "InputStreamReader.__init__": 3903,
          "BufferedReader.__init__": 4179,
          "BufferedReader.readLine": 4047
        },
        "APIsQualifiedNames": {
          "InputStreamReader.__init__": "java.io.InputStreamReader.__init__",
          "BufferedReader.__init__": "java.io.BufferedReader.__init__",
          "BufferedReader.readLine": "java.io.BufferedReader.readLine"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://stackoverflow.com/questions/2920044/how-can-you-generate-the-same-md5-hashcode-in-c-sharp-and-java",
    "url position": 4,
    "segments": [
      {
        "code": "using System;\nusing System.Security.Cryptography;\nusing System.Text;\n\nclass Test\n{\n    static void Main()\n    {\n        byte[] bytes = { 0x35, 0x24, 0x76, 0x12 };\n        MD5 md5 = new MD5CryptoServiceProvider();\n        byte[] result = md5.ComputeHash(bytes);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < result.Length; i++)\n        {\n            sb.Append(result[i].ToString(\"x2\"));\n        }\n        Console.WriteLine(sb);\n    }\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": true,
        "answer_votes": "22",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MD5.__init__": true,
          "MD5.ComputeHash": false,
          "StringBuilder.__init__": true
        },
        "APIsProjects": {
          "MD5.__init__": 11,
          "StringBuilder.__init__": 662
        },
        "APIsFiles": {
          "MD5.__init__": 23,
          "StringBuilder.__init__": 20643
        },
        "APIsSnippets": {
          "MD5.__init__": 30,
          "StringBuilder.__init__": 30174
        },
        "APIsQualifiedNames": {
          "MD5.__init__": "org.apache.avro.ipc.MD5.__init__",
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__"
        },
        "API_Ratio": 0.6666666666666666
      },
      {
        "code": "import java.math.BigInteger;\nimport java.security.MessageDigest;\n\npublic class Test\n{\n    public static void main(String[] args) throws Exception\n    {\n        byte[] bytes = { 0x35, 0x24, 0x76, 0x12 };\n        MessageDigest m = MessageDigest.getInstance(\"MD5\");\n        byte[] digest = m.digest(bytes);\n        String hash = new BigInteger(1, digest).toString(16);\n        System.out.println(hash);\n    }\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": true,
        "answer_votes": "22",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "    public static string ConvertStringToMD5(string ClearText)\n{\n\n    byte[] ByteData = Encoding.ASCII.GetBytes(ClearText);\n    //MD5 creating MD5 object.\n    MD5 oMd5 = MD5.Create();\n    //Hash deerini hesaplayalm.\n    byte[] HashData = oMd5.ComputeHash(ByteData);\n\n    //convert byte array to hex format\n    StringBuilder oSb = new StringBuilder();\n\n    for (int x = 0; x < HashData.Length; x++)\n    {\n        //hexadecimal string value\n        oSb.Append(HashData[x].ToString(\"x2\"));\n    }\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "3",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MD5.ComputeHash": false,
          "StringBuilder.__init__": true
        },
        "APIsProjects": {
          "StringBuilder.__init__": 662
        },
        "APIsFiles": {
          "StringBuilder.__init__": 20643
        },
        "APIsSnippets": {
          "StringBuilder.__init__": 30174
        },
        "APIsQualifiedNames": {
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "    private String getMD5Digest(byte[] buffer) {\n    String resultHash = null;\n    try {\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n\n        byte[] result = new byte[md5.getDigestLength()];\n        md5.reset();\n        md5.update(buffer);\n        result = md5.digest();\n\n        StringBuffer buf = new StringBuffer(result.length * 2);\n\n        for (int i = 0; i < result.length; i++) {\n            int intVal = result[i] & 0xff;\n            if (intVal < 0x10) {\n                buf.append(\"0\");\n            }\n            buf.append(Integer.toHexString(intVal));\n        }\n\n        resultHash = buf.toString();\n    } catch (NoSuchAlgorithmException e) {\n    }\n    return resultHash;\n}\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "3",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.getDigestLength": true,
          "MessageDigest.reset": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.getDigestLength": 8,
          "MessageDigest.reset": 72,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.getDigestLength": 14,
          "MessageDigest.reset": 128,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.getDigestLength": 19,
          "MessageDigest.reset": 167,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.getDigestLength": "java.security.MessageDigest.getDigestLength",
          "MessageDigest.reset": "java.security.MessageDigest.reset",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public static String checkSumApacheCommons(String filePath)\n{\n    String checksum = null;\n    try \n    {  \n         checksum = DigestUtils.md5Hex(new FileInputStream(filePath));\n    }\n    catch (IOException ex) \n    {\n        ex.printStackTrace(System.out);\n    }\n    return checksum.toUpperCase();\n}\n",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "1",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://www.avajava.com/tutorials/lessons/how-do-i-generate-an-md5-digest-for-a-string.html",
    "url position": 8,
    "segments": [
      {
        "code": "package digest;\r\n\r\nimport java.security.MessageDigest;\r\n\r\npublic class MD5Digest {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n\t\tif (args.length != 1) {\r\n\t\t\tSystem.err.println(\"String to MD5 digest should be first and only parameter\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tString original = args[0];\r\n\t\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n\t\tmd.update(original.getBytes());\r\n\t\tbyte[] digest = md.digest();\r\n\t\tStringBuffer sb = new StringBuffer();\r\n\t\tfor (byte b : digest) {\r\n\t\t\tsb.append(String.format(\"%02x\", b & 0xff));\r\n\t\t}\r\n\r\n\t\tSystem.out.println(\"original:\" + original);\r\n\t\tSystem.out.println(\"digested(hex):\" + sb.toString());\r\n\t}\r\n\r\n}\r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.append": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.append": 301,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.append": 3677,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.append": 28537,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://stackoverflow.com/questions/2644847/how-to-generate-a-checksum-for-an-java-object",
    "url position": 5,
    "segments": [
      {
        "code": "\nprivate BigInteger checksum(Object obj) throws IOException, NoSuchAlgorithmException {\n\n    if (obj == null) {\n      return BigInteger.ZERO;   \n    }\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ObjectOutputStream oos = new ObjectOutputStream(baos);\n    oos.writeObject(obj);\n    oos.close();\n\n    MessageDigest m = MessageDigest.getInstance(\"SHA1\");\n    m.update(baos.toByteArray());\n\n    return new BigInteger(1, m.digest());\n}\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "8",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ByteArrayOutputStream.__init__": true,
          "ObjectOutputStream.__init__": true,
          "ObjectOutputStream.writeObject": true,
          "ObjectOutputStream.close": true,
          "ByteArrayOutputStream.toByteArray": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "ByteArrayOutputStream.__init__": 447,
          "ObjectOutputStream.__init__": 203,
          "ObjectOutputStream.writeObject": 205,
          "ObjectOutputStream.close": 152,
          "ByteArrayOutputStream.toByteArray": 418,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "ByteArrayOutputStream.__init__": 3528,
          "ObjectOutputStream.__init__": 739,
          "ObjectOutputStream.writeObject": 966,
          "ObjectOutputStream.close": 470,
          "ByteArrayOutputStream.toByteArray": 2862,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "ByteArrayOutputStream.__init__": 6155,
          "ObjectOutputStream.__init__": 1011,
          "ObjectOutputStream.writeObject": 1713,
          "ObjectOutputStream.close": 654,
          "ByteArrayOutputStream.toByteArray": 5168,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "ByteArrayOutputStream.__init__": "java.io.ByteArrayOutputStream.__init__",
          "ObjectOutputStream.__init__": "java.io.ObjectOutputStream.__init__",
          "ObjectOutputStream.writeObject": "java.io.ObjectOutputStream.writeObject",
          "ObjectOutputStream.close": "java.io.ObjectOutputStream.close",
          "ByteArrayOutputStream.toByteArray": "java.io.ByteArrayOutputStream.toByteArray",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public static String getChecksum(Serializable object) throws IOException, NoSuchAlgorithmException {\n    ByteArrayOutputStream baos = null;\n    ObjectOutputStream oos = null;\n    try {\n        baos = new ByteArrayOutputStream();\n        oos = new ObjectOutputStream(baos);\n        oos.writeObject(object);\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] thedigest = md.digest(baos.toByteArray());\n        return DatatypeConverter.printHexBinary(thedigest);\n    } finally {\n        oos.close();\n        baos.close();\n    }\n}\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "6",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ByteArrayOutputStream.__init__": true,
          "ObjectOutputStream.__init__": true,
          "ObjectOutputStream.writeObject": true,
          "ByteArrayOutputStream.toByteArray": true,
          "MessageDigest.digest": true,
          "ObjectOutputStream.close": true,
          "ByteArrayOutputStream.close": true
        },
        "APIsProjects": {
          "ByteArrayOutputStream.__init__": 447,
          "ObjectOutputStream.__init__": 203,
          "ObjectOutputStream.writeObject": 205,
          "ByteArrayOutputStream.toByteArray": 418,
          "MessageDigest.digest": 206,
          "ObjectOutputStream.close": 152,
          "ByteArrayOutputStream.close": 150
        },
        "APIsFiles": {
          "ByteArrayOutputStream.__init__": 3528,
          "ObjectOutputStream.__init__": 739,
          "ObjectOutputStream.writeObject": 966,
          "ByteArrayOutputStream.toByteArray": 2862,
          "MessageDigest.digest": 574,
          "ObjectOutputStream.close": 470,
          "ByteArrayOutputStream.close": 372
        },
        "APIsSnippets": {
          "ByteArrayOutputStream.__init__": 6155,
          "ObjectOutputStream.__init__": 1011,
          "ObjectOutputStream.writeObject": 1713,
          "ByteArrayOutputStream.toByteArray": 5168,
          "MessageDigest.digest": 813,
          "ObjectOutputStream.close": 654,
          "ByteArrayOutputStream.close": 524
        },
        "APIsQualifiedNames": {
          "ByteArrayOutputStream.__init__": "java.io.ByteArrayOutputStream.__init__",
          "ObjectOutputStream.__init__": "java.io.ObjectOutputStream.__init__",
          "ObjectOutputStream.writeObject": "java.io.ObjectOutputStream.writeObject",
          "ByteArrayOutputStream.toByteArray": "java.io.ByteArrayOutputStream.toByteArray",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "ObjectOutputStream.close": "java.io.ObjectOutputStream.close",
          "ByteArrayOutputStream.close": "java.io.ByteArrayOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "   public int checksum() {\n     // you pick a hard-coded, randomly chosen, non-zero, odd number\n     // ideally different for each class\n     return new HashCodeBuilder(17, 37).\n       append(property1).\n       append(property2).\n       append(property3).\n       toHashCode();\n   }\n",
        "in_page_order": 8,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "2",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "HashCodeBuilder.__init__": true
        },
        "APIsProjects": {
          "HashCodeBuilder.__init__": 42
        },
        "APIsFiles": {
          "HashCodeBuilder.__init__": 645
        },
        "APIsSnippets": {
          "HashCodeBuilder.__init__": 880
        },
        "APIsQualifiedNames": {
          "HashCodeBuilder.__init__": "org.apache.commons.lang.builder.HashCodeBuilder.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.asjava.com/core-java/java-md5-example/",
    "url position": 12,
    "segments": [
      {
        "code": "import java.io.FileInputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5 {\r\n    public static String getMD5(String input) {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            byte[] messageDigest = md.digest(input.getBytes());\r\n            BigInteger number = new BigInteger(1, messageDigest);\r\n            String hashtext = number.toString(16);\r\n            // Now we need to zero pad it if you actually want the full 32 chars.\r\n            while (hashtext.length() < 32) {\r\n                hashtext = \"0\" + hashtext;\r\n            }\r\n            return hashtext;\r\n        }\r\n        catch (NoSuchAlgorithmException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws NoSuchAlgorithmException {\r\n        System.out.println(getMD5(\"Javarmi.com\"));\r\n    }\r\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "BigInteger.__init__": true,
          "BigInteger.toString": true,
          "RuntimeException.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185,
          "BigInteger.toString": 76,
          "RuntimeException.__init__": 606
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674,
          "BigInteger.toString": 161,
          "RuntimeException.__init__": 14398
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478,
          "BigInteger.toString": 322,
          "RuntimeException.__init__": 37177
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__",
          "BigInteger.toString": "java.math.BigInteger.toString",
          "RuntimeException.__init__": "java.lang.RuntimeException.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.io.FileInputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\n\r\npublic class MD5 {\r\n    public static String getMD5(String input) {\r\n        byte[] source;\r\n        try {\r\n            //Get byte according by specified coding.\r\n            source = input.getBytes(\"UTF-8\");\r\n        } catch (UnsupportedEncodingException e) {\r\n            source = input.getBytes();\r\n        }\r\n        String result = null;\r\n        char hexDigits[] = {'0', '1', '2', '3', '4', '5', '6', '7',\r\n                '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            md.update(source);\r\n            //The result should be one 128 integer\r\n            byte temp[] = md.digest();\r\n            char str[] = new char[16 * 2];\r\n            int k = 0;\r\n            for (int i = 0; i < 16; i++) {\r\n                byte byte0 = temp[i];\r\n                str[k++] = hexDigits[byte0 >>> 4 & 0xf];\r\n                str[k++] = hexDigits[byte0 & 0xf];\r\n            }\r\n            result = new String(str);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) throws NoSuchAlgorithmException {\r\n        System.out.println(getMD5(\"Javarmi.com\"));\r\n    }\r\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "String.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "String.__init__": 525
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "String.__init__": 5322
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "String.__init__": 10364
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "String.__init__": "java.lang.String.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "    public static void main(String[] args) throws Exception {\r\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n        FileInputStream fis = new FileInputStream(\"c:\\\\apache\\\\cxf.jar\");\r\n\r\n        byte[] dataBytes = new byte[1024];\r\n\r\n        int nread = 0;\r\n        while ((nread = fis.read(dataBytes)) != -1) {\r\n            md.update(dataBytes, 0, nread);\r\n        };\r\n        byte[] mdbytes = md.digest();\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i < mdbytes.length; i++) {\r\n            sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));\r\n        }\r\n        System.out.println(\"Digest(in hex format):: \" + sb.toString());\r\n    }",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "FileInputStream.read": true,
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "FileInputStream.read": 123,
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "FileInputStream.read": 263,
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "FileInputStream.read": 358,
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://www.mkyong.com/java/java-md5-hashing-example/",
    "url position": 7,
    "segments": [
      {
        "code": "\r\npackage com.mkyong.test;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.security.MessageDigest;\r\n\r\npublic class MD5CheckSumExample \r\n{\r\n    public static void main(String[] args)throws Exception\r\n    {\r\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n        FileInputStream fis = new FileInputStream(\"c:\\\\loging.log\");\r\n        \r\n        byte[] dataBytes = new byte[1024];\r\n     \r\n        int nread = 0; \r\n        while ((nread = fis.read(dataBytes)) != -1) {\r\n          md.update(dataBytes, 0, nread);\r\n        };\r\n        byte[] mdbytes = md.digest();\r\n     \r\n        //convert the byte to hex format method 1\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i < mdbytes.length; i++) {\r\n          sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));\r\n        }\r\n\r\n        System.out.println(\"Digest(in hex format):: \" + sb.toString());\r\n        \r\n        //convert the byte to hex format method 2\r\n        StringBuffer hexString = new StringBuffer();\r\n    \tfor (int i=0;i<mdbytes.length;i++) {\r\n    \t\tString hex=Integer.toHexString(0xff & mdbytes[i]);\r\n   \t     \tif(hex.length()==1) hexString.append('0');\r\n   \t     \thexString.append(hex);\r\n    \t}\r\n    \tSystem.out.println(\"Digest(in hex format):: \" + hexString.toString());\r\n    }\r\n}\r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "FileInputStream.read": true,
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "FileInputStream.read": 123,
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "FileInputStream.read": 263,
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "FileInputStream.read": 358,
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\r\npackage com.mkyong.test;\r\n\r\nimport java.security.MessageDigest;\r\n\r\npublic class MD5HashingExample \r\n{\r\n    public static void main(String[] args)throws Exception\r\n    {\r\n    \tString password = \"123456\";\r\n    \t\r\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n        md.update(password.getBytes());\r\n        \r\n        byte byteData[] = md.digest();\r\n \r\n        //convert the byte to hex format method 1\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i < byteData.length; i++) {\r\n         sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\r\n        }\r\n     \r\n        System.out.println(\"Digest(in hex format):: \" + sb.toString());\r\n        \r\n        //convert the byte to hex format method 2\r\n        StringBuffer hexString = new StringBuffer();\r\n    \tfor (int i=0;i<byteData.length;i++) {\r\n    \t\tString hex=Integer.toHexString(0xff & byteData[i]);\r\n   \t     \tif(hex.length()==1) hexString.append('0');\r\n   \t     \thexString.append(hex);\r\n    \t}\r\n    \tSystem.out.println(\"Digest(in hex format):: \" + hexString.toString());\r\n    }\r\n}\r\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://dzone.com/articles/get-md5-hash-few-lines-java",
    "url position": 9,
    "segments": [
      {
        "code": "\nimport java.security.*;\nimport java.math.*;\n\npublic class MD5 {\n   public static void main(String args[]) throws Exception{\n      String s=\"This is a test\";\n      MessageDigest m=MessageDigest.getInstance(\"MD5\");\n      m.update(s.getBytes(),0,s.length());\n      System.out.println(\"MD5: \"+new BigInteger(1,m.digest()).toString(16));\n   }\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.codexpedia.com/java/java-md5-hash-example-one-way-hash/",
    "url position": 18,
    "segments": [
      {
        "code": "\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\npublic class MD5Hash {\r\n \r\n\tprivate final static String salt=\"DGE$5SGr@3VsHYUMas2323E4d57vfBfFSTRU@!DSH(*%FDSdfg13sgfsg\";\r\n\t\r\n    public static void main(String[] args) {\r\n            String password = \"thisismypassword\";\r\n            String empty =  null;\r\n            String msg = \"This is a text message.\";\r\n            System.out.println(password+\" MD5 hashed to>>>>>>> \" + md5Hash(password));\r\n            System.out.println(empty+\" MD5 hashed to>>>>>>> \" + md5Hash(null));\r\n            System.out.println(msg+\" MD5 hashed to>>>>>>> \" + md5Hash(msg));\r\n    }\r\n\r\n    //Takes a string, and converts it to md5 hashed string.\r\n    public static String md5Hash(String message) {\r\n        String md5 = \"\";\r\n        if(null == message) \r\n        \treturn null;\r\n        \r\n        message = message+salt;//adding a salt to the string before it gets hashed.\r\n        try {\r\n\t        MessageDigest digest = MessageDigest.getInstance(\"MD5\");//Create MessageDigest object for MD5\r\n\t        digest.update(message.getBytes(), 0, message.length());//Update input string in message digest\r\n\t        md5 = new BigInteger(1, digest.digest()).toString(16);//Converts message digest value in base 16 (hex)\r\n \r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return md5;\r\n    }\r\n}\r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "BigInteger.__init__": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "BigInteger.__init__": 185
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "BigInteger.__init__": 674
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "BigInteger.__init__": 3478
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "BigInteger.__init__": "java.math.BigInteger.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.codejava.net/coding/how-to-calculate-md5-and-sha-hash-values-in-java",
    "url position": 13,
    "segments": [
      {
        "code": "MessageDigest digest = MessageDigest.getInstance(algorithm);\n\nbyte[] inputBytes = // get bytes array from message\n\ndigest.update(inputBytes);\n\nbyte[] hashedBytes = digest.digest();\n\n// convert hash bytes to string (usually in hexadecimal form)",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.update": true,
          "MessageDigest.digest": true
        },
        "APIsProjects": {
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "private static String hashString(String message, String algorithm)\n\t\tthrows HashGenerationException {\n\n\ttry {\n\t\tMessageDigest digest = MessageDigest.getInstance(algorithm);\n\t\tbyte[] hashedBytes = digest.digest(message.getBytes(\"UTF-8\"));\n\n\t\treturn convertByteArrayToHexString(hashedBytes);\n\t} catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {\n\t\tthrow new HashGenerationException(\n\t\t\t\t\"Could not generate hash from String\", ex);\n\t}\n}",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "HashGenerationException.__init__": false
        },
        "APIsProjects": {
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "private static String convertByteArrayToHexString(byte[] arrayBytes) {\n\tStringBuffer stringBuffer = new StringBuffer();\n\tfor (int i = 0; i < arrayBytes.length; i++) {\n\t\tstringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)\n\t\t\t\t.substring(1));\n\t}\n\treturn stringBuffer.toString();\n}",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "package net.codejava.security;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n/**\n * Hash functions utility class.\n * @author www.codejava.net\n *\n */\npublic class HashGeneratorUtils {\n\tprivate HashGeneratorUtils() {\n\n\t}\n\n\tpublic static String generateMD5(String message) throws HashGenerationException {\n\t\treturn hashString(message, \"MD5\");\n\t}\n\n\tpublic static String generateSHA1(String message) throws HashGenerationException {\n\t\treturn hashString(message, \"SHA-1\");\n\t}\n\n\tpublic static String generateSHA256(String message) throws HashGenerationException {\n\t\treturn hashString(message, \"SHA-256\");\n\t}\n\n\tprivate static String hashString(String message, String algorithm)\n\t\t\tthrows HashGenerationException {\n\n\t\ttry {\n\t\t\tMessageDigest digest = MessageDigest.getInstance(algorithm);\n\t\t\tbyte[] hashedBytes = digest.digest(message.getBytes(\"UTF-8\"));\n\n\t\t\treturn convertByteArrayToHexString(hashedBytes);\n\t\t} catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {\n\t\t\tthrow new HashGenerationException(\n\t\t\t\t\t\"Could not generate hash from String\", ex);\n\t\t}\n\t}\n\n\tprivate static String convertByteArrayToHexString(byte[] arrayBytes) {\n\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\tfor (int i = 0; i < arrayBytes.length; i++) {\n\t\t\tstringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)\n\t\t\t\t\t.substring(1));\n\t\t}\n\t\treturn stringBuffer.toString();\n\t}\n}",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MessageDigest.digest": true,
          "HashGenerationException.__init__": false,
          "StringBuffer.__init__": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "MessageDigest.digest": 206,
          "StringBuffer.__init__": 364,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "MessageDigest.digest": 574,
          "StringBuffer.__init__": 5424,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "MessageDigest.digest": 813,
          "StringBuffer.__init__": 8242,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 0.75
      },
      {
        "code": "private static String hashFile(File file, String algorithm)\n\t\tthrows HashGenerationException {\n\ttry (FileInputStream inputStream = new FileInputStream(file)) {\n\t\tMessageDigest digest = MessageDigest.getInstance(algorithm);\n\n\t\tbyte[] bytesBuffer = new byte[1024];\n\t\tint bytesRead = -1;\n\n\t\twhile ((bytesRead = inputStream.read(bytesBuffer)) != -1) {\n\t\t\tdigest.update(bytesBuffer, 0, bytesRead);\n\t\t}\n\n\t\tbyte[] hashedBytes = digest.digest();\n\n\t\treturn convertByteArrayToHexString(hashedBytes);\n\t} catch (NoSuchAlgorithmException | IOException ex) {\n\t\tthrow new HashGenerationException(\n\t\t\t\t\"Could not generate hash from file\", ex);\n\t}\n}",
        "in_page_order": 9,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true,
          "MessageDigest.digest": true,
          "HashGenerationException.__init__": false
        },
        "APIsProjects": {
          "AM.__init__": 62,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "AM.__init__": 555,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "AM.__init__": 987,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 0.6666666666666666
      },
      {
        "code": "package net.codejava.security;\n\nimport java.io.File;\n\n/**\n * Test generating hash values from File.\n * @author www.codejava.net\n *\n */\npublic class FileHashGeneratorExample {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tString filePath = args[0];\n\t\t\tSystem.out.println(\"File Path: \" + filePath);\n\t\t\tFile file = new File(filePath);\n\t\t\t\n\t\t\tString md5Hash = HashGeneratorUtils.generateMD5(file);\n\t\t\tSystem.out.println(\"MD5 Hash: \" + md5Hash);\n\t\t\t\n\t\t\tString sha1Hash = HashGeneratorUtils.generateSHA1(file);\n\t\t\tSystem.out.println(\"SHA-1 Hash: \" + sha1Hash);\n\n\t\t\tString sha256Hash = HashGeneratorUtils.generateSHA256(file);\n\t\t\tSystem.out.println(\"SHA-256 Hash: \" + sha256Hash);\t\t\t\n\n\t\t} catch (HashGenerationException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n}",
        "in_page_order": 11,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true
        },
        "APIsProjects": {
          "File.__init__": 591
        },
        "APIsFiles": {
          "File.__init__": 13065
        },
        "APIsSnippets": {
          "File.__init__": 40468
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.java2s.com/Code/Java/Development-Class/MD5hashgenerator.htm",
    "url position": 15,
    "segments": [
      {
        "code": "       \n/*\n * written Santeri Paavolainen, Helsinki Finland 1996\n * (c) Santeri Paavolainen, Helsinki Finland 1996\n * modifications Copyright (C) 2002-2007 Stephen Ostermiller\n * http://ostermiller.org/contact.pl?regarding=Java+Utilities\n * Copyright (C) 2007 Stu Thompson stu.comp -at- mailworks.org\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * See COPYING.TXT for details.\n *\n * The original work by Santeri Paavolainen can be found at\n * http://www.helsinki.fi/~sjpaavol/programs/md5/\n *\n * This Java class has been derived from the RSA Data Security, Inc. MD5\n * Message-Digest Algorithm and its reference implementation.\n */\n\nimport java.io.*;\n\n/**\n * MD5 hash generator.\n * More information about this class is available from <a target=\"_top\" href=\n * \"http://ostermiller.org/utils/MD5.html\">ostermiller.org</a>.\n * <p>\n * This class takes as input a message of arbitrary length and produces\n * as output a 128-bit \"fingerprint\" or \"message digest\" of the input.\n * It is conjectured that it is computationally infeasible to produce\n * two messages having the same message digest, or to produce any\n * message having a given pre-specified target message digest. The MD5\n * algorithm is intended for digital signature applications, where a\n * large file must be \"compressed\" in a secure manner before being\n * encrypted with a private (secret) key under a public-key cryptosystem\n * such as RSA.\n * <p>\n * For more information see RFC1321.\n *\n * @see MD5OutputStream\n * @see MD5InputStream\n *\n * @author Santeri Paavolainen http://www.helsinki.fi/~sjpaavol/programs/md5/\n * @author Stephen Ostermiller http://ostermiller.org/contact.pl?regarding=Java+Utilities\n * @since ostermillerutils 1.00.00\n */\npublic class MD5 {\n\n  /**\n   * Class constructor\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public MD5 () {\n    reset();\n  }\n\n  /**\n   * Command line program that will take files as arguments\n   * and output the MD5 sum for each file.\n   *\n   * @param args command line arguments\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static void main (String[] args){\n    if (args.length == 0){\n      System.err.println(\"Please specify a file.\");\n    } else {\n      for (String element: args) {\n        try {\n          System.out.println(MD5.getHashString(new File(element)) + \" \" + element);\n        } catch (IOException x){\n          System.err.println(x.getMessage());\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets this hash sum as an array of 16 bytes.\n   *\n   * @return Array of 16 bytes, the hash of all updated bytes.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public byte[] getHash() {\n    if (!finalState.valid) {\n      finalState.copy(workingState);\n      long bitCount = finalState.bitCount;\n      // Compute the number of left over bits\n      int leftOver = (int) (((bitCount >>> 3)) & 0x3f);\n      // Compute the amount of padding to add based on number of left over bits.\n      int padlen = (leftOver < 56) ? (56 - leftOver) : (120 - leftOver);\n      // add the padding\n      update(finalState, padding, 0, padlen);\n      // add the length (computed before padding was added)\n      update(finalState, encode(bitCount), 0, 8);\n      finalState.valid = true;\n    }\n    // make a copy of the hash before returning it.\n    return encode(finalState.state, 16);\n  }\n\n  /**\n   * Returns 32-character hex representation of this hash.\n   *\n   * @return String representation of this object's hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public String getHashString(){\n    return toHex(this.getHash());\n  }\n\n  /**\n   * Gets the MD5 hash of the given byte array.\n   *\n   * @param b byte array for which an MD5 hash is desired.\n   * @return Array of 16 bytes, the hash of all updated bytes.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static byte[] getHash(byte[] b){\n    MD5 md5 = new MD5();\n    md5.update(b);\n    return md5.getHash();\n  }\n\n  /**\n   * Gets the MD5 hash of the given byte array.\n   *\n   * @param b byte array for which an MD5 hash is desired.\n   * @return 32-character hex representation the data's MD5 hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static String getHashString(byte[] b){\n    MD5 md5 = new MD5();\n    md5.update(b);\n    return md5.getHashString();\n  }\n\n  /**\n   * Gets the MD5 hash the data on the given InputStream.\n   *\n   * @param in byte array for which an MD5 hash is desired.\n   * @return Array of 16 bytes, the hash of all updated bytes.\n   * @throws IOException if an I/O error occurs.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static byte[] getHash(InputStream in) throws IOException {\n    MD5 md5 = new MD5();\n    byte[] buffer = new byte[1024];\n    int read;\n    while ((read = in.read(buffer)) != -1){\n      md5.update(buffer, read);\n    }\n    return md5.getHash();\n  }\n\n  /**\n   * Gets the MD5 hash the data on the given InputStream.\n   *\n   * @param in byte array for which an MD5 hash is desired.\n   * @return 32-character hex representation the data's MD5 hash.\n   * @throws IOException if an I/O error occurs.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static String getHashString(InputStream in) throws IOException {\n    MD5 md5 = new MD5();\n    byte[] buffer = new byte[1024];\n    int read;\n    while ((read = in.read(buffer)) != -1){\n      md5.update(buffer, read);\n    }\n    return md5.getHashString();\n  }\n\n  /**\n   * Gets the MD5 hash of the given file.\n   *\n   * @param f file for which an MD5 hash is desired.\n   * @return Array of 16 bytes, the hash of all updated bytes.\n   * @throws IOException if an I/O error occurs.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static byte[] getHash(File f) throws IOException {\n    InputStream is = new FileInputStream(f);\n    byte[] hash = getHash(is);\n    is.close();\n    return hash;\n  }\n\n  /**\n   * Gets the MD5 hash of the given file.\n   *\n   * @param f file array for which an MD5 hash is desired.\n   * @return 32-character hex representation the data's MD5 hash.\n   * @throws IOException if an I/O error occurs.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static String getHashString(File f) throws IOException {\n    InputStream is = new FileInputStream(f);\n    String hash = getHashString(is);\n    is.close();\n    return hash;\n  }\n\n  /**\n   * Gets the MD5 hash of the given String.\n   * The string is converted to bytes using the current\n   * platform's default character encoding.\n   *\n   * @param s String for which an MD5 hash is desired.\n   * @return Array of 16 bytes, the hash of all updated bytes.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static byte[] getHash(String s){\n    MD5 md5 = new MD5();\n    md5.update(s);\n    return md5.getHash();\n  }\n\n  /**\n   * Gets the MD5 hash of the given String.\n   * The string is converted to bytes using the current\n   * platform's default character encoding.\n   *\n   * @param s String for which an MD5 hash is desired.\n   * @return 32-character hex representation the data's MD5 hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static String getHashString(String s){\n    MD5 md5 = new MD5();\n    md5.update(s);\n    return md5.getHashString();\n  }\n\n\n  /**\n   * Gets the MD5 hash of the given String.\n   *\n   * @param s String for which an MD5 hash is desired.\n   * @param enc The name of a supported character encoding.\n   * @return Array of 16 bytes, the hash of all updated bytes.\n   * @throws UnsupportedEncodingException If the named encoding is not supported.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static byte[] getHash(String s, String enc) throws UnsupportedEncodingException {\n    MD5 md5 = new MD5();\n    md5.update(s, enc);\n    return md5.getHash();\n  }\n\n  /**\n   * Gets the MD5 hash of the given String.\n   *\n   * @param s String for which an MD5 hash is desired.\n   * @param enc The name of a supported character encoding.\n   * @return 32-character hex representation the data's MD5 hash.\n   * @throws UnsupportedEncodingException If the named encoding is not supported.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public static String getHashString(String s, String enc) throws UnsupportedEncodingException {\n    MD5 md5 = new MD5();\n    md5.update(s, enc);\n    return md5.getHashString();\n  }\n\n\n  /**\n   * Reset the MD5 sum to its initial state.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void reset() {\n    workingState.reset();\n    finalState.valid = false;\n  }\n\n  /**\n   * Returns 32-character hex representation of this hash.\n   *\n   * @return String representation of this object's hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  @Override public String toString(){\n    return getHashString();\n  }\n\n  /**\n   * Update this hash with the given data.\n   * <p>\n   * A state may be passed into this method so that we can add padding\n   * and finalize a md5 hash without limiting our ability to update\n   * more data later.\n   * <p>\n   * If length bytes are not available to be hashed, as many bytes as\n   * possible will be hashed.\n   *\n   * @param state Which state is updated.\n   * @param buffer Array of bytes to be hashed.\n   * @param offset Offset to buffer array.\n   * @param length number of bytes to hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private void update (MD5State state, byte buffer[], int offset, int length) {\n\n    finalState.valid = false;\n\n    // if length goes beyond the end of the buffer, cut it short.\n    if ((length + offset) > buffer.length){\n      length = buffer.length - offset;\n    }\n\n    // compute number of bytes mod 64\n    // this is what we have sitting in a buffer\n    // that have not been hashed yet\n    int index = (int) (state.bitCount >>> 3) & 0x3f;\n\n    // add the length to the count (translate bytes to bits)\n    state.bitCount += length << 3;\n\n    int partlen = 64 - index;\n\n    int i = 0;\n    if (length >= partlen) {\n      System.arraycopy(buffer, offset, state.buffer, index, partlen);\n      transform(state, decode(state.buffer, 64, 0));\n      for (i = partlen; (i + 63) < length; i+= 64){\n        transform(state, decode(buffer, 64, i));\n      }\n      index = 0;\n    }\n\n    // buffer remaining input\n    if (i < length) {\n      for (int start = i; i < length; i++) {\n        state.buffer[index + i - start] = buffer[i + offset];\n      }\n    }\n  }\n\n  /**\n   * Update this hash with the given data.\n   * <p>\n   * If length bytes are not available to be hashed, as many bytes as\n   * possible will be hashed.\n   *\n   * @param buffer Array of bytes to be hashed.\n   * @param offset Offset to buffer array.\n   * @param length number of bytes to hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void update (byte buffer[], int offset, int length) {\n    update(workingState, buffer, offset, length);\n  }\n\n  /**\n   * Update this hash with the given data.\n   * <p>\n   * If length bytes are not available to be hashed, as many bytes as\n   * possible will be hashed.\n   *\n   * @param buffer Array of bytes to be hashed.\n   * @param length number of bytes to hash.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void update (byte buffer[], int length) {\n    update(buffer, 0, length);\n  }\n\n  /**\n   * Update this hash with the given data.\n   *\n   * @param buffer Array of bytes to be hashed.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void update (byte buffer[]) {\n    update(buffer, 0, buffer.length);\n  }\n\n  /**\n   * Updates this hash with a single byte.\n   *\n   * @param b byte to be hashed.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void update (byte b) {\n    byte buffer[] = new byte[1];\n    buffer[0] = b;\n    update(buffer, 1);\n  }\n\n  /**\n   * Update this hash with a String.\n   * The string is converted to bytes using the current\n   * platform's default character encoding.\n   *\n   * @param s String to be hashed.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void update (String s) {\n    update(s.getBytes());\n  }\n\n  /**\n   * Update this hash with a String.\n   *\n   * @param s String to be hashed.\n   * @param enc The name of a supported character encoding.\n   * @throws UnsupportedEncodingException If the named encoding is not supported.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  public void update (String s, String enc) throws UnsupportedEncodingException {\n    update(s.getBytes(enc));\n  }\n\n  /**\n   * The current state from which the hash sum\n   * can be computed or updated.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private MD5State workingState = new MD5State();\n\n  /**\n   * Cached copy of the final MD5 hash sum.  This is created when\n   * the hash is requested and it is invalidated when the hash\n   * is updated.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private MD5State finalState = new MD5State();\n\n  /**\n   * Temporary buffer cached here for performance reasons.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private int[] decodeBuffer = new int[16];\n\n  /**\n   * 64 bytes of padding that can be added if the length\n   * is not divisible by 64.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private static final byte padding[] = {\n    (byte) 0x80, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n  };\n\n  /**\n   * Contains internal state of the MD5 class.\n   * Passes MD5 test suite as defined in RFC1321.\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private class MD5State {\n\n    /**\n     * True if this state is valid.\n     *\n     * @since ostermillerutils 1.00.00\n     */\n    private boolean valid = true;\n\n    /**\n     * Reset to initial state.\n     *\n     * @since ostermillerutils 1.00.00\n     */\n    private void reset(){\n      state[0] = 0x67452301;\n      state[1] = 0xefcdab89;\n      state[2] = 0x98badcfe;\n      state[3] = 0x10325476;\n\n      bitCount = 0;\n    }\n\n    /**\n     * 128-byte state\n     *\n     * @since ostermillerutils 1.00.00\n     */\n    private int state[] = new int[4];\n\n    /**\n     * 64-bit count of the number of bits that have been hashed.\n     *\n     * @since ostermillerutils 1.00.00\n     */\n    private long bitCount;\n\n    /**\n     * 64-byte buffer (512 bits) for storing to-be-hashed characters\n     *\n     * @since ostermillerutils 1.00.00\n     */\n    private byte buffer[] = new byte[64];\n\n    private MD5State() {\n      reset();\n    }\n\n    /**\n     * Set this state to be exactly the same as some other.\n     *\n     * @param from state to copy from.\n     *\n     * @since ostermillerutils 1.00.00\n     */\n    private void copy(MD5State from) {\n      System.arraycopy(from.buffer, 0, this.buffer, 0, this.buffer.length);\n      System.arraycopy(from.state, 0, this.state, 0, this.state.length);\n      this.valid = from.valid;\n      this.bitCount = from.bitCount;\n    }\n  }\n\n\n  /**\n   * Turns array of bytes into string representing each byte as\n   * a two digit unsigned hex number.\n   *\n   * @param hash Array of bytes to convert to hex-string\n   * @return  Generated hex string\n   *\n   * @since ostermillerutils 1.00.00\n   */\n  private static String toHex(byte hash[]){\n    StringBuffer buf = new StringBuffer(hash.length * 2);\n    for (byte element: hash) {\n      int intVal = element & 0xff;\n      if (intVal < 0x10){\n        // append a zero before a one digit hex\n        // number to make it two digits.\n        buf.append(\"0\");\n      }\n      buf.append(Integer.toHexString(intVal));\n    }\n    return buf.toString();\n  }\n\n  private static int FF (int a, int b, int c, int d, int x, int s, int ac) {\n    a += ((b & c) | (~b & d));\n    a += x;\n    a += ac;\n    //return rotateLeft(a, s) + b;\n    a = (a << s) | (a >>> (32 - s));\n    return a + b;\n  }\n\n  private static int GG (int a, int b, int c, int d, int x, int s, int ac) {\n    a += ((b & d) | (c & ~d));\n    a += x;\n    a += ac;\n    //return rotateLeft(a, s) + b;\n    a = (a << s) | (a >>> (32 - s));\n    return a + b;\n  }\n\n  private static int HH (int a, int b, int c, int d, int x, int s, int ac) {\n    a += (b ^ c ^ d);\n    a += x;\n    a += ac;\n    //return rotateLeft(a, s) + b;\n    a = (a << s) | (a >>> (32 - s));\n    return a + b;\n  }\n\n  private static int II (int a, int b, int c, int d, int x, int s, int ac) {\n    a += (c ^ (b | ~d));\n    a += x;\n    a += ac;\n    //return rotateLeft(a, s) + b;\n    a = (a << s) | (a >>> (32 - s));\n    return a + b;\n  }\n\n  private static byte[] encode(long l){\n    byte[] out = new byte[8];\n    out[0] = (byte) (l & 0xff);\n    out[1] = (byte) ((l >>> 8) & 0xff);\n    out[2] = (byte) ((l >>> 16) & 0xff);\n    out[3] = (byte) ((l >>> 24) & 0xff);\n    out[4] = (byte) ((l >>> 32) & 0xff);\n    out[5] = (byte) ((l >>> 40) & 0xff);\n    out[6] = (byte) ((l >>> 48) & 0xff);\n    out[7] = (byte) ((l >>> 56) & 0xff);\n    return out;\n  }\n\n  private static byte[] encode(int input[], int len){\n    byte[] out = new byte[len];\n    int i, j;\n    for (i = j = 0; j  < len; i++, j += 4) {\n      out[j] = (byte) (input[i] & 0xff);\n      out[j + 1] = (byte) ((input[i] >>> 8) & 0xff);\n      out[j + 2] = (byte) ((input[i] >>> 16) & 0xff);\n      out[j + 3] = (byte) ((input[i] >>> 24) & 0xff);\n    }\n    return out;\n  }\n\n  private int[] decode(byte buffer[], int len, int offset){\n    int i, j;\n    for (i = j = 0; j < len; i++, j += 4) {\n      decodeBuffer[i] = (\n        (buffer[j + offset] & 0xff)) |\n        (((buffer[j + 1 + offset] & 0xff)) << 8) |\n        (((buffer[j + 2 + offset] & 0xff)) << 16) |\n        (((buffer[j + 3 + offset] & 0xff)) << 24\n      );\n    }\n    return decodeBuffer;\n  }\n\n  private static void transform(MD5State state, int[] x){\n    int a = state.state[0];\n    int b = state.state[1];\n    int c = state.state[2];\n    int d = state.state[3];\n\n    /* Round 1 */\n    a = FF (a, b, c, d, x[ 0],   7, 0xd76aa478); /* 1 */\n    d = FF (d, a, b, c, x[ 1],  12, 0xe8c7b756); /* 2 */\n    c = FF (c, d, a, b, x[ 2],  17, 0x242070db); /* 3 */\n    b = FF (b, c, d, a, x[ 3],  22, 0xc1bdceee); /* 4 */\n    a = FF (a, b, c, d, x[ 4],   7, 0xf57c0faf); /* 5 */\n    d = FF (d, a, b, c, x[ 5],  12, 0x4787c62a); /* 6 */\n    c = FF (c, d, a, b, x[ 6],  17, 0xa8304613); /* 7 */\n    b = FF (b, c, d, a, x[ 7],  22, 0xfd469501); /* 8 */\n    a = FF (a, b, c, d, x[ 8],   7, 0x698098d8); /* 9 */\n    d = FF (d, a, b, c, x[ 9],  12, 0x8b44f7af); /* 10 */\n    c = FF (c, d, a, b, x[10],  17, 0xffff5bb1); /* 11 */\n    b = FF (b, c, d, a, x[11],  22, 0x895cd7be); /* 12 */\n    a = FF (a, b, c, d, x[12],   7, 0x6b901122); /* 13 */\n    d = FF (d, a, b, c, x[13],  12, 0xfd987193); /* 14 */\n    c = FF (c, d, a, b, x[14],  17, 0xa679438e); /* 15 */\n    b = FF (b, c, d, a, x[15],  22, 0x49b40821); /* 16 */\n\n    /* Round 2 */\n    a = GG (a, b, c, d, x[ 1],   5, 0xf61e2562); /* 17 */\n    d = GG (d, a, b, c, x[ 6],   9, 0xc040b340); /* 18 */\n    c = GG (c, d, a, b, x[11],  14, 0x265e5a51); /* 19 */\n    b = GG (b, c, d, a, x[ 0],  20, 0xe9b6c7aa); /* 20 */\n    a = GG (a, b, c, d, x[ 5],   5, 0xd62f105d); /* 21 */\n    d = GG (d, a, b, c, x[10],   9, 0x02441453); /* 22 */\n    c = GG (c, d, a, b, x[15],  14, 0xd8a1e681); /* 23 */\n    b = GG (b, c, d, a, x[ 4],  20, 0xe7d3fbc8); /* 24 */\n    a = GG (a, b, c, d, x[ 9],   5, 0x21e1cde6); /* 25 */\n    d = GG (d, a, b, c, x[14],   9, 0xc33707d6); /* 26 */\n    c = GG (c, d, a, b, x[ 3],  14, 0xf4d50d87); /* 27 */\n    b = GG (b, c, d, a, x[ 8],  20, 0x455a14ed); /* 28 */\n    a = GG (a, b, c, d, x[13],   5, 0xa9e3e905); /* 29 */\n    d = GG (d, a, b, c, x[ 2],   9, 0xfcefa3f8); /* 30 */\n    c = GG (c, d, a, b, x[ 7],  14, 0x676f02d9); /* 31 */\n    b = GG (b, c, d, a, x[12],  20, 0x8d2a4c8a); /* 32 */\n\n    /* Round 3 */\n    a = HH (a, b, c, d, x[ 5],   4, 0xfffa3942); /* 33 */\n    d = HH (d, a, b, c, x[ 8],  11, 0x8771f681); /* 34 */\n    c = HH (c, d, a, b, x[11],  16, 0x6d9d6122); /* 35 */\n    b = HH (b, c, d, a, x[14],  23, 0xfde5380c); /* 36 */\n    a = HH (a, b, c, d, x[ 1],   4, 0xa4beea44); /* 37 */\n    d = HH (d, a, b, c, x[ 4],  11, 0x4bdecfa9); /* 38 */\n    c = HH (c, d, a, b, x[ 7],  16, 0xf6bb4b60); /* 39 */\n    b = HH (b, c, d, a, x[10],  23, 0xbebfbc70); /* 40 */\n    a = HH (a, b, c, d, x[13],   4, 0x289b7ec6); /* 41 */\n    d = HH (d, a, b, c, x[ 0],  11, 0xeaa127fa); /* 42 */\n    c = HH (c, d, a, b, x[ 3],  16, 0xd4ef3085); /* 43 */\n    b = HH (b, c, d, a, x[ 6],  23, 0x04881d05); /* 44 */\n    a = HH (a, b, c, d, x[ 9],   4, 0xd9d4d039); /* 45 */\n    d = HH (d, a, b, c, x[12],  11, 0xe6db99e5); /* 46 */\n    c = HH (c, d, a, b, x[15],  16, 0x1fa27cf8); /* 47 */\n    b = HH (b, c, d, a, x[ 2],  23, 0xc4ac5665); /* 48 */\n\n    /* Round 4 */\n    a = II (a, b, c, d, x[ 0],   6, 0xf4292244); /* 49 */\n    d = II (d, a, b, c, x[ 7],  10, 0x432aff97); /* 50 */\n    c = II (c, d, a, b, x[14],  15, 0xab9423a7); /* 51 */\n    b = II (b, c, d, a, x[ 5],  21, 0xfc93a039); /* 52 */\n    a = II (a, b, c, d, x[12],   6, 0x655b59c3); /* 53 */\n    d = II (d, a, b, c, x[ 3],  10, 0x8f0ccc92); /* 54 */\n    c = II (c, d, a, b, x[10],  15, 0xffeff47d); /* 55 */\n    b = II (b, c, d, a, x[ 1],  21, 0x85845dd1); /* 56 */\n    a = II (a, b, c, d, x[ 8],   6, 0x6fa87e4f); /* 57 */\n    d = II (d, a, b, c, x[15],  10, 0xfe2ce6e0); /* 58 */\n    c = II (c, d, a, b, x[ 6],  15, 0xa3014314); /* 59 */\n    b = II (b, c, d, a, x[13],  21, 0x4e0811a1); /* 60 */\n    a = II (a, b, c, d, x[ 4],   6, 0xf7537e82); /* 61 */\n    d = II (d, a, b, c, x[11],  10, 0xbd3af235); /* 62 */\n    c = II (c, d, a, b, x[ 2],  15, 0x2ad7d2bb); /* 63 */\n    b = II (b, c, d, a, x[ 9],  21, 0xeb86d391); /* 64 */\n\n    state.state[0] += a;\n    state.state[1] += b;\n    state.state[2] += c;\n    state.state[3] += d;\n  }\n}\n\n   \n    \n    \n    \n    \n    \n    \n  \n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "MD5State.copy": false,
          "UnsupportedEncodingException.finalState": false,
          "UnsupportedEncodingException": true,
          "MD5.__init__": true,
          "MD5.update": false,
          "MD5.getHash": false,
          "MD5.getHashString": false,
          "InputStream.read": true,
          "InputStream.__init__": true,
          "UnsupportedEncodingException.is": false,
          "InputStream.close": true,
          "MD5State.reset": false,
          "UnsupportedEncodingException.workingState": false,
          "UnsupportedEncodingException.buffer": false,
          "StringBuffer.__init__": true,
          "StringBuffer.append": true,
          "StringBuffer.toString": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "UnsupportedEncodingException": 26,
          "MD5.__init__": 11,
          "InputStream.read": 397,
          "InputStream.__init__": 350,
          "InputStream.close": 441,
          "StringBuffer.__init__": 364,
          "StringBuffer.append": 301,
          "StringBuffer.toString": 359
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "UnsupportedEncodingException": 29,
          "MD5.__init__": 23,
          "InputStream.read": 1923,
          "InputStream.__init__": 1711,
          "InputStream.close": 2481,
          "StringBuffer.__init__": 5424,
          "StringBuffer.append": 3677,
          "StringBuffer.toString": 5055
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "UnsupportedEncodingException": 110,
          "MD5.__init__": 30,
          "InputStream.read": 4134,
          "InputStream.__init__": 2609,
          "InputStream.close": 3284,
          "StringBuffer.__init__": 8242,
          "StringBuffer.append": 28537,
          "StringBuffer.toString": 9905
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "UnsupportedEncodingException": "java.io.UnsupportedEncodingException.UnsupportedEncodingException",
          "MD5.__init__": "org.apache.avro.ipc.MD5.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.__init__": "java.io.InputStream.__init__",
          "InputStream.close": "java.io.InputStream.close",
          "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
          "StringBuffer.toString": "java.lang.StringBuffer.toString"
        },
        "API_Ratio": 0.5
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://howtodoinjava.com/core-java/io/how-to-generate-sha-or-md5-file-checksum-hash-in-java/",
    "url position": 16,
    "segments": [
      {
        "code": "\nprivate static String getFileChecksum(MessageDigest digest, File file) throws IOException\n{\n\t//Get file input stream for reading the file content\n\tFileInputStream fis = new FileInputStream(file);\n\t\n\t//Create byte array to read data in chunks\n\tbyte[] byteArray = new byte[1024];\n\tint bytesCount = 0; \n\t \n\t//Read file data and update in message digest\n\twhile ((bytesCount = fis.read(byteArray)) != -1) {\n\t\tdigest.update(byteArray, 0, bytesCount);\n\t};\n\t\n\t//close the stream; We don't need it now.\n\tfis.close();\n\t\n\t//Get the hash's bytes\n\tbyte[] bytes = digest.digest();\n\t\n\t//This bytes[] has bytes in decimal format;\n\t//Convert it to hexadecimal format\n\tStringBuilder sb = new StringBuilder();\n\tfor(int i=0; i< bytes.length ;i++)\n\t{\n\t\tsb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n\t}\n\t\n\t//return complete hash\n   return sb.toString();\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "FileInputStream.read": true,
          "FileInputStream.close": true,
          "MessageDigest.digest": true,
          "StringBuilder.__init__": true,
          "StringBuilder.toString": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "FileInputStream.read": 123,
          "FileInputStream.close": 218,
          "MessageDigest.digest": 206,
          "StringBuilder.__init__": 662,
          "StringBuilder.toString": 651
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "FileInputStream.read": 263,
          "FileInputStream.close": 664,
          "MessageDigest.digest": 574,
          "StringBuilder.__init__": 20643,
          "StringBuilder.toString": 19289
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "FileInputStream.read": 358,
          "FileInputStream.close": 861,
          "MessageDigest.digest": 813,
          "StringBuilder.__init__": 30174,
          "StringBuilder.toString": 28699
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "FileInputStream.close": "java.io.FileInputStream.close",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__",
          "StringBuilder.toString": "java.lang.StringBuilder.toString"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\n//Create checksum for this file\nFile file = new File(\"c:/temp/testOut.txt\");\n\n//Use MD5 algorithm\nMessageDigest md5Digest = MessageDigest.getInstance(\"MD5\");\n\n//Get the checksum\nString checksum = getFileChecksum(md5Digest, file);\n\n//see checksum\nSystem.out.println(checksum);\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true
        },
        "APIsProjects": {
          "File.__init__": 591
        },
        "APIsFiles": {
          "File.__init__": 13065
        },
        "APIsSnippets": {
          "File.__init__": 40468
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.javadb.com/string-to-md5-hash-in-java/",
    "url position": 17,
    "segments": [
      {
        "code": "package com.javadb.example;import org.apache.commons.codec.binary.Hex;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.nio.charset.StandardCharsets;import java.security.DigestInputStream;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class Example {public byte[] stringToMD5(String value) {byte[] hash = null;try {MessageDigest md5 = MessageDigest.getInstance(\"MD5\");InputStream stream = new ByteArrayInputStream(value.getBytes(StandardCharsets.UTF_8));DigestInputStream inputStream = new DigestInputStream(stream, md5);while (inputStream.read() != -1);hash = md5.digest();} catch (NoSuchAlgorithmException | IOException e) {e.printStackTrace();System.exit(-1);}return hash;}public static void main(String[] args) {Example example = new Example();byte[] hash = example.stringToMD5(\"some_password\");//convert to hexadecimal formatString hex = new String(Hex.encodeHex(hash));System.out.println(hex);System.out.println(\"Length of hash: \" + hash.length);System.out.println(\"Length of hex string: \" + hex.length());}}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "InputStream.__init__": true,
          "DigestInputStream.__init__": true,
          "DigestInputStream.read": true,
          "MessageDigest.digest": true
        },
        "APIsProjects": {
          "InputStream.__init__": 350,
          "DigestInputStream.__init__": 22,
          "DigestInputStream.read": 13,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "InputStream.__init__": 1711,
          "DigestInputStream.__init__": 27,
          "DigestInputStream.read": 14,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "InputStream.__init__": 2609,
          "DigestInputStream.__init__": 37,
          "DigestInputStream.read": 26,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "InputStream.__init__": "java.io.InputStream.__init__",
          "DigestInputStream.__init__": "java.security.DigestInputStream.__init__",
          "DigestInputStream.read": "java.security.DigestInputStream.read",
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://www.quickprogrammingtips.com/java/how-to-generate-md5-hash-in-java.html",
    "url position": 14,
    "segments": [
      {
        "code": "import java.security.MessageDigest;\nimport java.util.Scanner;\nimport javax.xml.bind.DatatypeConverter;\n\n/**\n * Demonstrates how to generate MD5 hash using Java\n * @author JJ\n */\npublic class MD5HashGenerator {\n\n    public static void main(String[] args) {\n        Scanner sn = new Scanner(System.in);\n        System.out.print(\"Please enter data for which MD5 is required:\");\n        String data = sn.nextLine();\n        \n        MD5HashGenerator sj = new MD5HashGenerator();\n        String hash = sj.getMD5Hash(data);\n        System.out.println(\"The MD5 (hexadecimal encoded) hash is:\"+hash);\n    }\n\n    /**\n     * Returns a hexadecimal encoded MD5 hash for the input String.\n     * @param data\n     * @return \n     */\n    private String getMD5Hash(String data) {\n        String result = null;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            byte[] hash = digest.digest(data.getBytes(\"UTF-8\"));\n            return bytesToHex(hash); // make it printable\n        }catch(Exception ex) {\n            ex.printStackTrace();\n        }\n        return result;\n    }\n    \n    /**\n     * Use javax.xml.bind.DatatypeConverter class in JDK to convert byte array\n     * to a hexadecimal string. Note that this generates hexadecimal in upper case.\n     * @param hash\n     * @return \n     */\n    private String  bytesToHex(byte[] hash) {\n        return DatatypeConverter.printHexBinary(hash);\n    }\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Scanner.__init__": true,
          "Scanner.nextLine": true,
          "MD5HashGenerator.__init__": false,
          "MD5HashGenerator.getMD5Hash": false,
          "MessageDigest.digest": true
        },
        "APIsProjects": {
          "Scanner.__init__": 123,
          "Scanner.nextLine": 49,
          "MessageDigest.digest": 206
        },
        "APIsFiles": {
          "Scanner.__init__": 290,
          "Scanner.nextLine": 119,
          "MessageDigest.digest": 574
        },
        "APIsSnippets": {
          "Scanner.__init__": 918,
          "Scanner.nextLine": 184,
          "MessageDigest.digest": 813
        },
        "APIsQualifiedNames": {
          "Scanner.__init__": "java.util.Scanner.__init__",
          "Scanner.nextLine": "java.util.Scanner.nextLine",
          "MessageDigest.digest": "java.security.MessageDigest.digest"
        },
        "API_Ratio": 0.6
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.mytecbits.com/tools/cryptography/md5generator",
    "url position": 35,
    "segments": [
      {
        "code": "public static string Generate(string strInput)\r\n{\r\n    MD5 md5 = new MD5CryptoServiceProvider();\r\n\r\n    //provide the string in byte format to the ComputeHash method.\r\n    //This method returns the MD5 hash code in byte array\r\n    byte[] arrHash = md5.ComputeHash(Encoding.UTF8.GetBytes(strInput));\r\n\r\n    // use a Stringbuilder to append the bytes from the array to create a hash code string.\r\n    StringBuilder sbHash = new StringBuilder();\r\n\r\n    // Loop through byte array of the hashed code and format each byte as a hexadecimal code.\r\n    for (int i = 0; i < arrHash.Length; i++)\r\n    {\r\n    sbHash.Append(arrHash[i].ToString(\"x2\"));\r\n    }\r\n\r\n    // Return the hexadecimal MD5 hash code string.\r\n    return sbHash.ToString();\r\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "MD5.__init__": true,
          "MD5.ComputeHash": false,
          "StringBuilder.__init__": true,
          "StringBuilder.ToString": false
        },
        "APIsProjects": {
          "MD5.__init__": 11,
          "StringBuilder.__init__": 662
        },
        "APIsFiles": {
          "MD5.__init__": 23,
          "StringBuilder.__init__": 20643
        },
        "APIsSnippets": {
          "MD5.__init__": 30,
          "StringBuilder.__init__": 30174
        },
        "APIsQualifiedNames": {
          "MD5.__init__": "org.apache.avro.ipc.MD5.__init__",
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "import java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\n \r\npublic class MD5 {\r\n    public static String GenerateHash(String input) {\r\n        MessageDigest objMD = MessageDigest.getInstance(\"MD5\");\r\n        byte[] bytMD = mobjMDd.digest(input.getBytes());\r\n        BigInteger intNumber = new BigInteger(1, bytMD);\r\n        String strHashCode = intNumber.toString(16);\r\n\t\t\r\n        // pad with 0 if the hexa digits are less then 32.\r\n        while (strHashCode.length() < 32) {\r\n            strHashCode = \"0\" + strHashCode;\r\n        }\r\n        return strHashCode;\r\n    }\r\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BigInteger.__init__": true,
          "BigInteger.toString": true
        },
        "APIsProjects": {
          "BigInteger.__init__": 185,
          "BigInteger.toString": 76
        },
        "APIsFiles": {
          "BigInteger.__init__": 674,
          "BigInteger.toString": 161
        },
        "APIsSnippets": {
          "BigInteger.__init__": 3478,
          "BigInteger.toString": 322
        },
        "APIsQualifiedNames": {
          "BigInteger.__init__": "java.math.BigInteger.__init__",
          "BigInteger.toString": "java.math.BigInteger.toString"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://thebadprogrammer.com/2012/04/java-md5-hash.html",
    "url position": 40,
    "segments": [
      {
        "code": "public class Hasher {\n    /**\n     * Gets the md5 hash of the passed in bytes\n     *\n     * @param bytes The bytes to determine the md5 hash of\n     * @return a String containing the md5 hash string\n     */\n    public String getMd5Hash(byte[] bytes) {\n        Formatter fm = new Formatter();\n        MessageDigest digest = null;\n        try {\n            digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(bytes);\n            bytes = digest.digest();\n            for (byte b : bytes) {\n                fm.format(\"%02x\", b);\n            }\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Exception: \" + e);\n        }\n        return fm.out().toString();\n    }\n    public static void main(String[] args) {\n        Hasher hasher = new Hasher();\n        String hash = hasher.getMd5Hash(\"what is the md5 hash of this?\".getBytes());\n        System.out.println(\"hash = \" + hash);\n    }\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Formatter.__init__": true,
          "MessageDigest.update": true,
          "MessageDigest.digest": true,
          "Formatter.format": true,
          "Formatter.out": true,
          "Hasher.__init__": true,
          "Hasher.getMd5Hash": false
        },
        "APIsProjects": {
          "Formatter.__init__": 82,
          "MessageDigest.update": 139,
          "MessageDigest.digest": 206,
          "Formatter.format": 63,
          "Formatter.out": 6,
          "Hasher.__init__": 5
        },
        "APIsFiles": {
          "Formatter.__init__": 229,
          "MessageDigest.update": 338,
          "MessageDigest.digest": 574,
          "Formatter.format": 126,
          "Formatter.out": 10,
          "Hasher.__init__": 7
        },
        "APIsSnippets": {
          "Formatter.__init__": 308,
          "MessageDigest.update": 830,
          "MessageDigest.digest": 813,
          "Formatter.format": 245,
          "Formatter.out": 26,
          "Hasher.__init__": 8
        },
        "APIsQualifiedNames": {
          "Formatter.__init__": "java.util.Formatter.__init__",
          "MessageDigest.update": "java.security.MessageDigest.update",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "Formatter.format": "java.util.Formatter.format",
          "Formatter.out": "java.util.Formatter.out",
          "Hasher.__init__": "org.eclipse.jgit.treewalk.filter.ByteArraySet.Hasher.__init__"
        },
        "API_Ratio": 0.8571428571428571
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "http://www.twmacinta.com/myjava/fast_md5.php",
    "url position": 37,
    "segments": [
      {
        "code": "\n\n    String hash = MD5.asHex(MD5.getHash(new File(filename)));\n\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "File.__init__": true
        },
        "APIsProjects": {
          "File.__init__": 591
        },
        "APIsFiles": {
          "File.__init__": 13065
        },
        "APIsSnippets": {
          "File.__init__": 40468
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\n\n    MD5 md5 = new MD5();\n    md5.Update(myString, null);\n    String hash = md5.asHex();\n\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "MD5.__init__": true,
          "MD5.Update": false,
          "MD5.asHex": false
        },
        "APIsProjects": {
          "MD5.__init__": 11
        },
        "APIsFiles": {
          "MD5.__init__": 23
        },
        "APIsSnippets": {
          "MD5.__init__": 30
        },
        "APIsQualifiedNames": {
          "MD5.__init__": "org.apache.avro.ipc.MD5.__init__"
        },
        "API_Ratio": 0.3333333333333333
      }
    ]
  },
  {
    "query": "How to generate MD5 hash code",
    "url": "https://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.io.MD5Hash",
    "url position": 38,
    "segments": [
      {
        "code": "<pre class=\"prettyprint\">/**\n * Read dataFile and compute its MD5 checksum.\n */\npublic static MD5Hash computeMd5ForFile(File dataFile) throws IOException {\n  InputStream in = new FileInputStream(dataFile);\n  try {\n    MessageDigest digester = MD5Hash.getDigester();\n    DigestInputStream dis = new DigestInputStream(in, digester);\n    IOUtils.copyBytes(dis, new IOUtils.NullOutputStream(), 128*1024);\n    \n    return new MD5Hash(digester.digest());\n  } finally {\n    IOUtils.closeStream(in);\n  }\n}\n </pre>",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "InputStream.__init__": true,
          "DigestInputStream.__init__": true,
          "NullOutputStream.__init__": true,
          "MessageDigest.digest": true,
          "MD5Hash.__init__": true
        },
        "APIsProjects": {
          "InputStream.__init__": 350,
          "DigestInputStream.__init__": 22,
          "NullOutputStream.__init__": 16,
          "MessageDigest.digest": 206,
          "MD5Hash.__init__": 4
        },
        "APIsFiles": {
          "InputStream.__init__": 1711,
          "DigestInputStream.__init__": 27,
          "NullOutputStream.__init__": 41,
          "MessageDigest.digest": 574,
          "MD5Hash.__init__": 31
        },
        "APIsSnippets": {
          "InputStream.__init__": 2609,
          "DigestInputStream.__init__": 37,
          "NullOutputStream.__init__": 60,
          "MessageDigest.digest": 813,
          "MD5Hash.__init__": 67
        },
        "APIsQualifiedNames": {
          "InputStream.__init__": "java.io.InputStream.__init__",
          "DigestInputStream.__init__": "java.security.DigestInputStream.__init__",
          "NullOutputStream.__init__": "org.apache.commons.io.output.NullOutputStream.__init__",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "MD5Hash.__init__": "org.apache.hadoop.io.MD5Hash.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Read dataFile and compute its MD5 checksum.\n */\npublic static MD5Hash computeMd5ForFile(File dataFile) throws IOException {\n  InputStream in = new FileInputStream(dataFile);\n  try {\n    MessageDigest digester = MD5Hash.getDigester();\n    DigestInputStream dis = new DigestInputStream(in, digester);\n    IOUtils.copyBytes(dis, new IOUtils.NullOutputStream(), 128*1024);\n    \n    return new MD5Hash(digester.digest());\n  } finally {\n    IOUtils.closeStream(in);\n  }\n}\n </pre>",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "InputStream.__init__": true,
          "DigestInputStream.__init__": true,
          "NullOutputStream.__init__": true,
          "MessageDigest.digest": true,
          "MD5Hash.__init__": true
        },
        "APIsProjects": {
          "InputStream.__init__": 350,
          "DigestInputStream.__init__": 22,
          "NullOutputStream.__init__": 16,
          "MessageDigest.digest": 206,
          "MD5Hash.__init__": 4
        },
        "APIsFiles": {
          "InputStream.__init__": 1711,
          "DigestInputStream.__init__": 27,
          "NullOutputStream.__init__": 41,
          "MessageDigest.digest": 574,
          "MD5Hash.__init__": 31
        },
        "APIsSnippets": {
          "InputStream.__init__": 2609,
          "DigestInputStream.__init__": 37,
          "NullOutputStream.__init__": 60,
          "MessageDigest.digest": 813,
          "MD5Hash.__init__": 67
        },
        "APIsQualifiedNames": {
          "InputStream.__init__": "java.io.InputStream.__init__",
          "DigestInputStream.__init__": "java.security.DigestInputStream.__init__",
          "NullOutputStream.__init__": "org.apache.commons.io.output.NullOutputStream.__init__",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "MD5Hash.__init__": "org.apache.hadoop.io.MD5Hash.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Read dataFile and compute its MD5 checksum.\n */\npublic static MD5Hash computeMd5ForFile(File dataFile) throws IOException {\n  InputStream in = new FileInputStream(dataFile);\n  try {\n    MessageDigest digester = MD5Hash.getDigester();\n    DigestInputStream dis = new DigestInputStream(in, digester);\n    IOUtils.copyBytes(dis, new IOUtils.NullOutputStream(), 128*1024);\n    \n    return new MD5Hash(digester.digest());\n  } finally {\n    IOUtils.closeStream(in);\n  }\n}\n </pre>",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "InputStream.__init__": true,
          "DigestInputStream.__init__": true,
          "NullOutputStream.__init__": true,
          "MessageDigest.digest": true,
          "MD5Hash.__init__": true
        },
        "APIsProjects": {
          "InputStream.__init__": 350,
          "DigestInputStream.__init__": 22,
          "NullOutputStream.__init__": 16,
          "MessageDigest.digest": 206,
          "MD5Hash.__init__": 4
        },
        "APIsFiles": {
          "InputStream.__init__": 1711,
          "DigestInputStream.__init__": 27,
          "NullOutputStream.__init__": 41,
          "MessageDigest.digest": 574,
          "MD5Hash.__init__": 31
        },
        "APIsSnippets": {
          "InputStream.__init__": 2609,
          "DigestInputStream.__init__": 37,
          "NullOutputStream.__init__": 60,
          "MessageDigest.digest": 813,
          "MD5Hash.__init__": 67
        },
        "APIsQualifiedNames": {
          "InputStream.__init__": "java.io.InputStream.__init__",
          "DigestInputStream.__init__": "java.security.DigestInputStream.__init__",
          "NullOutputStream.__init__": "org.apache.commons.io.output.NullOutputStream.__init__",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "MD5Hash.__init__": "org.apache.hadoop.io.MD5Hash.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">private MD5Hash writeDataAndAssertContents(\n    TestImageUploadStreamInjectionHandler h, int iteration)\n    throws IOException {\n\n  // check write digest\n  MessageDigest digester = MD5Hash.getDigester();\n\n  // create stream\n  HttpImageUploadStream ius = new HttpImageUploadStream(httpAddrs, JID, FAKE_NSINFO,\n      startTxId + iteration, 1, bufferSize, maxNumChunks);\n\n  DigestOutputStream ds = new DigestOutputStream(ius, digester);\n  DataOutputStream dos = new DataOutputStream(ds);\n\n  // write actual data\n  byte[] written = writeData(dos, 10240);\n\n  // flush\n  dos.flush();\n\n  // get written hash\n  MD5Hash hash = new MD5Hash(digester.digest());\n\n  // close the stream\n  dos.close();\n  assertContents(cluster, written, startTxId + iteration, hash, h);\n\n  // roll image\n  qjm.saveDigestAndRenameCheckpointImage(startTxId + iteration, hash);\n\n  // final assert of the contents\n  // get contents using input stream obtained from qjm\n  InputStream is = qjm.getImageInputStream(startTxId + iteration)\n      .getInputStream();\n  byte[] contents = new byte[written.length];\n  is.read(contents);\n  assertTrue(Arrays.equals(written, contents));\n\n  return hash;\n}\n </pre>",
        "in_page_order": 7,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "HttpImageUploadStream.__init__": false,
          "DigestOutputStream.__init__": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.flush": true,
          "MessageDigest.digest": true,
          "MD5Hash.__init__": true,
          "DataOutputStream.close": true,
          "InputStream.read": true
        },
        "APIsProjects": {
          "DigestOutputStream.__init__": 17,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.flush": 89,
          "MessageDigest.digest": 206,
          "MD5Hash.__init__": 4,
          "DataOutputStream.close": 111,
          "InputStream.read": 397
        },
        "APIsFiles": {
          "DigestOutputStream.__init__": 39,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.flush": 242,
          "MessageDigest.digest": 574,
          "MD5Hash.__init__": 31,
          "DataOutputStream.close": 519,
          "InputStream.read": 1923
        },
        "APIsSnippets": {
          "DigestOutputStream.__init__": 51,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.flush": 392,
          "MessageDigest.digest": 813,
          "MD5Hash.__init__": 67,
          "DataOutputStream.close": 755,
          "InputStream.read": 4134
        },
        "APIsQualifiedNames": {
          "DigestOutputStream.__init__": "java.security.DigestOutputStream.__init__",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "MD5Hash.__init__": "org.apache.hadoop.io.MD5Hash.__init__",
          "DataOutputStream.close": "java.io.DataOutputStream.close",
          "InputStream.read": "java.io.InputStream.read"
        },
        "API_Ratio": 0.875
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Get block checksum (MD5 of CRC32).\n * @param in\n */\nvoid getBlockChecksum(DataInputStream in) throws IOException {\n  final Block block = new Block(in.readLong(), 0 , in.readLong());\n\n  DataOutputStream out = null;\n  final MetaDataInputStream metadataIn = datanode.data.getMetaDataInputStream(block);\n  final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(\n      metadataIn, BUFFER_SIZE));\n\n  try {\n    //read metadata file\n    final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn);\n    final DataChecksum checksum = header.getChecksum(); \n    final int bytesPerCRC = checksum.getBytesPerChecksum();\n    final long crcPerBlock = (metadataIn.getLength()\n        - BlockMetadataHeader.getHeaderSize())/checksum.getChecksumSize();\n    \n    //compute block checksum\n    final MD5Hash md5 = MD5Hash.digest(checksumIn);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"block=\" + block + \", bytesPerCRC=\" + bytesPerCRC\n          + \", crcPerBlock=\" + crcPerBlock + \", md5=\" + md5);\n    }\n\n    //write reply\n    out = new DataOutputStream(\n        NetUtils.getOutputStream(s, datanode.socketWriteTimeout));\n    out.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);\n    out.writeInt(bytesPerCRC);\n    out.writeLong(crcPerBlock);\n    md5.write(out);\n    out.flush();\n  } finally {\n    IOUtils.closeStream(out);\n    IOUtils.closeStream(checksumIn);\n    IOUtils.closeStream(metadataIn);\n  }\n}\n </pre>",
        "in_page_order": 8,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "DataInputStream.readLong": true,
          "Block.__init__": true,
          "BufferedInputStream.__init__": true,
          "DataInputStream.__init__": true,
          "BlockMetadataHeader.getChecksum": true,
          "DataChecksum.getBytesPerChecksum": true,
          "DataChecksum.getChecksumSize": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.writeShort": true,
          "DataOutputStream.writeInt": true,
          "DataOutputStream.writeLong": true,
          "MD5Hash.write": true,
          "DataOutputStream.flush": true
        },
        "APIsProjects": {
          "DataInputStream.readLong": 44,
          "Block.__init__": 35,
          "BufferedInputStream.__init__": 224,
          "DataInputStream.__init__": 161,
          "BlockMetadataHeader.getChecksum": 4,
          "DataChecksum.getBytesPerChecksum": 4,
          "DataChecksum.getChecksumSize": 4,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.writeShort": 43,
          "DataOutputStream.writeInt": 86,
          "DataOutputStream.writeLong": 52,
          "MD5Hash.write": 3,
          "DataOutputStream.flush": 89
        },
        "APIsFiles": {
          "DataInputStream.readLong": 109,
          "Block.__init__": 177,
          "BufferedInputStream.__init__": 793,
          "DataInputStream.__init__": 922,
          "BlockMetadataHeader.getChecksum": 17,
          "DataChecksum.getBytesPerChecksum": 32,
          "DataChecksum.getChecksumSize": 43,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.writeShort": 104,
          "DataOutputStream.writeInt": 285,
          "DataOutputStream.writeLong": 119,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 242
        },
        "APIsSnippets": {
          "DataInputStream.readLong": 227,
          "Block.__init__": 471,
          "BufferedInputStream.__init__": 1031,
          "DataInputStream.__init__": 1246,
          "BlockMetadataHeader.getChecksum": 18,
          "DataChecksum.getBytesPerChecksum": 48,
          "DataChecksum.getChecksumSize": 59,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.writeShort": 266,
          "DataOutputStream.writeInt": 862,
          "DataOutputStream.writeLong": 298,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 392
        },
        "APIsQualifiedNames": {
          "DataInputStream.readLong": "java.io.DataInputStream.readLong",
          "Block.__init__": "com.ochafik.lang.jnaerator.parser.Statement.Block.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "DataInputStream.__init__": "java.io.DataInputStream.__init__",
          "BlockMetadataHeader.getChecksum": "org.apache.hadoop.hdfs.server.datanode.BlockMetadataHeader.getChecksum",
          "DataChecksum.getBytesPerChecksum": "org.apache.hadoop.util.DataChecksum.getBytesPerChecksum",
          "DataChecksum.getChecksumSize": "org.apache.hadoop.util.DataChecksum.getChecksumSize",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.writeShort": "java.io.DataOutputStream.writeShort",
          "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
          "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
          "MD5Hash.write": "org.apache.hadoop.io.MD5Hash.write",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">protected static String getTraceSignature(String input) throws IOException {\n  Path inputPath = new Path(input);\n  FileSystem fs = inputPath.getFileSystem(new Configuration());\n  FileStatus status = fs.getFileStatus(inputPath);\n  Path qPath = fs.makeQualified(status.getPath());\n  String traceID = status.getModificationTime() + qPath.toString()\n                   + status.getOwner() + status.getLen();\n  return MD5Hash.digest(traceID).toString();\n}\n </pre>",
        "in_page_order": 9,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true,
          "Configuration.__init__": true,
          "Path.getFileSystem": true,
          "FileSystem.getFileStatus": true,
          "FileStatus.getPath": true,
          "FileSystem.makeQualified": true,
          "FileStatus.getLen": true
        },
        "APIsProjects": {
          "Path.__init__": 139,
          "Configuration.__init__": 143,
          "Path.getFileSystem": 45,
          "FileSystem.getFileStatus": 35,
          "FileStatus.getPath": 22,
          "FileSystem.makeQualified": 15,
          "FileStatus.getLen": 29
        },
        "APIsFiles": {
          "Path.__init__": 3608,
          "Configuration.__init__": 3200,
          "Path.getFileSystem": 743,
          "FileSystem.getFileStatus": 532,
          "FileStatus.getPath": 198,
          "FileSystem.makeQualified": 132,
          "FileStatus.getLen": 271
        },
        "APIsSnippets": {
          "Path.__init__": 16827,
          "Configuration.__init__": 6658,
          "Path.getFileSystem": 1391,
          "FileSystem.getFileStatus": 1414,
          "FileStatus.getPath": 464,
          "FileSystem.makeQualified": 260,
          "FileStatus.getLen": 695
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__",
          "Configuration.__init__": "net.minecraftforge.common.config.Configuration.__init__",
          "Path.getFileSystem": "java.nio.file.Path.getFileSystem",
          "FileSystem.getFileStatus": "org.apache.hadoop.fs.FileSystem.getFileStatus",
          "FileStatus.getPath": "eu.stratosphere.core.fs.FileStatus.getPath",
          "FileSystem.makeQualified": "org.apache.hadoop.fs.FileSystem.makeQualified",
          "FileStatus.getLen": "org.apache.hadoop.fs.FileStatus.getLen"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Map the HDFS based distributed cache file path from original cluster to\n * a unique file name on the simulated cluster.\n * &lt;br&gt; Unique  distributed file names on simulated cluster are generated\n * using original cluster's &lt;li&gt;file path, &lt;li&gt;timestamp and &lt;li&gt; the\n * job-submitter for private distributed cache file.\n * &lt;br&gt; This implies that if on original cluster, a single HDFS file\n * considered as two private distributed cache files for two jobs of\n * different users, then the corresponding simulated jobs will have two\n * different files of the same size in public distributed cache, one for each\n * user. Both these simulated jobs will not share these distributed cache\n * files, thus leading to the same load as seen in the original cluster.\n * @param file distributed cache file path\n * @param timeStamp time stamp of dist cachce file\n * @param isPublic true if this distributed cache file is a public\n *                 distributed cache file\n * @param user job submitter on original cluster\n * @return the mapped path on simulated cluster\n */\nprivate String mapDistCacheFilePath(String file, String timeStamp,\n    boolean isPublic, String user) {\n  String id = file + timeStamp;\n  if (!isPublic) {\n    // consider job-submitter for private distributed cache file\n    id = id.concat(user);\n  }\n  return new Path(distCachePath, MD5Hash.digest(id).toString()).toUri()\n             .getPath();\n}\n </pre>",
        "in_page_order": 10,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true
        },
        "APIsProjects": {
          "Path.__init__": 139
        },
        "APIsFiles": {
          "Path.__init__": 3608
        },
        "APIsSnippets": {
          "Path.__init__": 16827
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">protected static String getTraceSignature(String input) throws IOException {\n  Path inputPath = new Path(input);\n  FileSystem fs = inputPath.getFileSystem(new Configuration());\n  FileStatus status = fs.getFileStatus(inputPath);\n  Path qPath = fs.makeQualified(status.getPath());\n  String traceID = status.getModificationTime() + qPath.toString()\n                   + status.getOwner() + status.getLen();\n  return MD5Hash.digest(traceID).toString();\n}\n </pre>",
        "in_page_order": 11,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true,
          "Configuration.__init__": true,
          "Path.getFileSystem": true,
          "FileSystem.getFileStatus": true,
          "FileStatus.getPath": true,
          "FileSystem.makeQualified": true,
          "FileStatus.getLen": true
        },
        "APIsProjects": {
          "Path.__init__": 139,
          "Configuration.__init__": 143,
          "Path.getFileSystem": 45,
          "FileSystem.getFileStatus": 35,
          "FileStatus.getPath": 22,
          "FileSystem.makeQualified": 15,
          "FileStatus.getLen": 29
        },
        "APIsFiles": {
          "Path.__init__": 3608,
          "Configuration.__init__": 3200,
          "Path.getFileSystem": 743,
          "FileSystem.getFileStatus": 532,
          "FileStatus.getPath": 198,
          "FileSystem.makeQualified": 132,
          "FileStatus.getLen": 271
        },
        "APIsSnippets": {
          "Path.__init__": 16827,
          "Configuration.__init__": 6658,
          "Path.getFileSystem": 1391,
          "FileSystem.getFileStatus": 1414,
          "FileStatus.getPath": 464,
          "FileSystem.makeQualified": 260,
          "FileStatus.getLen": 695
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__",
          "Configuration.__init__": "net.minecraftforge.common.config.Configuration.__init__",
          "Path.getFileSystem": "java.nio.file.Path.getFileSystem",
          "FileSystem.getFileStatus": "org.apache.hadoop.fs.FileSystem.getFileStatus",
          "FileStatus.getPath": "eu.stratosphere.core.fs.FileStatus.getPath",
          "FileSystem.makeQualified": "org.apache.hadoop.fs.FileSystem.makeQualified",
          "FileStatus.getLen": "org.apache.hadoop.fs.FileStatus.getLen"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Map the HDFS based distributed cache file path from original cluster to\n * a unique file name on the simulated cluster.\n * &lt;br&gt; Unique  distributed file names on simulated cluster are generated\n * using original cluster's &lt;li&gt;file path, &lt;li&gt;timestamp and &lt;li&gt; the\n * job-submitter for private distributed cache file.\n * &lt;br&gt; This implies that if on original cluster, a single HDFS file\n * considered as two private distributed cache files for two jobs of\n * different users, then the corresponding simulated jobs will have two\n * different files of the same size in public distributed cache, one for each\n * user. Both these simulated jobs will not share these distributed cache\n * files, thus leading to the same load as seen in the original cluster.\n * @param file distributed cache file path\n * @param timeStamp time stamp of dist cachce file\n * @param isPublic true if this distributed cache file is a public\n *                 distributed cache file\n * @param user job submitter on original cluster\n * @return the mapped path on simulated cluster\n */\nprivate String mapDistCacheFilePath(String file, String timeStamp,\n    boolean isPublic, String user) {\n  String id = file + timeStamp;\n  if (!isPublic) {\n    // consider job-submitter for private distributed cache file\n    id = id.concat(user);\n  }\n  return new Path(distCachePath, MD5Hash.digest(id).toString()).toUri()\n             .getPath();\n}\n </pre>",
        "in_page_order": 12,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true
        },
        "APIsProjects": {
          "Path.__init__": 139
        },
        "APIsFiles": {
          "Path.__init__": 3608
        },
        "APIsSnippets": {
          "Path.__init__": 16827
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">protected static String getTraceSignature(String input) throws IOException {\n  Path inputPath = new Path(input);\n  FileSystem fs = inputPath.getFileSystem(new Configuration());\n  FileStatus status = fs.getFileStatus(inputPath);\n  Path qPath = fs.makeQualified(status.getPath());\n  String traceID = status.getModificationTime() + qPath.toString()\n                   + status.getOwner() + status.getLen();\n  return MD5Hash.digest(traceID).toString();\n}\n </pre>",
        "in_page_order": 13,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true,
          "Configuration.__init__": true,
          "Path.getFileSystem": true,
          "FileSystem.getFileStatus": true,
          "FileStatus.getPath": true,
          "FileSystem.makeQualified": true,
          "FileStatus.getLen": true
        },
        "APIsProjects": {
          "Path.__init__": 139,
          "Configuration.__init__": 143,
          "Path.getFileSystem": 45,
          "FileSystem.getFileStatus": 35,
          "FileStatus.getPath": 22,
          "FileSystem.makeQualified": 15,
          "FileStatus.getLen": 29
        },
        "APIsFiles": {
          "Path.__init__": 3608,
          "Configuration.__init__": 3200,
          "Path.getFileSystem": 743,
          "FileSystem.getFileStatus": 532,
          "FileStatus.getPath": 198,
          "FileSystem.makeQualified": 132,
          "FileStatus.getLen": 271
        },
        "APIsSnippets": {
          "Path.__init__": 16827,
          "Configuration.__init__": 6658,
          "Path.getFileSystem": 1391,
          "FileSystem.getFileStatus": 1414,
          "FileStatus.getPath": 464,
          "FileSystem.makeQualified": 260,
          "FileStatus.getLen": 695
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__",
          "Configuration.__init__": "net.minecraftforge.common.config.Configuration.__init__",
          "Path.getFileSystem": "java.nio.file.Path.getFileSystem",
          "FileSystem.getFileStatus": "org.apache.hadoop.fs.FileSystem.getFileStatus",
          "FileStatus.getPath": "eu.stratosphere.core.fs.FileStatus.getPath",
          "FileSystem.makeQualified": "org.apache.hadoop.fs.FileSystem.makeQualified",
          "FileStatus.getLen": "org.apache.hadoop.fs.FileStatus.getLen"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Map the HDFS based distributed cache file path from original cluster to\n * a unique file name on the simulated cluster.\n * &lt;br&gt; Unique  distributed file names on simulated cluster are generated\n * using original cluster's &lt;li&gt;file path, &lt;li&gt;timestamp and &lt;li&gt; the\n * job-submitter for private distributed cache file.\n * &lt;br&gt; This implies that if on original cluster, a single HDFS file\n * considered as two private distributed cache files for two jobs of\n * different users, then the corresponding simulated jobs will have two\n * different files of the same size in public distributed cache, one for each\n * user. Both these simulated jobs will not share these distributed cache\n * files, thus leading to the same load as seen in the original cluster.\n * @param file distributed cache file path\n * @param timeStamp time stamp of dist cachce file\n * @param isPublic true if this distributed cache file is a public\n *                 distributed cache file\n * @param user job submitter on original cluster\n * @return the mapped path on simulated cluster\n */\nprivate String mapDistCacheFilePath(String file, String timeStamp,\n    boolean isPublic, String user) {\n  String id = file + timeStamp;\n  if (!isPublic) {\n    // consider job-submitter for private distributed cache file\n    id = id.concat(user);\n  }\n  return new Path(distCachePath, MD5Hash.digest(id).toString()).toUri()\n             .getPath();\n}\n </pre>",
        "in_page_order": 14,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true
        },
        "APIsProjects": {
          "Path.__init__": 139
        },
        "APIsFiles": {
          "Path.__init__": 3608
        },
        "APIsSnippets": {
          "Path.__init__": 16827
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">protected static String getTraceSignature(String input) throws IOException {\n  Path inputPath = new Path(input);\n  FileSystem fs = inputPath.getFileSystem(new Configuration());\n  FileStatus status = fs.getFileStatus(inputPath);\n  Path qPath = fs.makeQualified(status.getPath());\n  String traceID = status.getModificationTime() + qPath.toString()\n                   + status.getOwner() + status.getLen();\n  return MD5Hash.digest(traceID).toString();\n}\n </pre>",
        "in_page_order": 15,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true,
          "Configuration.__init__": true,
          "Path.getFileSystem": true,
          "FileSystem.getFileStatus": true,
          "FileStatus.getPath": true,
          "FileSystem.makeQualified": true,
          "FileStatus.getLen": true
        },
        "APIsProjects": {
          "Path.__init__": 139,
          "Configuration.__init__": 143,
          "Path.getFileSystem": 45,
          "FileSystem.getFileStatus": 35,
          "FileStatus.getPath": 22,
          "FileSystem.makeQualified": 15,
          "FileStatus.getLen": 29
        },
        "APIsFiles": {
          "Path.__init__": 3608,
          "Configuration.__init__": 3200,
          "Path.getFileSystem": 743,
          "FileSystem.getFileStatus": 532,
          "FileStatus.getPath": 198,
          "FileSystem.makeQualified": 132,
          "FileStatus.getLen": 271
        },
        "APIsSnippets": {
          "Path.__init__": 16827,
          "Configuration.__init__": 6658,
          "Path.getFileSystem": 1391,
          "FileSystem.getFileStatus": 1414,
          "FileStatus.getPath": 464,
          "FileSystem.makeQualified": 260,
          "FileStatus.getLen": 695
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__",
          "Configuration.__init__": "net.minecraftforge.common.config.Configuration.__init__",
          "Path.getFileSystem": "java.nio.file.Path.getFileSystem",
          "FileSystem.getFileStatus": "org.apache.hadoop.fs.FileSystem.getFileStatus",
          "FileStatus.getPath": "eu.stratosphere.core.fs.FileStatus.getPath",
          "FileSystem.makeQualified": "org.apache.hadoop.fs.FileSystem.makeQualified",
          "FileStatus.getLen": "org.apache.hadoop.fs.FileStatus.getLen"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Map the HDFS based distributed cache file path from original cluster to\n * a unique file name on the simulated cluster.\n * &lt;br&gt; Unique  distributed file names on simulated cluster are generated\n * using original cluster's &lt;li&gt;file path, &lt;li&gt;timestamp and &lt;li&gt; the\n * job-submitter for private distributed cache file.\n * &lt;br&gt; This implies that if on original cluster, a single HDFS file\n * considered as two private distributed cache files for two jobs of\n * different users, then the corresponding simulated jobs will have two\n * different files of the same size in public distributed cache, one for each\n * user. Both these simulated jobs will not share these distributed cache\n * files, thus leading to the same load as seen in the original cluster.\n * @param file distributed cache file path\n * @param timeStamp time stamp of dist cachce file\n * @param isPublic true if this distributed cache file is a public\n *                 distributed cache file\n * @param user job submitter on original cluster\n * @return the mapped path on simulated cluster\n */\nprivate String mapDistCacheFilePath(String file, String timeStamp,\n    boolean isPublic, String user) {\n  String id = file + timeStamp;\n  if (!isPublic) {\n    // consider job-submitter for private distributed cache file\n    id = id.concat(user);\n  }\n  return new Path(distCachePath, MD5Hash.digest(id).toString()).toUri()\n             .getPath();\n}\n </pre>",
        "in_page_order": 16,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "Path.__init__": true
        },
        "APIsProjects": {
          "Path.__init__": 139
        },
        "APIsFiles": {
          "Path.__init__": 3608
        },
        "APIsSnippets": {
          "Path.__init__": 16827
        },
        "APIsQualifiedNames": {
          "Path.__init__": "com.sandwich.koan.path.PathToEnlightenment.Path.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Moves fsimage.ckpt to fsImage and edits.new to edits\n * Reopens the new edits file.\n * \n * @param newImageSignature the signature of the new image\n */\nvoid rollFSImage(CheckpointSignature newImageSignature) throws IOException {\n  MD5Hash newImageDigest = newImageSignature.getImageDigest();\n  if (!newImageDigest.equals(checkpointImageDigest)) {\n    throw new IOException(\n        \"Checkpoint image is corrupt: expecting an MD5 checksum of\" +\n        newImageDigest + \" but is \" + checkpointImageDigest);\n  }\n  rollFSImage(newImageSignature.getImageDigest());\n}\n </pre>",
        "in_page_order": 22,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "CheckpointSignature.getImageDigest": false,
          "MD5Hash.equals": false,
          "IOException.__init__": true,
          "IOException": true
        },
        "APIsProjects": {
          "IOException.__init__": 441,
          "IOException": 444
        },
        "APIsFiles": {
          "IOException.__init__": 6496,
          "IOException": 6092
        },
        "APIsSnippets": {
          "IOException.__init__": 18878,
          "IOException": 57973
        },
        "APIsQualifiedNames": {
          "IOException.__init__": "java.io.IOException.__init__",
          "IOException": "java.io.IOException.IOException"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Roll the image.\n */\npublic void saveDigestAndRenameCheckpointImage(long txid, MD5Hash digest)\n    throws IOException {\n  MD5Hash storedDigest = checkpointImageDigests.get(txid);\n  if (storedDigest == null || !storedDigest.equals(digest)) {\n    throw new IOException(\"Digest of data written: \" + storedDigest\n        + \" does not match requested digest: \" + digest + \" for txid: \"\n        + txid + \", journal: \" + journalId);\n  }\n  imageManager.saveDigestAndRenameCheckpointImage(txid, digest);\n  checkpointImageDigests.remove(txid);\n}\n </pre>",
        "in_page_order": 25,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "MD5Hash.equals": false,
          "IOException.__init__": true
        },
        "APIsProjects": {
          "IOException.__init__": 441
        },
        "APIsFiles": {
          "IOException.__init__": 6496
        },
        "APIsSnippets": {
          "IOException.__init__": 18878
        },
        "APIsQualifiedNames": {
          "IOException.__init__": "java.io.IOException.__init__"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Moves fsimage.ckpt to fsImage and edits.new to edits\n * Reopens the new edits file.\n * \n * @param newImageSignature the signature of the new image\n */\nvoid rollFSImage(CheckpointSignature newImageSignature) throws IOException {\n  MD5Hash newImageDigest = newImageSignature.getImageDigest();\n  if (!newImageDigest.equals(checkpointImageDigest)) {\n    throw new IOException(\n        \"Checkpoint image is corrupt: expecting an MD5 checksum of\" +\n        newImageDigest + \" but is \" + checkpointImageDigest);\n  }\n  rollFSImage(newImageSignature.getImageDigest());\n}\n </pre>",
        "in_page_order": 26,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "CheckpointSignature.getImageDigest": false,
          "MD5Hash.equals": false,
          "IOException.__init__": true,
          "IOException": true
        },
        "APIsProjects": {
          "IOException.__init__": 441,
          "IOException": 444
        },
        "APIsFiles": {
          "IOException.__init__": 6496,
          "IOException": 6092
        },
        "APIsSnippets": {
          "IOException.__init__": 18878,
          "IOException": 57973
        },
        "APIsQualifiedNames": {
          "IOException.__init__": "java.io.IOException.__init__",
          "IOException": "java.io.IOException.IOException"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Verify that the previously saved md5 for the given file matches\n * expectedMd5.\n *\n * @throws IOException\n */\npublic static void verifySavedMD5(File dataFile, MD5Hash expectedMD5)\n    throws IOException {\n  MD5Hash storedHash = readStoredMd5ForFile(dataFile);\n  // Check the hash itself\n  if (!expectedMD5.equals(storedHash)) {\n    throw new IOException(\n        \"File \" + dataFile + \" did not match stored MD5 checksum \" +\n            \" (stored: \" + storedHash + \", computed: \" + expectedMD5);\n  }\n}\n </pre>",
        "in_page_order": 27,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "MD5Hash.equals": false,
          "IOException.__init__": true
        },
        "APIsProjects": {
          "IOException.__init__": 441
        },
        "APIsFiles": {
          "IOException.__init__": 6496
        },
        "APIsSnippets": {
          "IOException.__init__": 18878
        },
        "APIsQualifiedNames": {
          "IOException.__init__": "java.io.IOException.__init__"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Moves fsimage.ckpt to fsImage and edits.new to edits\n * Reopens the new edits file.\n * \n * @param newImageSignature the signature of the new image\n */\nvoid rollFSImage(CheckpointSignature newImageSignature) throws IOException {\n  MD5Hash newImageDigest = newImageSignature.getImageDigest();\n  if (!newImageDigest.equals(checkpointImageDigest)) {\n    throw new IOException(\n        \"Checkpoint image is corrupt: expecting an MD5 checksum of\" +\n        newImageDigest + \" but is \" + checkpointImageDigest);\n  }\n  rollFSImage(newImageSignature.getImageDigest());\n}\n </pre>",
        "in_page_order": 28,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "CheckpointSignature.getImageDigest": false,
          "MD5Hash.equals": false,
          "IOException.__init__": true,
          "IOException": true
        },
        "APIsProjects": {
          "IOException.__init__": 441,
          "IOException": 444
        },
        "APIsFiles": {
          "IOException.__init__": 6496,
          "IOException": 6092
        },
        "APIsSnippets": {
          "IOException.__init__": 18878,
          "IOException": 57973
        },
        "APIsQualifiedNames": {
          "IOException.__init__": "java.io.IOException.__init__",
          "IOException": "java.io.IOException.IOException"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Get block checksum (MD5 of CRC32).\n * @param in\n */\nvoid getBlockChecksum(DataInputStream in) throws IOException {\n  final Block block = new Block(in.readLong(), 0 , in.readLong());\n\n  DataOutputStream out = null;\n  final MetaDataInputStream metadataIn = datanode.data.getMetaDataInputStream(block);\n  final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(\n      metadataIn, BUFFER_SIZE));\n\n  updateCurrentThreadName(\"getting checksum for block \" + block);\n  try {\n    //read metadata file\n    final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn);\n    final DataChecksum checksum = header.getChecksum(); \n    final int bytesPerCRC = checksum.getBytesPerChecksum();\n    final long crcPerBlock = (metadataIn.getLength()\n        - BlockMetadataHeader.getHeaderSize())/checksum.getChecksumSize();\n    \n    //compute block checksum\n    final MD5Hash md5 = MD5Hash.digest(checksumIn);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"block=\" + block + \", bytesPerCRC=\" + bytesPerCRC\n          + \", crcPerBlock=\" + crcPerBlock + \", md5=\" + md5);\n    }\n\n    //write reply\n    out = new DataOutputStream(\n        NetUtils.getOutputStream(s, datanode.socketWriteTimeout));\n    out.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);\n    out.writeInt(bytesPerCRC);\n    out.writeLong(crcPerBlock);\n    md5.write(out);\n    out.flush();\n  } finally {\n    IOUtils.closeStream(out);\n    IOUtils.closeStream(checksumIn);\n    IOUtils.closeStream(metadataIn);\n  }\n}\n </pre>",
        "in_page_order": 29,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "DataInputStream.readLong": true,
          "Block.__init__": true,
          "BufferedInputStream.__init__": true,
          "DataInputStream.__init__": true,
          "BlockMetadataHeader.getChecksum": true,
          "DataChecksum.getBytesPerChecksum": true,
          "DataChecksum.getChecksumSize": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.writeShort": true,
          "DataOutputStream.writeInt": true,
          "DataOutputStream.writeLong": true,
          "MD5Hash.write": true,
          "DataOutputStream.flush": true
        },
        "APIsProjects": {
          "DataInputStream.readLong": 44,
          "Block.__init__": 35,
          "BufferedInputStream.__init__": 224,
          "DataInputStream.__init__": 161,
          "BlockMetadataHeader.getChecksum": 4,
          "DataChecksum.getBytesPerChecksum": 4,
          "DataChecksum.getChecksumSize": 4,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.writeShort": 43,
          "DataOutputStream.writeInt": 86,
          "DataOutputStream.writeLong": 52,
          "MD5Hash.write": 3,
          "DataOutputStream.flush": 89
        },
        "APIsFiles": {
          "DataInputStream.readLong": 109,
          "Block.__init__": 177,
          "BufferedInputStream.__init__": 793,
          "DataInputStream.__init__": 922,
          "BlockMetadataHeader.getChecksum": 17,
          "DataChecksum.getBytesPerChecksum": 32,
          "DataChecksum.getChecksumSize": 43,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.writeShort": 104,
          "DataOutputStream.writeInt": 285,
          "DataOutputStream.writeLong": 119,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 242
        },
        "APIsSnippets": {
          "DataInputStream.readLong": 227,
          "Block.__init__": 471,
          "BufferedInputStream.__init__": 1031,
          "DataInputStream.__init__": 1246,
          "BlockMetadataHeader.getChecksum": 18,
          "DataChecksum.getBytesPerChecksum": 48,
          "DataChecksum.getChecksumSize": 59,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.writeShort": 266,
          "DataOutputStream.writeInt": 862,
          "DataOutputStream.writeLong": 298,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 392
        },
        "APIsQualifiedNames": {
          "DataInputStream.readLong": "java.io.DataInputStream.readLong",
          "Block.__init__": "com.ochafik.lang.jnaerator.parser.Statement.Block.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "DataInputStream.__init__": "java.io.DataInputStream.__init__",
          "BlockMetadataHeader.getChecksum": "org.apache.hadoop.hdfs.server.datanode.BlockMetadataHeader.getChecksum",
          "DataChecksum.getBytesPerChecksum": "org.apache.hadoop.util.DataChecksum.getBytesPerChecksum",
          "DataChecksum.getChecksumSize": "org.apache.hadoop.util.DataChecksum.getChecksumSize",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.writeShort": "java.io.DataOutputStream.writeShort",
          "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
          "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
          "MD5Hash.write": "org.apache.hadoop.io.MD5Hash.write",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Get block checksum (MD5 of CRC32).\n * @param in\n */\nvoid getBlockChecksum(DataInputStream in) throws IOException {\n  final Block block = new Block(in.readLong(), 0 , in.readLong());\n\n  DataOutputStream out = null;\n  final MetaDataInputStream metadataIn = datanode.data.getMetaDataInputStream(block);\n  final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(\n      metadataIn, BUFFER_SIZE));\n\n  try {\n    //read metadata file\n    final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn);\n    final DataChecksum checksum = header.getChecksum(); \n    final int bytesPerCRC = checksum.getBytesPerChecksum();\n    final long crcPerBlock = (metadataIn.getLength()\n        - BlockMetadataHeader.getHeaderSize())/checksum.getChecksumSize();\n    \n    //compute block checksum\n    final MD5Hash md5 = MD5Hash.digest(checksumIn);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"block=\" + block + \", bytesPerCRC=\" + bytesPerCRC\n          + \", crcPerBlock=\" + crcPerBlock + \", md5=\" + md5);\n    }\n\n    //write reply\n    out = new DataOutputStream(\n        NetUtils.getOutputStream(s, datanode.socketWriteTimeout));\n    out.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);\n    out.writeInt(bytesPerCRC);\n    out.writeLong(crcPerBlock);\n    md5.write(out);\n    out.flush();\n  } finally {\n    IOUtils.closeStream(out);\n    IOUtils.closeStream(checksumIn);\n    IOUtils.closeStream(metadataIn);\n  }\n}\n </pre>",
        "in_page_order": 30,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "DataInputStream.readLong": true,
          "Block.__init__": true,
          "BufferedInputStream.__init__": true,
          "DataInputStream.__init__": true,
          "BlockMetadataHeader.getChecksum": true,
          "DataChecksum.getBytesPerChecksum": true,
          "DataChecksum.getChecksumSize": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.writeShort": true,
          "DataOutputStream.writeInt": true,
          "DataOutputStream.writeLong": true,
          "MD5Hash.write": true,
          "DataOutputStream.flush": true
        },
        "APIsProjects": {
          "DataInputStream.readLong": 44,
          "Block.__init__": 35,
          "BufferedInputStream.__init__": 224,
          "DataInputStream.__init__": 161,
          "BlockMetadataHeader.getChecksum": 4,
          "DataChecksum.getBytesPerChecksum": 4,
          "DataChecksum.getChecksumSize": 4,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.writeShort": 43,
          "DataOutputStream.writeInt": 86,
          "DataOutputStream.writeLong": 52,
          "MD5Hash.write": 3,
          "DataOutputStream.flush": 89
        },
        "APIsFiles": {
          "DataInputStream.readLong": 109,
          "Block.__init__": 177,
          "BufferedInputStream.__init__": 793,
          "DataInputStream.__init__": 922,
          "BlockMetadataHeader.getChecksum": 17,
          "DataChecksum.getBytesPerChecksum": 32,
          "DataChecksum.getChecksumSize": 43,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.writeShort": 104,
          "DataOutputStream.writeInt": 285,
          "DataOutputStream.writeLong": 119,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 242
        },
        "APIsSnippets": {
          "DataInputStream.readLong": 227,
          "Block.__init__": 471,
          "BufferedInputStream.__init__": 1031,
          "DataInputStream.__init__": 1246,
          "BlockMetadataHeader.getChecksum": 18,
          "DataChecksum.getBytesPerChecksum": 48,
          "DataChecksum.getChecksumSize": 59,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.writeShort": 266,
          "DataOutputStream.writeInt": 862,
          "DataOutputStream.writeLong": 298,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 392
        },
        "APIsQualifiedNames": {
          "DataInputStream.readLong": "java.io.DataInputStream.readLong",
          "Block.__init__": "com.ochafik.lang.jnaerator.parser.Statement.Block.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "DataInputStream.__init__": "java.io.DataInputStream.__init__",
          "BlockMetadataHeader.getChecksum": "org.apache.hadoop.hdfs.server.datanode.BlockMetadataHeader.getChecksum",
          "DataChecksum.getBytesPerChecksum": "org.apache.hadoop.util.DataChecksum.getBytesPerChecksum",
          "DataChecksum.getChecksumSize": "org.apache.hadoop.util.DataChecksum.getChecksumSize",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.writeShort": "java.io.DataOutputStream.writeShort",
          "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
          "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
          "MD5Hash.write": "org.apache.hadoop.io.MD5Hash.write",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Get block checksum (MD5 of CRC32).\n * @param in\n */\nvoid getBlockChecksum(DataInputStream in) throws IOException {\n  final Block block = new Block(in.readLong(), 0 , in.readLong());\n\n  DataOutputStream out = null;\n  final MetaDataInputStream metadataIn = datanode.data.getMetaDataInputStream(block);\n  final DataInputStream checksumIn = new DataInputStream(new BufferedInputStream(\n      metadataIn, BUFFER_SIZE));\n\n  updateCurrentThreadName(\"getting checksum for block \" + block);\n  try {\n    //read metadata file\n    final BlockMetadataHeader header = BlockMetadataHeader.readHeader(checksumIn);\n    final DataChecksum checksum = header.getChecksum(); \n    final int bytesPerCRC = checksum.getBytesPerChecksum();\n    final long crcPerBlock = (metadataIn.getLength()\n        - BlockMetadataHeader.getHeaderSize())/checksum.getChecksumSize();\n    \n    //compute block checksum\n    final MD5Hash md5 = MD5Hash.digest(checksumIn);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"block=\" + block + \", bytesPerCRC=\" + bytesPerCRC\n          + \", crcPerBlock=\" + crcPerBlock + \", md5=\" + md5);\n    }\n\n    //write reply\n    out = new DataOutputStream(\n        NetUtils.getOutputStream(s, datanode.socketWriteTimeout));\n    out.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);\n    out.writeInt(bytesPerCRC);\n    out.writeLong(crcPerBlock);\n    md5.write(out);\n    out.flush();\n  } finally {\n    IOUtils.closeStream(out);\n    IOUtils.closeStream(checksumIn);\n    IOUtils.closeStream(metadataIn);\n  }\n}\n </pre>",
        "in_page_order": 31,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "DataInputStream.readLong": true,
          "Block.__init__": true,
          "BufferedInputStream.__init__": true,
          "DataInputStream.__init__": true,
          "BlockMetadataHeader.getChecksum": true,
          "DataChecksum.getBytesPerChecksum": true,
          "DataChecksum.getChecksumSize": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.writeShort": true,
          "DataOutputStream.writeInt": true,
          "DataOutputStream.writeLong": true,
          "MD5Hash.write": true,
          "DataOutputStream.flush": true
        },
        "APIsProjects": {
          "DataInputStream.readLong": 44,
          "Block.__init__": 35,
          "BufferedInputStream.__init__": 224,
          "DataInputStream.__init__": 161,
          "BlockMetadataHeader.getChecksum": 4,
          "DataChecksum.getBytesPerChecksum": 4,
          "DataChecksum.getChecksumSize": 4,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.writeShort": 43,
          "DataOutputStream.writeInt": 86,
          "DataOutputStream.writeLong": 52,
          "MD5Hash.write": 3,
          "DataOutputStream.flush": 89
        },
        "APIsFiles": {
          "DataInputStream.readLong": 109,
          "Block.__init__": 177,
          "BufferedInputStream.__init__": 793,
          "DataInputStream.__init__": 922,
          "BlockMetadataHeader.getChecksum": 17,
          "DataChecksum.getBytesPerChecksum": 32,
          "DataChecksum.getChecksumSize": 43,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.writeShort": 104,
          "DataOutputStream.writeInt": 285,
          "DataOutputStream.writeLong": 119,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 242
        },
        "APIsSnippets": {
          "DataInputStream.readLong": 227,
          "Block.__init__": 471,
          "BufferedInputStream.__init__": 1031,
          "DataInputStream.__init__": 1246,
          "BlockMetadataHeader.getChecksum": 18,
          "DataChecksum.getBytesPerChecksum": 48,
          "DataChecksum.getChecksumSize": 59,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.writeShort": 266,
          "DataOutputStream.writeInt": 862,
          "DataOutputStream.writeLong": 298,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 392
        },
        "APIsQualifiedNames": {
          "DataInputStream.readLong": "java.io.DataInputStream.readLong",
          "Block.__init__": "com.ochafik.lang.jnaerator.parser.Statement.Block.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "DataInputStream.__init__": "java.io.DataInputStream.__init__",
          "BlockMetadataHeader.getChecksum": "org.apache.hadoop.hdfs.server.datanode.BlockMetadataHeader.getChecksum",
          "DataChecksum.getBytesPerChecksum": "org.apache.hadoop.util.DataChecksum.getBytesPerChecksum",
          "DataChecksum.getChecksumSize": "org.apache.hadoop.util.DataChecksum.getChecksumSize",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.writeShort": "java.io.DataOutputStream.writeShort",
          "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
          "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
          "MD5Hash.write": "org.apache.hadoop.io.MD5Hash.write",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Get block checksum (MD5 of CRC32).\n * \n * @param in\n */\nvoid getBlockChecksum(DataInputStream in, VersionAndOpcode versionAndOpcode)\n\t\tthrows IOException {\n\t// header\n\tBlockChecksumHeader blockChecksumHeader = new BlockChecksumHeader(\n\t\t\tversionAndOpcode);\n\tblockChecksumHeader.readFields(in);\n\tfinal int namespaceId = blockChecksumHeader.getNamespaceId();\n\tfinal Block block = new Block(blockChecksumHeader.getBlockId(), 0,\n\t\t\tblockChecksumHeader.getGenStamp());\n\n\tDataOutputStream out = null;\n\tfinal MetaDataInputStream metadataIn = datanode.data\n\t\t\t.getMetaDataInputStream(namespaceId, block);\n\tfinal DataInputStream checksumIn = new DataInputStream(\n\t\t\tnew BufferedInputStream(metadataIn, BUFFER_SIZE));\n\n\tupdateCurrentThreadName(\"getting checksum for block \" + block);\n\ttry {\n\t\t// read metadata file\n\t\tfinal BlockMetadataHeader header = BlockMetadataHeader\n\t\t\t\t.readHeader(checksumIn);\n\t\tfinal DataChecksum checksum = header.getChecksum();\n\t\tfinal int bytesPerCRC = checksum.getBytesPerChecksum();\n\t\tfinal long crcPerBlock = (metadataIn.getLength() - BlockMetadataHeader\n\t\t\t\t.getHeaderSize()) / checksum.getChecksumSize();\n\n\t\t// compute block checksum\n\t\tfinal MD5Hash md5 = MD5Hash.digest(checksumIn);\n\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"block=\" + block + \", bytesPerCRC=\" + bytesPerCRC\n\t\t\t\t\t+ \", crcPerBlock=\" + crcPerBlock + \", md5=\" + md5);\n\t\t}\n\n\t\t// write reply\n\t\tout = new DataOutputStream(NetUtils.getOutputStream(s,\n\t\t\t\tdatanode.socketWriteTimeout));\n\t\tout.writeShort(DataTransferProtocol.OP_STATUS_SUCCESS);\n\t\tout.writeInt(bytesPerCRC);\n\t\tout.writeLong(crcPerBlock);\n\t\tmd5.write(out);\n\t\tout.flush();\n\t} finally {\n\t\tIOUtils.closeStream(out);\n\t\tIOUtils.closeStream(checksumIn);\n\t\tIOUtils.closeStream(metadataIn);\n\t}\n}\n </pre>",
        "in_page_order": 32,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "BlockChecksumHeader.__init__": false,
          "BlockChecksumHeader.readFields": false,
          "BlockChecksumHeader.getNamespaceId": false,
          "BlockChecksumHeader.getGenStamp": false,
          "BlockChecksumHeader.getBlockId": false,
          "Block.__init__": true,
          "BufferedInputStream.__init__": true,
          "DataInputStream.__init__": true,
          "BlockMetadataHeader.getChecksum": true,
          "DataChecksum.getBytesPerChecksum": true,
          "DataChecksum.getChecksumSize": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.writeShort": true,
          "DataOutputStream.writeInt": true,
          "DataOutputStream.writeLong": true,
          "MD5Hash.write": true,
          "DataOutputStream.flush": true
        },
        "APIsProjects": {
          "Block.__init__": 35,
          "BufferedInputStream.__init__": 224,
          "DataInputStream.__init__": 161,
          "BlockMetadataHeader.getChecksum": 4,
          "DataChecksum.getBytesPerChecksum": 4,
          "DataChecksum.getChecksumSize": 4,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.writeShort": 43,
          "DataOutputStream.writeInt": 86,
          "DataOutputStream.writeLong": 52,
          "MD5Hash.write": 3,
          "DataOutputStream.flush": 89
        },
        "APIsFiles": {
          "Block.__init__": 177,
          "BufferedInputStream.__init__": 793,
          "DataInputStream.__init__": 922,
          "BlockMetadataHeader.getChecksum": 17,
          "DataChecksum.getBytesPerChecksum": 32,
          "DataChecksum.getChecksumSize": 43,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.writeShort": 104,
          "DataOutputStream.writeInt": 285,
          "DataOutputStream.writeLong": 119,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 242
        },
        "APIsSnippets": {
          "Block.__init__": 471,
          "BufferedInputStream.__init__": 1031,
          "DataInputStream.__init__": 1246,
          "BlockMetadataHeader.getChecksum": 18,
          "DataChecksum.getBytesPerChecksum": 48,
          "DataChecksum.getChecksumSize": 59,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.writeShort": 266,
          "DataOutputStream.writeInt": 862,
          "DataOutputStream.writeLong": 298,
          "MD5Hash.write": 6,
          "DataOutputStream.flush": 392
        },
        "APIsQualifiedNames": {
          "Block.__init__": "com.ochafik.lang.jnaerator.parser.Statement.Block.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "DataInputStream.__init__": "java.io.DataInputStream.__init__",
          "BlockMetadataHeader.getChecksum": "org.apache.hadoop.hdfs.server.datanode.BlockMetadataHeader.getChecksum",
          "DataChecksum.getBytesPerChecksum": "org.apache.hadoop.util.DataChecksum.getBytesPerChecksum",
          "DataChecksum.getChecksumSize": "org.apache.hadoop.util.DataChecksum.getChecksumSize",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.writeShort": "java.io.DataOutputStream.writeShort",
          "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
          "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
          "MD5Hash.write": "org.apache.hadoop.io.MD5Hash.write",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush"
        },
        "API_Ratio": 0.7058823529411765
      },
      {
        "code": "<pre class=\"prettyprint\">/**\n * Save the contents of the FS image to the file.\n */\nvoid saveFSImage(File newFile) throws IOException {\n  FSNamesystem fsNamesys = FSNamesystem.getFSNamesystem();\n  FSDirectory fsDir = fsNamesys.dir;\n  long startTime = FSNamesystem.now();\n  //\n  // Write out data\n  //\n  FileOutputStream fstream = new FileOutputStream(newFile);\n  MessageDigest digester = MD5Hash.getDigester();\n  DigestOutputStream fout = new DigestOutputStream(fstream, digester);\n  DataOutputStream out = new DataOutputStream(fout);\n  long numOfBytesWritten = 0;\n  try {\n    out.writeInt(FSConstants.LAYOUT_VERSION);\n    out.writeInt(namespaceID);\n    out.writeLong(fsDir.rootDir.numItemsInTree());\n    out.writeLong(fsNamesys.getGenerationStamp());\n    \n    out.writeBoolean(compressImage);\n    if (compressImage) {\n      String codecClassName = saveCodec.getClass().getCanonicalName();\n      Text.writeString(out, codecClassName);\n      out = new DataOutputStream(saveCodec.createOutputStream(fout));\n      LOG.info(\"Saving image file \" + newFile +\n          \" compressed using codec \" + codecClassName);\n    } else {\n      out = new DataOutputStream(new BufferedOutputStream(fout));\n    }\n    \n    byte[] byteStore = new byte[4*FSConstants.MAX_PATH_LENGTH];\n    ByteBuffer strbuf = ByteBuffer.wrap(byteStore);\n    // save the root\n    saveINode2Image(strbuf, fsDir.rootDir, out);\n    // save the rest of the nodes\n    saveImage(strbuf, 0, fsDir.rootDir, out);\n    fsNamesys.saveFilesUnderConstruction(out);\n    strbuf = null;\n    \n    out.flush();\n    fstream.getChannel().force(true);\n    numOfBytesWritten = fstream.getChannel().position();\n  } finally {\n    out.close();\n  }\n  // set md5 of the saved image\n  imageDigest = new MD5Hash(digester.digest());\n\n  long imageFileLen = newFile.length();\n  if (numOfBytesWritten != imageFileLen) {\n    throw new IOException(\"Something is wrong: write \" + numOfBytesWritten +\n        \" bytes but the image file length is \" + imageFileLen);\n  }\n  LOG.info(\"Image file of size \" + imageFileLen + \" saved in \" \n      + (FSNamesystem.now() - startTime)/1000 + \" seconds.\");\n}\n </pre>",
        "in_page_order": 33,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": false,
        "APIs": {
          "FileOutputStream.__init__": true,
          "DigestOutputStream.__init__": true,
          "DataOutputStream.__init__": true,
          "DataOutputStream.writeInt": true,
          "DataOutputStream.writeLong": true,
          "FSNamesystem.getGenerationStamp": false,
          "DataOutputStream.writeBoolean": true,
          "BufferedOutputStream.__init__": true,
          "FSNamesystem.saveFilesUnderConstruction": true,
          "DataOutputStream.flush": true,
          "FileOutputStream.getChannel": true,
          "DataOutputStream.close": true,
          "MessageDigest.digest": true,
          "MD5Hash.__init__": true,
          "File.length": true,
          "IOException.__init__": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "DigestOutputStream.__init__": 17,
          "DataOutputStream.__init__": 160,
          "DataOutputStream.writeInt": 86,
          "DataOutputStream.writeLong": 52,
          "DataOutputStream.writeBoolean": 32,
          "BufferedOutputStream.__init__": 179,
          "FSNamesystem.saveFilesUnderConstruction": 3,
          "DataOutputStream.flush": 89,
          "FileOutputStream.getChannel": 54,
          "DataOutputStream.close": 111,
          "MessageDigest.digest": 206,
          "MD5Hash.__init__": 4,
          "File.length": 260,
          "IOException.__init__": 441
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "DigestOutputStream.__init__": 39,
          "DataOutputStream.__init__": 802,
          "DataOutputStream.writeInt": 285,
          "DataOutputStream.writeLong": 119,
          "DataOutputStream.writeBoolean": 63,
          "BufferedOutputStream.__init__": 622,
          "FSNamesystem.saveFilesUnderConstruction": 3,
          "DataOutputStream.flush": 242,
          "FileOutputStream.getChannel": 121,
          "DataOutputStream.close": 519,
          "MessageDigest.digest": 574,
          "MD5Hash.__init__": 31,
          "File.length": 942,
          "IOException.__init__": 6496
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "DigestOutputStream.__init__": 51,
          "DataOutputStream.__init__": 1084,
          "DataOutputStream.writeInt": 862,
          "DataOutputStream.writeLong": 298,
          "DataOutputStream.writeBoolean": 134,
          "BufferedOutputStream.__init__": 789,
          "FSNamesystem.saveFilesUnderConstruction": 3,
          "DataOutputStream.flush": 392,
          "FileOutputStream.getChannel": 157,
          "DataOutputStream.close": 755,
          "MessageDigest.digest": 813,
          "MD5Hash.__init__": 67,
          "File.length": 1590,
          "IOException.__init__": 18878
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "DigestOutputStream.__init__": "java.security.DigestOutputStream.__init__",
          "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
          "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
          "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
          "DataOutputStream.writeBoolean": "java.io.DataOutputStream.writeBoolean",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "DataOutputStream.flush": "java.io.DataOutputStream.flush",
          "FileOutputStream.getChannel": "java.io.FileOutputStream.getChannel",
          "DataOutputStream.close": "java.io.DataOutputStream.close",
          "MessageDigest.digest": "java.security.MessageDigest.digest",
          "MD5Hash.__init__": "org.apache.hadoop.io.MD5Hash.__init__",
          "File.length": "java.io.File.length",
          "IOException.__init__": "java.io.IOException.__init__"
        },
        "API_Ratio": 0.9375
      }
    ]
  }
]