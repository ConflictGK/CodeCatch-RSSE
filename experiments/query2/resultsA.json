[
{"query": "How to send packet via UDP", "url": "https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html", "url position": 10, "segments": [{"code": "\nimport java.io.*;\n\npublic class QuoteServer {\n    public static void main(String[] args) throws IOException {\n        new QuoteServerThread().start();\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npublic QuoteServerThread() throws IOException {\n    this(\"QuoteServer\");\n}\n\npublic QuoteServerThread(String name) throws IOException {\n    super(name);\n    socket = new DatagramSocket(4445);\n\n    try {\n        in = new BufferedReader(new FileReader(\"one-liners.txt\"));\n    }   \n    catch (FileNotFoundException e){\n        System.err.println(\"Couldn't open quote file.  Serving time instead.\");\n    }\n}  \n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nbyte[] buf = new byte[256];\nDatagramPacket packet = new DatagramPacket(buf, buf.length);\nsocket.receive(packet);\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nString dString = null;\nif (in == null)\n    dString = new Date().toString();\nelse\n    dString = getNextQuote();\nbuf = dString.getBytes();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInetAddress address = packet.getAddress();\nint port = packet.getPort();\npacket = new DatagramPacket(buf, buf.length, address, port);\nsocket.send(packet);\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nsocket.close();\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nint port;\nInetAddress address;\nDatagramSocket socket = null;\nDatagramPacket packet;\nbyte[] sendBuf = new byte[256];\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nif (args.length != 1) {\n    System.out.println(\"Usage: java QuoteClient <hostname>\");\n    return;\n}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDatagramSocket socket = new DatagramSocket();\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nbyte[] buf = new byte[256];\nInetAddress address = InetAddress.getByName(args[0]);\nDatagramPacket packet = new DatagramPacket(buf, buf.length, \n                                address, 4445);\nsocket.send(packet);\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npacket = new DatagramPacket(buf, buf.length);\nsocket.receive(packet);\nString received = new String(packet.getData(), 0, packet.getLength());\nSystem.out.println(\"Quote of the Moment: \" + received);\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nQuote of the Moment:\nGood programming is 99% sweat and 1% coffee.\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "https://stackoverflow.com/questions/10556829/sending-and-receiving-udp-packets-using-java", "url position": 1, "segments": [{"code": " byte [] IP= { (byte)192, (byte)168, 1, 106 };\n InetAddress address = InetAddress.getByAddress(IP);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "28", "answer_stars": 0, "length": false, "semicolon": true}, {"code": " InetAddress address = InetAddress.getByName(\"192.168.1.106\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "28", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.io.IOException;\nimport java.net.*;\n\npublic class Receiver {\n\n    public static void main(String[] args) {\n        int port = args.length == 0 ? 57 : Integer.parseInt(args[0]);\n        new Receiver().run(port);\n    }\n\n    public void run(int port) {    \n      try {\n        DatagramSocket serverSocket = new DatagramSocket(port);\n        byte[] receiveData = new byte[8];\n\n        System.out.printf(\"Listening on udp:%s:%d%n\",\n                InetAddress.getLocalHost().getHostAddress(), port);     \n        DatagramPacket receivePacket = new DatagramPacket(receiveData,\n                           receiveData.length);\n\n        while(true)\n        {\n              serverSocket.receive(receivePacket);\n              String sentence = new String( receivePacket.getData(), 0,\n                                 receivePacket.getLength() );\n              System.out.println(\"RECEIVED: \" + sentence);\n              // now send acknowledgement packet back to sender     \n              InetAddress IPAddress = receivePacket.getAddress();\n              String sendString = \"polo\";\n              byte[] sendData = sendString.getBytes(\"UTF-8\");\n              DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length,\n                   IPAddress, receivePacket.getPort());\n              serverSocket.send(sendPacket);\n        }\n      } catch (IOException e) {\n              System.out.println(e);\n      }\n      // should close serverSocket in finally block\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "28", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "http://tutorials.jenkov.com/java-networking/udp-datagram-sockets.html", "url position": 12, "segments": [{"code": "\nbyte[] buffer = new byte[65508];\nInetAddress address = InetAddress.getByName(\"jenkov.com\");\n\nDatagramPacket packet = new DatagramPacket(\n    buffer, buffer.length, address, 9000);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDatagramSocket datagramSocket = new DatagramSocket();\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ndatagramSocket.send(packet);\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nDatagramSocket datagramSocket = new DatagramSocket();\n\nbyte[] buffer = \"0123456789\".getBytes();\nInetAddress receiverAddress = InetAddress.getLocalHost();\n\nDatagramPacket packet = new DatagramPacket(\n        buffer, buffer.length, receiverAddress, 80);\ndatagramSocket.send(packet);\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDatagramSocket datagramSocket = new DatagramSocket(80);\n\nbyte[] buffer = new byte[10];\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\ndatagramSocket.receive(packet);\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nbyte[] buffer = packet.getData();    \n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://stackoverflow.com/questions/36743226/java-send-udp-packet-to-dns-server", "url position": 2, "segments": [{"code": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\n/**\n * A quick and dirty example of query DNS A record and log response.\n * This code has no error handling.\n *\n */\n\npublic class DNSClient {\n    private static final String DNS_SERVER_ADDRESS = \"8.8.8.8\";\n    private static final int DNS_SERVER_PORT = 53;\n\n    public static void main(String[] args) throws IOException {\n        String domain = \"google.com\";\n        InetAddress ipAddress = InetAddress.getByName(DNS_SERVER_ADDRESS);\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        DataOutputStream dos = new DataOutputStream(baos);\n\n        // *** Build a DNS Request Frame ****\n\n        // Identifier: A 16-bit identification field generated by the device that creates the DNS query. \n        // It is copied by the server into the response, so it can be used by that device to match that \n        // query to the corresponding reply received from a DNS server. This is used in a manner similar \n        // to how the Identifier field is used in many of the ICMP message types.\n        dos.writeShort(0x1234);\n\n        // Write Query Flags\n        dos.writeShort(0x0100);\n\n        // Question Count: Specifies the number of questions in the Question section of the message.\n        dos.writeShort(0x0001);\n\n        // Answer Record Count: Specifies the number of resource records in the Answer section of the message.\n        dos.writeShort(0x0000);\n\n        // Authority Record Count: Specifies the number of resource records in the Authority section of \n        // the message. (NS stands for name server)\n        dos.writeShort(0x0000);\n\n        // Additional Record Count: Specifies the number of resource records in the Additional section of the message.\n        dos.writeShort(0x0000);\n\n        String[] domainParts = domain.split(\"\\\\.\");\n        System.out.println(domain + \" has \" + domainParts.length + \" parts\");\n\n        for (int i = 0; i<domainParts.length; i++) {\n            System.out.println(\"Writing: \" + domainParts[i]);\n            byte[] domainBytes = domainParts[i].getBytes(\"UTF-8\");\n            dos.writeByte(domainBytes.length);\n            dos.write(domainBytes);\n        }\n\n        // No more parts\n        dos.writeByte(0x00);\n\n        // Type 0x01 = A (Host Request)\n        dos.writeShort(0x0001);\n\n        // Class 0x01 = IN\n        dos.writeShort(0x0001);\n\n        byte[] dnsFrame = baos.toByteArray();\n\n        System.out.println(\"Sending: \" + dnsFrame.length + \" bytes\");\n        for (int i =0; i< dnsFrame.length; i++) {\n            System.out.print(\"0x\" + String.format(\"%x\", dnsFrame[i]) + \" \" );\n        }\n\n        // *** Send DNS Request Frame ***\n        DatagramSocket socket = new DatagramSocket();\n        DatagramPacket dnsReqPacket = new DatagramPacket(dnsFrame, dnsFrame.length, ipAddress, DNS_SERVER_PORT);\n        socket.send(dnsReqPacket);\n\n        // Await response from DNS server\n        byte[] buf = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buf, buf.length);\n        socket.receive(packet);\n\n        System.out.println(\"\\n\\nReceived: \" + packet.getLength() + \" bytes\");\n\n        for (int i = 0; i < packet.getLength(); i++) {\n            System.out.print(\" 0x\" + String.format(\"%x\", buf[i]) + \" \" );\n        }\n        System.out.println(\"\\n\");\n\n\n        DataInputStream din = new DataInputStream(new ByteArrayInputStream(buf));\n        System.out.println(\"Transaction ID: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Flags: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Questions: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Answers RRs: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Authority RRs: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Additional RRs: 0x\" + String.format(\"%x\", din.readShort()));\n\n        int recLen = 0;\n        while ((recLen = din.readByte()) > 0) {\n            byte[] record = new byte[recLen];\n\n            for (int i = 0; i < recLen; i++) {\n                record[i] = din.readByte();\n            }\n\n            System.out.println(\"Record: \" + new String(record, \"UTF-8\"));\n        }\n\n        System.out.println(\"Record Type: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Class: 0x\" + String.format(\"%x\", din.readShort()));\n\n        System.out.println(\"Field: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Type: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Class: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"TTL: 0x\" + String.format(\"%x\", din.readInt()));\n\n        short addrLen = din.readShort();\n        System.out.println(\"Len: 0x\" + String.format(\"%x\", addrLen));\n\n        System.out.print(\"Address: \");\n        for (int i = 0; i < addrLen; i++ ) {\n            System.out.print(\"\" + String.format(\"%d\", (din.readByte() & 0xFF)) + \".\");\n        }\n    }\n\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "6", "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "http://www.baeldung.com/udp-in-java", "url position": 6, "segments": [{"code": "public class EchoServer extends Thread {\r\n\r\n    private DatagramSocket socket;\r\n    private boolean running;\r\n    private byte[] buf = new byte[256];\r\n\r\n    public EchoServer() {\r\n        socket = new DatagramSocket(4445);\r\n    }\r\n\r\n    public void run() {\r\n        running = true;\r\n\r\n        while (running) {\r\n            DatagramPacket packet \r\n              = new DatagramPacket(buf, buf.length);\r\n            socket.receive(packet);\r\n            \r\n            InetAddress address = packet.getAddress();\r\n            int port = packet.getPort();\r\n            packet = new DatagramPacket(buf, buf.length, address, port);\r\n            String received \r\n              = new String(packet.getData(), 0, packet.getLength());\r\n            \r\n            if (received.equals(\"end\")) {\r\n                running = false;\r\n                continue;\r\n            }\r\n            socket.send(packet);\r\n        }\r\n        socket.close();\r\n    }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class EchoClient {\r\n    private DatagramSocket socket;\r\n    private InetAddress address;\r\n\r\n    private byte[] buf;\r\n\r\n    public EchoClient() {\r\n        socket = new DatagramSocket();\r\n        address = InetAddress.getByName(\"localhost\");\r\n    }\r\n\r\n    public String sendEcho(String msg) {\r\n        buf = msg.getBytes();\r\n        DatagramPacket packet \r\n          = new DatagramPacket(buf, buf.length, address, 4445);\r\n        socket.send(packet);\r\n        packet = new DatagramPacket(buf, buf.length);\r\n        socket.receive(packet);\r\n        String received = new String(\r\n          packet.getData(), 0, packet.getLength());\r\n        return received;\r\n    }\r\n\r\n    public void close() {\r\n        socket.close();\r\n    }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class UDPTest {\r\n    EchoClient client;\r\n\r\n    @Before\r\n    public void setup(){\r\n        new EchoServer().start();\r\n        client = new EchoClient();\r\n    }\r\n\r\n    @Test\r\n    public void whenCanSendAndReceivePacket_thenCorrect() {\r\n        String echo = client.sendEcho(\"hello server\");\r\n        assertEquals(\"hello server\", echo);\r\n        echo = client.sendEcho(\"server is working\");\r\n        assertFalse(echo.equals(\"hello server\"));\r\n    }\r\n\r\n    @After\r\n    public void tearDown() {\r\n        client.sendEcho(\"end\");\r\n        client.close();\r\n    }\r\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://stackoverflow.com/questions/10274623/how-to-send-a-udp-packet-to-a-specific-computer-when-all-the-computer-on-the-net", "url position": 3, "segments": [{"code": "             Router / Modem\n              192.168.0.1 \n                  ||\n       ++=========++========++\n       ||                   ||\n  Computer A           Computer B\n  192.168.0.2          192.168.0.3\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "12", "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Forward TCP/UDP on public port 9000 to private port 9000 on 192.168.0.2\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "12", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "Forward TCP/UDP on public port 9001 to private port 9000 on 192.168.0.3\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "12", "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "http://www.java2s.com/Code/Java/Network-Protocol/SendoutUDPpockets.htm", "url position": 7, "segments": [{"code": "   \n\nimport java.io.*;\nimport java.net.*;\n\npublic class UDPSend {\n  public static void main(String args[]) {\n    try {\n      String host = \"www.java2s.com\";\n      int port = 90;\n\n      byte[] message = \"Java Source and Support\".getBytes();\n\n      // Get the internet address of the specified host\n      InetAddress address = InetAddress.getByName(host);\n\n      // Initialize a datagram packet with data and address\n      DatagramPacket packet = new DatagramPacket(message, message.length,\n          address, port);\n\n      // Create a datagram socket, send the packet through it, close it.\n      DatagramSocket dsocket = new DatagramSocket();\n      dsocket.send(packet);\n      dsocket.close();\n    } catch (Exception e) {\n      System.err.println(e);\n    }\n  }\n}\n\n           \n         \n    \n    \n  \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://stackoverflow.com/questions/5236620/how-to-send-an-int-through-udp-in-java", "url position": 5, "segments": [{"code": "import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        final DataOutputStream dataOut = new DataOutputStream(byteOut);\n        dataOut.writeInt(1);\n        dataOut.writeDouble(1.2);\n        dataOut.writeLong(4l);\n        dataOut.close(); // or dataOut.flush()\n        final byte[] bytes = byteOutStream.toByteArray();\n        final ByteArrayInputStream byteIn = new ByteArrayInputStream(bytes);\n        final DataInputStream dataIn = new DataInputStream(byteIn);\n        final int integ = dataIn.readInt();\n        final double doub = dataIn.readDouble();\n        final long lon = dataIn.readLong();\n        System.out.println(integ);\n        System.out.println(doub);\n        System.out.println(lon);\n    }\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "8", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "ObjectInputStream os = new ObjectInputStream(bin);\nos.readInt();\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "2", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "    DatagramSocket socket = new DatagramSocket(1989);\n    DatagramPacket packet = new DatagramPacket(new byte[256] , 256);\n\n    socket.receive(packet);\n\n    System.out.print(new String(packet.getData()));\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://stackoverflow.com/questions/8562689/need-to-send-a-udp-packet-and-receive-a-response-in-java", "url position": 4, "segments": [{"code": "import java.io.*;\nimport java.net.*;\n\nclass UDPClient\n{\n   public static void main(String args[]) throws Exception\n   {\n      BufferedReader inFromUser =\n         new BufferedReader(new InputStreamReader(System.in));\n      DatagramSocket clientSocket = new DatagramSocket();\n      InetAddress IPAddress = InetAddress.getByName(\"localhost\");\n      byte[] sendData = new byte[1024];\n      byte[] receiveData = new byte[1024];\n      String sentence = inFromUser.readLine();\n      sendData = sentence.getBytes();\n      DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\n      clientSocket.send(sendPacket);\n      DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n      clientSocket.receive(receivePacket);\n      String modifiedSentence = new String(receivePacket.getData());\n      System.out.println(\"FROM SERVER:\" + modifiedSentence);\n      clientSocket.close();\n   }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "10", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "http://www.nakov.com/inetjava/lectures/part-1-sockets/InetJava-1.5-UDP-and-Multicast-Sockets.html", "url position": 14, "segments": [{"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">Artificial Intelligence usually beats real stupidity.</span></pre>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">Life is wonderful. Without it we'd all be dead.</span></pre>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">Too many clicks spoil the browse.</span></pre>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">Good programming is 99% sweat and 1% coffee.</span></pre>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">\"Daddy, what does FORMATTING DRIVE C mean?\"</span></pre>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-left:36.0pt\"><span lang=\"EN-US\">Error, no keyboard - press F1 to continue.</span></pre>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n36.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">socket.close();</span></pre>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-right:72.0pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-right:72.0pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Quote of the Moment:</span></pre>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:45.8pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">Good programming is 99% sweat and 1% coffee.</span></pre>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-right:72.0pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">import java.io.*;</span></pre>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">public class <strong><span style='font-family:\"Courier New\"'>MulticastServer</span></strong> {</span></pre>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 public static void main(String[] args) throws IOException {</span></pre>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 new <strong><span style='font-family:\"Courier New\"'>MulticastServerThread</span></strong>().start();</span></pre>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 }</span></pre>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">}</span></pre>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">public void run() {</span></pre>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 while (moreQuotes) {</span></pre>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 try {</span></pre>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 byte[] buf new byte[256];</span></pre>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <strong><span style='font-family:\"Courier New\"'>// don't wait for request...just send a quote</span></strong></span></pre>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 String dString = null;</span></pre>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (in == null)</span></pre>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dString = new Date().toString();</span></pre>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 else</span></pre>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dString = getNextQuote();</span></pre>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 buf = dString.getBytes();</span></pre>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <strong><span style='font-family:\"Courier New\"'>InetAddress group = InetAddress.getByName(</span></strong></span></pre>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><strong><span lang=\"EN-US\" style='font-family:\"Courier New\"'>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"230.0.0.1\");</span></strong></pre>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 DatagramPacket packet;</span></pre>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 packet = new DatagramPacket(buf, buf.length, </span></pre>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong><span style='font-family:\"Courier New\"'>group, 4446</span></strong>);</span></pre>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 socket.send(packet);</span></pre>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 try {</span></pre>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sleep((long)Math.random() * FIVE_SECONDS);</span></pre>", "in_page_order": 51, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (InterruptedException e) { }</span></pre>", "in_page_order": 52, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } catch (IOException e) {</span></pre>", "in_page_order": 53, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 e.printStackTrace();</span></pre>", "in_page_order": 54, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 moreQuotes = false;</span></pre>", "in_page_order": 55, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }</span></pre>", "in_page_order": 56, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 }</span></pre>", "in_page_order": 57, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 socket.close();</span></pre>", "in_page_order": 58, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">}</span></pre>", "in_page_order": 59, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:\n72.0pt;margin-bottom:.0001pt\"><strong><span lang=\"EN-US\" style='font-family:\"Courier New\"'>\u00a0</span></strong></pre>", "in_page_order": 60, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><strong><span lang=\"EN-US\" style='font-family:\"Courier New\"'>MulticastSocket socket = new MulticastSocket(4446);</span></strong></pre>", "in_page_order": 61, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><strong><span lang=\"EN-US\" style='font-family:\"Courier New\"'>InetAddress group = InetAddress.getByName(\"230.0.0.1\");</span></strong></pre>", "in_page_order": 62, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><strong><span lang=\"EN-US\" style='font-family:\"Courier New\"'>socket.joinGroup(group);</span></strong></pre>", "in_page_order": 63, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 64, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">DatagramPacket packet;</span></pre>", "in_page_order": 65, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">for (int i = 0; i &lt; 5; i++) {</span></pre>", "in_page_order": 66, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 byte[] buf = new byte[256];</span></pre>", "in_page_order": 67, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 packet = new DatagramPacket(buf, buf.length);</span></pre>", "in_page_order": 68, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 <strong><span style='font-family:\n\"Courier New\"'>socket.receive(packet);</span></strong></span></pre>", "in_page_order": 69, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0</span></pre>", "in_page_order": 70, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 String received = new String(packet.getData());</span></pre>", "in_page_order": 71, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">\u00a0\u00a0\u00a0 System.out.println(\"Quote of the Moment: \" + received);</span></pre>", "in_page_order": 72, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">}</span></pre>", "in_page_order": 73, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:\n0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;margin-bottom:\n.0001pt\"><strong><span lang=\"EN-US\" style='font-family:\"Courier New\"'>socket.leaveGroup(group);</span></strong></pre>", "in_page_order": 74, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre style=\"margin-top:0cm;margin-right:72.0pt;margin-bottom:0cm;margin-left:36.0pt;\nmargin-bottom:.0001pt\"><span lang=\"EN-US\">socket.close();</span></pre>", "in_page_order": 75, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "https://systembash.com/a-simple-java-udp-server-and-udp-client/", "url position": 8, "segments": [{"code": "import java.io.*;\r\nimport java.net.*;\r\n\r\nclass UDPServer\r\n{\r\n   public static void main(String args[]) throws Exception\r\n      {\r\n         DatagramSocket serverSocket = new DatagramSocket(9876);\r\n            byte[] receiveData = new byte[1024];\r\n            byte[] sendData = new byte[1024];\r\n            while(true)\r\n               {\r\n                  DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n                  serverSocket.receive(receivePacket);\r\n                  String sentence = new String( receivePacket.getData());\r\n                  System.out.println(\"RECEIVED: \" + sentence);\r\n                  InetAddress IPAddress = receivePacket.getAddress();\r\n                  int port = receivePacket.getPort();\r\n                  String capitalizedSentence = sentence.toUpperCase();\r\n                  sendData = capitalizedSentence.getBytes();\r\n                  DatagramPacket sendPacket =\r\n                  new DatagramPacket(sendData, sendData.length, IPAddress, port);\r\n                  serverSocket.send(sendPacket);\r\n               }\r\n      }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\r\nimport java.net.*;\r\n\r\nclass UDPClient\r\n{\r\n   public static void main(String args[]) throws Exception\r\n   {\r\n      BufferedReader inFromUser =\r\n         new BufferedReader(new InputStreamReader(System.in));\r\n      DatagramSocket clientSocket = new DatagramSocket();\r\n      InetAddress IPAddress = InetAddress.getByName(\"localhost\");\r\n      byte[] sendData = new byte[1024];\r\n      byte[] receiveData = new byte[1024];\r\n      String sentence = inFromUser.readLine();\r\n      sendData = sentence.getBytes();\r\n      DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\r\n      clientSocket.send(sendPacket);\r\n      DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n      clientSocket.receive(receivePacket);\r\n      String modifiedSentence = new String(receivePacket.getData());\r\n      System.out.println(\"FROM SERVER:\" + modifiedSentence);\r\n      clientSocket.close();\r\n   }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "http://codesamplez.com/programming/udp-programming-in-java", "url position": 13, "segments": [{"code": "\r\natagramSocket  socket;\r\ntry{\r\n         socket \t\t\t= new DatagramSocket();\r\n         String requestData \t\t= \"'Hello World' via UDP in JAVA\";\r\n         byte [] m \t\t\t\t= requestData.getBytes();\r\n         InetAddress aHost \t\t= InetAddress.getByName(\"myhostname\");\r\n         int serverPort \t\t\t= 1234;\r\n         DatagramPacket request \t= new DatagramPacket(m, requestData.length(), aHost, serverPort);\r\n         socket.send(request);\r\n         byte [] buffer = new byte[1000];\r\n         DatagramPacket reply = new DatagramPacket(buffer, buffer.length);\r\n         socket.setSoTimeout(2000);\r\n         this.socket.receive(reply);\r\n}\r\ncatch(SocketTimeoutException e){\r\n\te.printStackTrace();\r\n}\r\ncatch(Exception e){\r\n        e.printStackTrace();\r\n}finally{\r\n\tsocket.close();\r\n}\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nDatagramSocket \tsocket;\r\nDatagramPacket \trequest;\r\n\r\nwhile(true)\r\n{\r\n      String data = null;\r\n                \r\n       try {\r\n\t\tbuffer \t\t\t= new byte[this.DGRAM_LENGTH];\r\n\t\trequest \t\t= new DatagramPacket(buffer, buffer.length);\r\n\t\tsocket.receive(this.request);\r\n\t\tdata = new String(this.request.getData());\r\n\t\tString request = data.trim();\r\n                //do your processing with request data\r\n                //Sending response \r\n                String response = \"Test Reply from UDP server!\";\r\n                DatagramPacket reply = new DatagramPacket(response.getBytes(), response.length(), request.getAddress(), request.getPort());\r\n\t\tthis.socket.send(reply);\r\n\t}\r\n\tcatch(Exception err) {\r\n\t\terr.printStackTrace();\r\n\t} \r\n}\r\n\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nsocket.joinGroup(InetAddress.getByName(\"hostname\"));\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://ubuntuforums.org/archive/index.php/t-1712620.html", "url position": 15, "segments": []},
{"query": "How to send packet via UDP", "url": "https://gist.github.com/alexcheng1982/7108987", "url position": 9, "segments": [{"code": "<td id=\"file-rawudppacketsender-java-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">package</span> <span class=\"pl-smi\">demo</span>;</td>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC2\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC3\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.Pcap</span>;</td>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.PcapIf</span>;</td>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.packet.JMemoryPacket</span>;</td>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC6\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.packet.JPacket</span>;</td>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.protocol.JProtocol</span>;</td>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.protocol.lan.Ethernet</span>;</td>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC9\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.protocol.network.Ip4</span>;</td>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.jnetpcap.protocol.tcpip.Udp</span>;</td>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC11\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.IOException</span>;</td>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC13\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.net.InetAddress</span>;</td>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC14\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.net.URI</span>;</td>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC15\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.nio.ByteOrder</span>;</td>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC16\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.ArrayList</span>;</td>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC17\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.logging.Level</span>;</td>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC18\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.logging.Logger</span>;</td>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC19\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.List</span>;</td>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC20\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC21\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">RawUdpPacketSender</span> {</td>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC22\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Logger</span> logger <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Logger</span><span class=\"pl-k\">.</span>getLogger(<span class=\"pl-smi\">RawUdpPacketSender</span><span class=\"pl-k\">.</span>class<span class=\"pl-k\">.</span>getName());</td>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC23\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC24\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Pcap</span> pcap <span class=\"pl-k\">=</span> <span class=\"pl-c1\">null</span>;</td>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC25\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">int</span> headerLength <span class=\"pl-k\">=</span> getHeaderLength();</td>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC26\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1\">UDP_SOURCE_PORT</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">7006</span>;</td>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC27\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">byte</span>[] sourceMacAddress;</td>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC28\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">byte</span>[] destinationMacAddress;</td>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC29\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC30\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-en\">RawUdpPacketSender</span>() {</td>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC31\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">String</span> macAddress <span class=\"pl-k\">=</span> <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>getProperty(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>gateway_mac_address<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC32\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>Destination MAC address needs to be configured. This can be retrieved using ARP, but it's not easy</span></td>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC33\" class=\"blob-code blob-code-inner js-file-line\">        destinationMacAddress <span class=\"pl-k\">=</span> hexStringToByteArray(macAddress);</td>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC34\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">try</span> {</td>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC35\" class=\"blob-code blob-code-inner js-file-line\">            pcap <span class=\"pl-k\">=</span> createPcap();</td>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC36\" class=\"blob-code blob-code-inner js-file-line\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> e) {</td>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC37\" class=\"blob-code blob-code-inner js-file-line\">            logger<span class=\"pl-k\">.</span>log(<span class=\"pl-smi\">Level</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SEVERE</span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Failed to start pcap library.<span class=\"pl-pds\">\"</span></span>, e);</td>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC38\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC39\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC40\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC41\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">sendPacket</span>(<span class=\"pl-smi\">URI</span> <span class=\"pl-v\">destination</span>, <span class=\"pl-k\">byte</span>[] <span class=\"pl-v\">packet</span>)</td>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC42\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {</td>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC43\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> port <span class=\"pl-k\">=</span> destination<span class=\"pl-k\">.</span>getPort();</td>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC44\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">InetAddress</span> address <span class=\"pl-k\">=</span> <span class=\"pl-smi\">InetAddress</span><span class=\"pl-k\">.</span>getByName(destination<span class=\"pl-k\">.</span>getHost());</td>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC45\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">byte</span>[] destinationAddress <span class=\"pl-k\">=</span> address<span class=\"pl-k\">.</span>getAddress();</td>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC46\" class=\"blob-code blob-code-inner js-file-line\">        sendPacket(destinationAddress, port, packet);</td>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC47\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC48\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC49\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Pcap</span> <span class=\"pl-en\">createPcap</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {</td>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC50\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">PcapIf</span> device <span class=\"pl-k\">=</span> getPcapDevice();</td>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC51\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">if</span> (device <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>", "in_page_order": 51, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC52\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>", "in_page_order": 52, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC53\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 53, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC54\" class=\"blob-code blob-code-inner js-file-line\">        sourceMacAddress <span class=\"pl-k\">=</span> device<span class=\"pl-k\">.</span>getHardwareAddress();  <span class=\"pl-c\"><span class=\"pl-c\">//</span>Use device's MAC address as the source address</span></td>", "in_page_order": 54, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC55\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">StringBuilder</span> errorBuffer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>();</td>", "in_page_order": 55, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC56\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> snapLen <span class=\"pl-k\">=</span> <span class=\"pl-c1\">64</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1024</span>;</td>", "in_page_order": 56, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC57\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> flags <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Pcap</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MODE_NON_PROMISCUOUS</span>;</td>", "in_page_order": 57, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC58\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> timeout <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span> <span class=\"pl-k\">*</span> <span class=\"pl-c1\">1000</span>;</td>", "in_page_order": 58, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC59\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">Pcap</span> pcap <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Pcap</span><span class=\"pl-k\">.</span>openLive(device<span class=\"pl-k\">.</span>getName(), snapLen, flags, timeout,</td>", "in_page_order": 59, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC60\" class=\"blob-code blob-code-inner js-file-line\">                errorBuffer);</td>", "in_page_order": 60, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC61\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">if</span> (logger<span class=\"pl-k\">.</span>isLoggable(<span class=\"pl-smi\">Level</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INFO</span>)) {</td>", "in_page_order": 61, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC62\" class=\"blob-code blob-code-inner js-file-line\">            logger<span class=\"pl-k\">.</span>info(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Pcap starts for device %s successfully.<span class=\"pl-pds\">\"</span></span>, device));</td>", "in_page_order": 62, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC63\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 63, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC64\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return</span> pcap;</td>", "in_page_order": 64, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC65\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 65, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC66\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 66, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC67\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">PcapIf</span> <span class=\"pl-en\">getPcapDevice</span>() {</td>", "in_page_order": 67, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC68\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">PcapIf</span>&gt;</span> allDevs <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k\">ArrayList&lt;<span class=\"pl-smi\">PcapIf</span>&gt;</span>();</td>", "in_page_order": 68, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC69\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">StringBuilder</span> errorBuffer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringBuilder</span>();</td>", "in_page_order": 69, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC70\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> r <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Pcap</span><span class=\"pl-k\">.</span>findAllDevs(allDevs, errorBuffer);</td>", "in_page_order": 70, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC71\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">if</span> (r <span class=\"pl-k\">==</span> <span class=\"pl-smi\">Pcap</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NOT_OK</span> <span class=\"pl-k\">||</span> allDevs<span class=\"pl-k\">.</span>isEmpty()) {</td>", "in_page_order": 71, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC72\" class=\"blob-code blob-code-inner js-file-line\">            logger<span class=\"pl-k\">.</span>log(<span class=\"pl-smi\">Level</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>SEVERE</span>, <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Can't read list of devices, error is %s<span class=\"pl-pds\">\"</span></span>,</td>", "in_page_order": 72, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC73\" class=\"blob-code blob-code-inner js-file-line\">                    errorBuffer<span class=\"pl-k\">.</span>toString()));</td>", "in_page_order": 73, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC74\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;</td>", "in_page_order": 74, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC75\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 75, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC76\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">String</span> deviceName <span class=\"pl-k\">=</span> <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>getProperty(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>raw_packet_network_interface<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eth0<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 76, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC77\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">PcapIf</span> device <span class=\"pl-k\">:</span> allDevs) {</td>", "in_page_order": 77, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC78\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">if</span> (deviceName<span class=\"pl-k\">.</span>equals(device<span class=\"pl-k\">.</span>getName())) {</td>", "in_page_order": 78, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC79\" class=\"blob-code blob-code-inner js-file-line\">                <span class=\"pl-k\">return</span> device;</td>", "in_page_order": 79, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC80\" class=\"blob-code blob-code-inner js-file-line\">            }</td>", "in_page_order": 80, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC81\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 81, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC82\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return</span> allDevs<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>);</td>", "in_page_order": 82, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC83\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 83, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC84\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 84, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC85\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">int</span> <span class=\"pl-en\">getHeaderLength</span>() {</td>", "in_page_order": 85, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC86\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">14</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">20</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">8</span>; <span class=\"pl-c\"><span class=\"pl-c\">//</span>Ethernet header + IP v4 header + UDP header</span></td>", "in_page_order": 86, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC87\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 87, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC88\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 88, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC89\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">sendPacket</span>(<span class=\"pl-k\">byte</span>[] <span class=\"pl-v\">destinationAddress</span>, <span class=\"pl-k\">int</span> <span class=\"pl-v\">port</span>, <span class=\"pl-k\">byte</span>[] <span class=\"pl-v\">data</span>)</td>", "in_page_order": 89, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC90\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {</td>", "in_page_order": 90, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC91\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> dataLength <span class=\"pl-k\">=</span> data<span class=\"pl-k\">.</span>length;</td>", "in_page_order": 91, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC92\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> packetSize <span class=\"pl-k\">=</span> headerLength <span class=\"pl-k\">+</span> dataLength;</td>", "in_page_order": 92, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC93\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">JPacket</span> packet <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JMemoryPacket</span>(packetSize);</td>", "in_page_order": 93, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC94\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>order(<span class=\"pl-smi\">ByteOrder</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>BIG_ENDIAN</span>);</td>", "in_page_order": 94, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC95\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>setUShort(<span class=\"pl-c1\">12</span>, <span class=\"pl-c1\">0x0800</span>);</td>", "in_page_order": 95, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC96\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>scan(<span class=\"pl-smi\">JProtocol</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ETHERNET_ID</span>);</td>", "in_page_order": 96, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC97\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">Ethernet</span> ethernet <span class=\"pl-k\">=</span> packet<span class=\"pl-k\">.</span>getHeader(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Ethernet</span>());</td>", "in_page_order": 97, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC98\" class=\"blob-code blob-code-inner js-file-line\">        ethernet<span class=\"pl-k\">.</span>source(sourceMacAddress);</td>", "in_page_order": 98, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC99\" class=\"blob-code blob-code-inner js-file-line\">        ethernet<span class=\"pl-k\">.</span>destination(destinationMacAddress);</td>", "in_page_order": 99, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC100\" class=\"blob-code blob-code-inner js-file-line\">        ethernet<span class=\"pl-k\">.</span>checksum(ethernet<span class=\"pl-k\">.</span>calculateChecksum());</td>", "in_page_order": 100, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC101\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 101, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC102\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>IP v4 packet</span></td>", "in_page_order": 102, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC103\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>setUByte(<span class=\"pl-c1\">14</span>, <span class=\"pl-c1\">0x40</span> <span class=\"pl-k\">|</span> <span class=\"pl-c1\">0x05</span>);</td>", "in_page_order": 103, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC104\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>scan(<span class=\"pl-smi\">JProtocol</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ETHERNET_ID</span>);</td>", "in_page_order": 104, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC105\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">Ip4</span> ip4 <span class=\"pl-k\">=</span> packet<span class=\"pl-k\">.</span>getHeader(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Ip4</span>());</td>", "in_page_order": 105, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC106\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>type(<span class=\"pl-smi\">Ip4</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">Ip4Type</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>UDP</span>);</td>", "in_page_order": 106, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC107\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>length(packetSize <span class=\"pl-k\">-</span> ethernet<span class=\"pl-k\">.</span>size());</td>", "in_page_order": 107, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC108\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">byte</span>[] sourceAddress <span class=\"pl-k\">=</span> <span class=\"pl-smi\">InetAddress</span><span class=\"pl-k\">.</span>getLocalHost()<span class=\"pl-k\">.</span>getAddress();</td>", "in_page_order": 108, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC109\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>source(sourceAddress);</td>", "in_page_order": 109, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC110\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>destination(destinationAddress);</td>", "in_page_order": 110, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC111\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>ttl(<span class=\"pl-c1\">32</span>);</td>", "in_page_order": 111, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC112\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>flags(<span class=\"pl-c1\">0</span>);</td>", "in_page_order": 112, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC113\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>offset(<span class=\"pl-c1\">0</span>);</td>", "in_page_order": 113, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC114\" class=\"blob-code blob-code-inner js-file-line\">        ip4<span class=\"pl-k\">.</span>checksum(ip4<span class=\"pl-k\">.</span>calculateChecksum());</td>", "in_page_order": 114, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC115\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 115, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC116\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-c\"><span class=\"pl-c\">//</span>UDP packet</span></td>", "in_page_order": 116, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC117\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>scan(<span class=\"pl-smi\">JProtocol</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ETHERNET_ID</span>);</td>", "in_page_order": 117, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC118\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">Udp</span> udp <span class=\"pl-k\">=</span> packet<span class=\"pl-k\">.</span>getHeader(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Udp</span>());</td>", "in_page_order": 118, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC119\" class=\"blob-code blob-code-inner js-file-line\">        udp<span class=\"pl-k\">.</span>source(<span class=\"pl-c1\">UDP_SOURCE_PORT</span>);</td>", "in_page_order": 119, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC120\" class=\"blob-code blob-code-inner js-file-line\">        udp<span class=\"pl-k\">.</span>destination(port);</td>", "in_page_order": 120, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC121\" class=\"blob-code blob-code-inner js-file-line\">        udp<span class=\"pl-k\">.</span>length(packetSize <span class=\"pl-k\">-</span> ethernet<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">-</span> ip4<span class=\"pl-k\">.</span>size());</td>", "in_page_order": 121, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC122\" class=\"blob-code blob-code-inner js-file-line\">        udp<span class=\"pl-k\">.</span>checksum(udp<span class=\"pl-k\">.</span>calculateChecksum());</td>", "in_page_order": 122, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC123\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>setByteArray(headerLength, data);</td>", "in_page_order": 123, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC124\" class=\"blob-code blob-code-inner js-file-line\">        packet<span class=\"pl-k\">.</span>scan(<span class=\"pl-smi\">Ethernet</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ID</span>);</td>", "in_page_order": 124, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC125\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 125, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC126\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">if</span> (pcap<span class=\"pl-k\">.</span>sendPacket(packet) <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">Pcap</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OK</span>) {</td>", "in_page_order": 126, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC127\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IOException</span>(<span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(</td>", "in_page_order": 127, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC128\" class=\"blob-code blob-code-inner js-file-line\">                    <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Failed to send UDP packet with error: %s<span class=\"pl-pds\">\"</span></span>, pcap<span class=\"pl-k\">.</span>getErr()));</td>", "in_page_order": 128, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC129\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 129, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC130\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 130, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC131\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 131, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC132\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">byte</span>[] <span class=\"pl-en\">hexStringToByteArray</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-v\">s</span>) {</td>", "in_page_order": 132, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC133\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> len <span class=\"pl-k\">=</span> s<span class=\"pl-k\">.</span>length();</td>", "in_page_order": 133, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC134\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">byte</span>[] data <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[len <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>];</td>", "in_page_order": 134, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC135\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> i <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>; i <span class=\"pl-k\">&lt;</span> len; i <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">2</span>) {</td>", "in_page_order": 135, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC136\" class=\"blob-code blob-code-inner js-file-line\">            data[i <span class=\"pl-k\">/</span> <span class=\"pl-c1\">2</span>] <span class=\"pl-k\">=</span> (<span class=\"pl-k\">byte</span>) ((<span class=\"pl-smi\">Character</span><span class=\"pl-k\">.</span>digit(s<span class=\"pl-k\">.</span>charAt(i), <span class=\"pl-c1\">16</span>) <span class=\"pl-k\">&lt;&lt;</span> <span class=\"pl-c1\">4</span>) <span class=\"pl-k\">+</span> <span class=\"pl-smi\">Character</span></td>", "in_page_order": 136, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC137\" class=\"blob-code blob-code-inner js-file-line\">                    .digit(s<span class=\"pl-k\">.</span>charAt(i <span class=\"pl-k\">+</span> <span class=\"pl-c1\">1</span>), <span class=\"pl-c1\">16</span>));</td>", "in_page_order": 137, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC138\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 138, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC139\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">return</span> data;</td>", "in_page_order": 139, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC140\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 140, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC141\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 141, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC142\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {</td>", "in_page_order": 142, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC143\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">RawUdpPacketSender</span> sender <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RawUdpPacketSender</span>();</td>", "in_page_order": 143, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC144\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">byte</span>[] packet <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">.</span>getBytes();</td>", "in_page_order": 144, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC145\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">URI</span> destination <span class=\"pl-k\">=</span> <span class=\"pl-c1\">URI</span><span class=\"pl-k\">.</span>create(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>udp://192.168.40.33:6006<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 145, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC146\" class=\"blob-code blob-code-inner js-file-line\">        sender<span class=\"pl-k\">.</span>sendPacket(destination, packet);</td>", "in_page_order": 146, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC147\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 147, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}, {"code": "<td id=\"file-rawudppacketsender-java-LC148\" class=\"blob-code blob-code-inner js-file-line\">}</td>", "in_page_order": 148, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "1", "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "https://www.javaworld.com/article/2077539/learn-java/java-tip-40--object-transport-via-datagram-packets.html", "url position": 16, "segments": [{"code": "//Object Output\nimport java.net.*;\nimport java.io.*;\n//The sample class to be sent: Factory\nclass Factory implements Serializable\n{  private void writeObject(ObjectOutputStream out) throws IOException  \n{    out.defaultWriteObject();  }\n  private void readObject(ObjectInputStream in)\n               throws IOException, ClassNotFoundException  \n{    in.defaultReadObject();  }\n}\npublic class ShowObjOutput\n{  public static void main(String[] arg)  \n{    try    \n{      ObjectOutputStream os;\n      Socket sock = new Socket(\"panda.cs.uno.edu\", 6000);\n //panda is the host name\n      Factory fa = new Factory();\n      os = new ObjectOutputStream( new\n             BufferedOutputStream(sock.getOutputStream()));\n      os.writeObject(fa);\n    }\n    catch (IOException ex)\n    {}\n  }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "//Object Input\nimport java.net.*;\nimport java.io.*;\npublic class ShowObjInput\n{  public static void main(String[] arg)\n  {    try    \n{      ObjectInputStream is;\n      ServerSocket servSock = new ServerSocket(6000);\n      Sock sock;\n      sock = servSock.accept();\n      is = new ObjectInputStream( new\n               BufferedInputStream(sock.getInputStream()));\n      Factory o = (Factory)is.readObject();\n    }    catch (IOException ex)\n    {}\n  }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\nimport java.net.*;\npublic class Sender\n{  public void sendTo(Object o, String hostName, int desPort)  \n{    try    \n{      InetAddress address = InetAddress.getByName(hostName);\n      ByteArrayOutputStream byteStream = new\n          ByteArrayOutputStream(5000);\n      ObjectOutputStream os = new ObjectOutputStream(new\n                              BufferedOutputStream(byteStream));\n      os.flush();\n      os.writeObject(o);\n      os.flush();\n      //retrieves byte array\n      byte[] sendBuf = byteStream.toByteArray();\n      DatagramPacket packet = new DatagramPacket(\n                          sendBuf, sendBuf.length, address, desPort);\n      int byteCount = packet.getLength();\n      dSock.send(packet);\n      os.close();\n    }\n    catch (UnknownHostException e)\n    {\n      System.err.println(\"Exception:  \" + e);\n      e.printStackTrace();    }\n    catch (IOException e)    { e.printStackTrace();\n }\n  }\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\nimport java.net.*;\npublic class Receiver\n{  public Object recvObjFrom()  \n{    try\n    {\n      byte[] recvBuf = new byte[5000];\n      DatagramPacket packet = new DatagramPacket(recvBuf,\n                                                 recvBuf.length);\n      dSock.receive(packet);\n      int byteCount = packet.getLength();\n      ByteArrayInputStream byteStream = new\n                                  ByteArrayInputStream(recvBuf);\n      ObjectInputStream is = new\n           ObjectInputStream(new BufferedInputStream(byteStream));\n      Object o = is.readObject();\n      is.close();\n      return(o);\n    }\n    catch (IOException e)\n    {\n      System.err.println(\"Exception:  \" + e);\n      e.printStackTrace();\n    }\n    catch (ClassNotFoundException e)\n    { e.printStackTrace(); }\n    return(null);  }\n}\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://www.javaworld.com/article/2077322/core-java/core-java-sockets-programming-in-java-a-tutorial.html", "url position": 17, "segments": [{"code": "    Socket MyClient;\n    MyClient = new Socket(\"Machine name\", PortNumber);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "    Socket MyClient;\n    try {\n           MyClient = new Socket(\"Machine name\", PortNumber);\n    }\n    catch (IOException e) {\n        System.out.println(e);\n    }\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    ServerSocket MyService;\n    try {\n       MyServerice = new ServerSocket(PortNumber);\n        }\n        catch (IOException e) {\n           System.out.println(e);\n        }\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    Socket clientSocket = null;\n    try {\n       serviceSocket = MyService.accept();\n        }\n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    DataInputStream input;\n    try {\n       input = new DataInputStream(MyClient.getInputStream());\n    }\n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    DataInputStream input;\n    try {\n       input = new DataInputStream(serviceSocket.getInputStream());\n    }\n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    PrintStream output;\n    try {\n       output = new PrintStream(MyClient.getOutputStream());\n    }\n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    DataOutputStream output;\n    try {\n       output = new DataOutputStream(MyClient.getOutputStream());\n    }\n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    PrintStream output;\n    try {\n       output = new PrintStream(serviceSocket.getOutputStream());\n    }\n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    try {\n           output.close();\n           input.close();\n       MyClient.close();\n    } \n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    try {\n       output.close();\n       input.close();\n       serviceSocket.close();\n       MyService.close();\n    } \n    catch (IOException e) {\n       System.out.println(e);\n    }\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\nimport java.net.*;\npublic class smtpClient {\n    public static void main(String[] args) {\n// declaration section:\n// smtpClient: our client socket\n// os: output stream\n// is: input stream\n        Socket smtpSocket = null;  \n        DataOutputStream os = null;\n        DataInputStream is = null;\n// Initialization section:\n// Try to open a socket on port 25\n// Try to open input and output streams\n        try {\n            smtpSocket = new Socket(\"hostname\", 25);\n            os = new DataOutputStream(smtpSocket.getOutputStream());\n            is = new DataInputStream(smtpSocket.getInputStream());\n        } catch (UnknownHostException e) {\n            System.err.println(\"Don't know about host: hostname\");\n        } catch (IOException e) {\n            System.err.println(\"Couldn't get I/O for the connection to: hostname\");\n        }\n// If everything has been initialized then we want to write some data\n// to the socket we have opened a connection to on port 25\n    if (smtpSocket != null && os != null && is != null) {\n            try {\n// The capital string before each colon has a special meaning to SMTP\n// you may want to read the SMTP specification, RFC1822/3\n        os.writeBytes(\"HELO\\n\");    \n                os.writeBytes(\"MAIL From: k3is@fundy.csd.unbsj.ca\\n\");\n                os.writeBytes(\"RCPT To: k3is@fundy.csd.unbsj.ca\\n\");\n                os.writeBytes(\"DATA\\n\");\n                os.writeBytes(\"From: k3is@fundy.csd.unbsj.ca\\n\");\n                os.writeBytes(\"Subject: testing\\n\");\n                os.writeBytes(\"Hi there\\n\"); // message body\n                os.writeBytes(\"\\n.\\n\");\n        os.writeBytes(\"QUIT\");\n// keep on reading from/to the socket till we receive the \"Ok\" from SMTP,\n// once we received that then we want to break.\n                String responseLine;\n                while ((responseLine = is.readLine()) != null) {\n                    System.out.println(\"Server: \" + responseLine);\n                    if (responseLine.indexOf(\"Ok\") != -1) {\n                      break;\n                    }\n                }\n// clean up:\n// close the output stream\n// close the input stream\n// close the socket\n        os.close();\n                is.close();\n                smtpSocket.close();   \n            } catch (UnknownHostException e) {\n                System.err.println(\"Trying to connect to unknown host: \" + e);\n            } catch (IOException e) {\n                System.err.println(\"IOException:  \" + e);\n            }\n        }\n    }           \n}\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "http://www.jibble.org/wake-on-lan/", "url position": 21, "segments": [{"code": "    Physical Address. . . . . . . . . : 00-0E-62-09-23-4B", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "00:0E:62:09:23:4B\n00-0E-62-09-23-4B\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "% javac *.java", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "% java WakeOnLan\nUsage: java WakeOnLan  \nExample: java WakeOnLan 192.168.0.255 00:0E:62:09:23:4B\nExample: java WakeOnLan 192.168.0.255 00-0E-62-09-23-4B", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "% java WakeOnLan 192.168.0.255 00-0E-62-09-23-4B\nWake-on-LAN packet sent.", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "https://blog.cloudflare.com/how-to-receive-a-million-packets/", "url position": 23, "segments": [{"code": "receiver$ iptables -I INPUT 1 -p udp --dport 4321 -j ACCEPT\nreceiver$ iptables -t raw -I PREROUTING 1 -p udp --dport 4321 -j NOTRACK\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "receiver$ for i in `seq 1 20`; do \\\n              ip addr add 192.168.254.$i/24 dev eth2; \\\n          done\nsender$ ip addr add 192.168.254.30/24 dev eth3\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "fd = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfd.bind((\"0.0.0.0\", 65400)) # select source port to reduce nondeterminism\nfd.connect((\"192.168.254.1\", 4321))\nwhile True:\n    fd.sendmmsg([\"\\x00\" * 32] * 1024)\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "fd = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nfd.bind((\"0.0.0.0\", 4321))\nwhile True:\n    packets = [None] * 1024\n    fd.recvmmsg(packets, MSG_WAITFORONE)\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "sender$ ./udpsender 192.168.254.1:4321\nreceiver$ ./udpreceiver1 0.0.0.0:4321\n  0.352M pps  10.730MiB /  90.010Mb\n  0.284M pps   8.655MiB /  72.603Mb\n  0.262M pps   7.991MiB /  67.033Mb\n  0.199M pps   6.081MiB /  51.013Mb\n  0.195M pps   5.956MiB /  49.966Mb\n  0.199M pps   6.060MiB /  50.836Mb\n  0.200M pps   6.097MiB /  51.147Mb\n  0.197M pps   6.021MiB /  50.509Mb\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "sender$ taskset -c 1 ./udpsender 192.168.254.1:4321\nreceiver$ taskset -c 1 ./udpreceiver1 0.0.0.0:4321\n  0.362M pps  11.058MiB /  92.760Mb\n  0.374M pps  11.411MiB /  95.723Mb\n  0.369M pps  11.252MiB /  94.389Mb\n  0.370M pps  11.289MiB /  94.696Mb\n  0.365M pps  11.152MiB /  93.552Mb\n  0.360M pps  10.971MiB /  92.033Mb\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "sender$ taskset -c 1,2 ./udpsender \\\n            192.168.254.1:4321 192.168.254.1:4321\nreceiver$ taskset -c 1 ./udpreceiver1 0.0.0.0:4321\n  0.349M pps  10.651MiB /  89.343Mb\n  0.354M pps  10.815MiB /  90.724Mb\n  0.354M pps  10.806MiB /  90.646Mb\n  0.354M pps  10.811MiB /  90.690Mb\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "receiver$ watch 'sudo ethtool -S eth2 |grep rx'\n     rx_nodesc_drop_cnt:    451.3k/s\n     rx-0.rx_packets:     8.0/s\n     rx-1.rx_packets:     0.0/s\n     rx-2.rx_packets:     0.0/s\n     rx-3.rx_packets:     0.5/s\n     rx-4.rx_packets:  355.2k/s\n     rx-5.rx_packets:     0.0/s\n     rx-6.rx_packets:     0.0/s\n     rx-7.rx_packets:     0.5/s\n     rx-8.rx_packets:     0.0/s\n     rx-9.rx_packets:     0.0/s\n     rx-10.rx_packets:    0.0/s\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "RX_queue_number = hash('192.168.254.30', '192.168.254.1', 65400, 4321) % number_of_queues\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "receiver$ ethtool -n eth2 rx-flow-hash udp4\nUDP over IPV4 flows use these fields for computing Hash flow key:\nIP SA\nIP DA\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "RX_queue_number = hash('192.168.254.30', '192.168.254.1') % number_of_queues\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "receiver$ ethtool -N eth2 rx-flow-hash udp4 sdfn\nCannot change RX network flow hashing options: Operation not supported\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "sender$ taskset -c 1,2 ./udpsender 192.168.254.1:4321 192.168.254.2:4321\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "receiver$ watch 'sudo ethtool -S eth2 |grep rx'\n     rx-0.rx_packets:     8.0/s\n     rx-1.rx_packets:     0.0/s\n     rx-2.rx_packets:     0.0/s\n     rx-3.rx_packets:  355.2k/s\n     rx-4.rx_packets:     0.5/s\n     rx-5.rx_packets:  297.0k/s\n     rx-6.rx_packets:     0.0/s\n     rx-7.rx_packets:     0.5/s\n     rx-8.rx_packets:     0.0/s\n     rx-9.rx_packets:     0.0/s\n     rx-10.rx_packets:    0.0/s\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "receiver$ taskset -c 1 ./udpreceiver1 0.0.0.0:4321\n  0.609M pps  18.599MiB / 156.019Mb\n  0.657M pps  20.039MiB / 168.102Mb\n  0.649M pps  19.803MiB / 166.120Mb\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "receiver$ watch 'netstat -s --udp'\nUdp:\n      437.0k/s packets received\n        0.0/s packets to unknown port received.\n      386.9k/s packet receive errors\n        0.0/s packets sent\n    RcvbufErrors:  123.8k/s\n    SndbufErrors: 0\n    InCsumErrors: 0\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "sender$ taskset -c 1,2 ./udpsender 192.168.254.1:4321 192.168.254.2:4321\nreceiver$ taskset -c 1,2 ./udpreceiver1 0.0.0.0:4321 2\n  0.495M pps  15.108MiB / 126.733Mb\n  0.480M pps  14.636MiB / 122.775Mb\n  0.461M pps  14.071MiB / 118.038Mb\n  0.486M pps  14.820MiB / 124.322Mb\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "receiver$ taskset -c 1,2,3,4 ./udpreceiver1 0.0.0.0:4321 4 1\n  1.114M pps  34.007MiB / 285.271Mb\n  1.147M pps  34.990MiB / 293.518Mb\n  1.126M pps  34.374MiB / 288.354Mb\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "https://demey.io/network-discovery-using-udp-broadcast/", "url position": 22, "segments": [{"code": "public class DiscoveryThread implements Runnable {\n\n  @Override\n  public void run() {\n  }\n\n  public static DiscoveryThread getInstance() {\n    return DiscoveryThreadHolder.INSTANCE;\n  }\n\n  private static class DiscoveryThreadHolder {\n\n    private static final DiscoveryThread INSTANCE = new DiscoveryThread();\n  }\n\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "DatagramSocket socket;\n\n  @Override\n  public void run() {\n    try {\n      //Keep a socket open to listen to all the UDP trafic that is destined for this port\n      socket = new DatagramSocket(8888, InetAddress.getByName(\"0.0.0.0\"));\n      socket.setBroadcast(true);\n\n      while (true) {\n        System.out.println(getClass().getName() + \">>>Ready to receive broadcast packets!\");\n\n        //Receive a packet\n        byte[] recvBuf = new byte[15000];\n        DatagramPacket packet = new DatagramPacket(recvBuf, recvBuf.length);\n        socket.receive(packet);\n\n        //Packet received\n        System.out.println(getClass().getName() + \">>>Discovery packet received from: \" + packet.getAddress().getHostAddress());\n        System.out.println(getClass().getName() + \">>>Packet received; data: \" + new String(packet.getData()));\n\n        //See if the packet holds the right command (message)\n        String message = new String(packet.getData()).trim();\n        if (message.equals(\"DISCOVER_FUIFSERVER_REQUEST\")) {\n          byte[] sendData = \"DISCOVER_FUIFSERVER_RESPONSE\".getBytes();\n\n          //Send a response\n          DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, packet.getAddress(), packet.getPort());\n          socket.send(sendPacket);\n\n          System.out.println(getClass().getName() + \">>>Sent packet to: \" + sendPacket.getAddress().getHostAddress());\n        }\n      }\n    } catch (IOException ex) {\n      Logger.getLogger(DiscoveryThread.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "        // Find the server using UDP broadcast\n        try {\n          //Open a random port to send the package\n          c = new DatagramSocket();\n          c.setBroadcast(true);\n\n          byte[] sendData = \"DISCOVER_FUIFSERVER_REQUEST\".getBytes();\n\n          //Try the 255.255.255.255 first\n          try {\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName(\"255.255.255.255\"), 8888);\n            c.send(sendPacket);\n            System.out.println(getClass().getName() + \">>> Request packet sent to: 255.255.255.255 (DEFAULT)\");\n          } catch (Exception e) {\n          }\n\n          // Broadcast the message over all the network interfaces\n          Enumeration interfaces = NetworkInterface.getNetworkInterfaces();\n          while (interfaces.hasMoreElements()) {\n            NetworkInterface networkInterface = interfaces.nextElement();\n\n            if (networkInterface.isLoopback() || !networkInterface.isUp()) {\n              continue; // Don't want to broadcast to the loopback interface\n            }\n\n            for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n              InetAddress broadcast = interfaceAddress.getBroadcast();\n              if (broadcast == null) {\n                continue;\n              }\n\n              // Send the broadcast package!\n              try {\n                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, broadcast, 8888);\n                c.send(sendPacket);\n              } catch (Exception e) {\n              }\n\n              System.out.println(getClass().getName() + \">>> Request packet sent to: \" + broadcast.getHostAddress() + \"; Interface: \" + networkInterface.getDisplayName());\n            }\n          }\n\n          System.out.println(getClass().getName() + \">>> Done looping over all network interfaces. Now waiting for a reply!\");\n\n          //Wait for a response\n          byte[] recvBuf = new byte[15000];\n          DatagramPacket receivePacket = new DatagramPacket(recvBuf, recvBuf.length);\n          c.receive(receivePacket);\n\n          //We have a response\n          System.out.println(getClass().getName() + \">>> Broadcast response from server: \" + receivePacket.getAddress().getHostAddress());\n\n          //Check if the message is correct\n          String message = new String(receivePacket.getData()).trim();\n          if (message.equals(\"DISCOVER_FUIFSERVER_RESPONSE\")) {\n            //DO SOMETHING WITH THE SERVER'S IP (for example, store it in your controller)\n            Controller_Base.setServerIp(receivePacket.getAddress());\n          }\n\n          //Close the port!\n          c.close();\n        } catch (IOException ex) {\n          Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);\n        }\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "Thread discoveryThread = new Thread(DiscoveryThread.getInstance());\ndiscoveryThread.start();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://wiki.python.org/moin/UdpCommunication", "url position": 20, "segments": [{"code": "   1 import socket\n\nUDP_IP = \"127.0.0.1\"\nUDP_PORT = 5005\nMESSAGE = \"Hello, World!\"\n\nprint \"UDP target IP:\", UDP_IP\nprint \"UDP target port:\", UDP_PORT\nprint \"message:\", MESSAGE\n\nsock = socket.socket(socket.AF_INET, # Internet\n                     socket.SOCK_DGRAM) # UDP\nsock.sendto(MESSAGE, (UDP_IP, UDP_PORT))\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 import socket\n\nUDP_IP = \"127.0.0.1\"\nUDP_PORT = 5005\n\nsock = socket.socket(socket.AF_INET, # Internet\n                     socket.SOCK_DGRAM) # UDP\nsock.bind((UDP_IP, UDP_PORT))\n\nwhile True:\n    data, addr = sock.recvfrom(1024) # buffer size is 1024 bytes\n    print \"received message:\", data\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 import socket\nimport struct\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nsock.bind(('', 4242))\n# wrong: mreq = struct.pack(\"sl\", socket.inet_aton(\"224.51.105.104\"), socket.INADDR_ANY)\nmreq = struct.pack(\"=4sl\", socket.inet_aton(\"224.51.105.104\"), socket.INADDR_ANY)\n\nsock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n\nwhile True:\n  print sock.recv(10240)\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 import socket\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\nsock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2)\nsock.sendto(\"robot\", (\"239.192.0.100\", 1000))\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 # UDP multicast examples, Hugo Vincent, 2005-05-14.\nimport socket\n\ndef send(data, port=50000, addr='239.192.1.100'):\n        \"\"\"send(data[, port[, addr]]) - multicasts a UDP datagram.\"\"\"\n        # Create the socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        # Make the socket multicast-aware, and set TTL.\n        s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 20) # Change TTL (=20) to suit\n        # Send the data\n        s.sendto(data, (addr, port))\n\ndef recv(port=50000, addr=\"239.192.1.100\", buf_size=1024):\n        \"\"\"recv([port[, addr[,buf_size]]]) - waits for a datagram and returns the data.\"\"\"\n\n        # Create the socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n        # Set some options to make it multicast-friendly\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        except AttributeError:\n                pass # Some systems don't support SO_REUSEPORT\n        s.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_TTL, 20)\n        s.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_LOOP, 1)\n\n        # Bind to the port\n        s.bind(('', port))\n\n        # Set some more multicast options\n        intf = socket.gethostbyname(socket.gethostname())\n        s.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_IF, socket.inet_aton(intf))\n        s.setsockopt(socket.SOL_IP, socket.IP_ADD_MEMBERSHIP, socket.inet_aton(addr) + socket.inet_aton(intf))\n\n        # Receive the data, then unregister multicast receive membership, then close the port\n        data, sender_addr = s.recvfrom(buf_size)\n        s.setsockopt(socket.SOL_IP, socket.IP_DROP_MEMBERSHIP, socket.inet_aton(addr) + socket.inet_aton('0.0.0.0'))\n        s.close()\n        return data\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 import UDP\n\nsock = UDP.MulticastListener(\"239.192.0.100\", 1000)  # Listen on port 1000\nprint sock.recv(100)\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 import UDP\n\nUDP.send(\"Hello, world!\", \"239.192.0.100\", 1000)\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "   1 class McastSocket(socket.socket):\n  def __init__(self, local_port, reuse=False):\n    socket.socket.__init__(self, socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n    if(reuse):\n      self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n      if hasattr(socket, \"SO_REUSEPORT\"):\n        self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n    self.bind(('', local_port))\n  def mcast_add(self, addr, iface):\n    sock.setsockopt(\n        socket.IPPROTO_IP,\n        socket.IP_ADD_MEMBERSHIP,\n        socket.inet_aton(mcast_addr) + socket.inet_aton(mcast_iface))\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "   1 sock = McastSocket(local_port=12345, reuse=1)\nsock.mcast_add('239.192.9.9', '127.0.0.1')\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "http://cs.lth.se/edaf65/laborationer/laboration-5-udp-multicas/", "url position": 28, "segments": [{"code": "\r\n        while (true) {\r\n          receive(client, command, parameters);\r\n          switch (command) {\r\n          case commandA:\r\n            result = doCommandA(parameters);\r\n            break;\r\n          case commandB:\r\n            result = doCommandB(parameters);\r\n            break;\r\n          case commandC:\r\n            result = doCommandC(parameters);\r\n            break;\r\n          default:\r\n          }\r\n          send(client, result);\r\n        }\r\n        ", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://www.mathworks.com/matlabcentral/fileexchange/24525-a-simple-udp-communications-application?focused=5148131&tab=function&requestedDomain=true", "url position": 26, "segments": []},
{"query": "How to send packet via UDP", "url": "https://cycling74.com/forums/sending-raw-bytes-with-net-udp-send", "url position": 25, "segments": []},
{"query": "How to send packet via UDP", "url": "https://en.wikipedia.org/wiki/Network_socket", "url position": 33, "segments": [{"code": "\nSocket socket = getSocket(type = \"TCP\")\nconnect(socket, address = \"1.2.3.4\", port = \"80\")\nsend(socket, \"Hello, world!\")\nclose(socket)\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "http://stahlworks.com/dev/article-18-03-send-udp-network-text-java-simple-source-code-example.html", "url position": 32, "segments": [{"code": "\n/*\n   Example how to send UDP text in Java.\nSee also: sfk netlog.\n\n   -  copy this to a file netlog.java\n   -  javac netlog.java\n-  run: dview -net\n      under Linux/Mac: wine dview.exe -net -linux &\n   -  java netlog\n*/\n\nimport java.io.*;\nimport java.net.*;\n\npublic class netlog\n{\n   public static DatagramSocket clSocket = null;\n   public static InetAddress clAddress = null;\n   public static int iClPort = -1;\n   static int iClRequest = 1;\n\n   public static void init(String sHost, int iPort) throws Throwable\n   {\n      clAddress = InetAddress.getByName(sHost);\n      iClPort = iPort;\n      clSocket = new DatagramSocket();\n   }\n\n   public static void log(String sTextIn) throws Throwable\n   {\n      String sText   = sTextIn+\"\\n\";\n\n      // change all [red] to compact color codes \\x1Fr\n      byte[] abData1 = sText.getBytes();\n      int    iSize1  = abData1.length;\n      byte[] abData2 = new byte[iSize1+100];\n\n      // keep 100 bytes space for header\n      int i2=100;\n      for (int i1=0; i1<iSize1;)\n      {\n         if (abData1[i1]=='[') {\n            i1++;\n            if (i1>=iSize1)\n               break;\n            abData2[i2++] = (byte)0x1F;\n            abData2[i2++] = abData1[i1++];\n            while (i1<iSize1 && abData1[i1]!=']')\n               i1++;\n            if (i1<iSize1)\n               i1++;\n         } else {\n            abData2[i2++] = abData1[i1++];\n         }\n      }\n      int iTextSize = i2-100;\n\n      // add sfktxt header before text\n      String sHead = \":sfktxt:v100,req\"+iClRequest+\",cs1\\n\\n\";\n      iClRequest++;\n      byte abHead[] = sHead.getBytes();\n      int iHeadLen  = abHead.length;\n      for (int i=0; i<iHeadLen; i++)\n         abData2[100-iHeadLen+i] = abHead[i];\n      int iStartOff = 100-iHeadLen;\n      int iFullSize = iHeadLen+iTextSize;\n\n      DatagramPacket packet = new DatagramPacket(abData2,\n         iStartOff, iFullSize, clAddress, iClPort);\n\n      clSocket.send(packet);\n   }\n\n   public static void main(String args[]) throws Throwable\n   {\n      netlog.init(\"localhost\", 21323);\n\n      netlog.log(\"[Red]Foo[def] and [Blue]bar[def] went \"\n                +\"to the [Green]zoo[def].\");\n   }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "http://www.java-gaming.org/index.php?topic=36130.0", "url position": 31, "segments": [{"code": "class Connection{ String NAME; InetAddress IP; int PORT;   DatagramSocket DSOCKET; boolean ENABLED = true; public Connection(InetAddress ip, int port,String name) {  IP = ip;  PORT = port;  NAME = name;  try  {   DSOCKET = new DatagramSocket();   receive();   send();  }catch(Exception e){} } public void send() {  Thread sendthread = new Thread()  {   public void run()   {    try    {     byte[] sendData;     while(ENABLED)     {       try       {         String message = \"Hello there!\";         sendData = new byte[message.getBytes().length];         sendData = message.getBytes();         DatagramPacket sendPacket = new DatagramPacket(sendData,sendData.length,IP,PORT);         DSOCKET.send(sendPacket);       }catch(Exception e){System.out.println(\"NetSendError: \" + e);}     }     DSOCKET.close();    }catch(Exception e){}   }   };  sendthread.start(); } public void receive() {  Thread thread = new Thread()  {   public void run()   {    byte[] receiveData;    try    {     DSOCKET.setSoTimeout(1000);     while(ENABLED)     {      receiveData = new byte[4096];      DatagramPacket receivePacket = new DatagramPacket(receiveData,receiveData.length);      DSOCKET.receive(receivePacket);      String message = new String(receivePacket.getData());      System.out.println(\"CLIENT received message: \" + message);     }    }catch(Exception e){}   }  };  thread.start(); }}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.util.Vector;import java.net.*;public class Network{ boolean HOSTING = false; public static Vector<Connection> CONNECTIONS = new Vector<Connection>();  public static void main(String[] args) {  starthost();  try  {   InetAddress ip = InetAddress.getByName(\"193.150.248.134\");   connect(ip,1234);  }catch(Exception e){} } //called by host when starting a hosted session public static void starthost() {  boolean HOSTING = true;  Thread thread = new Thread()  {   public void run()   {    try    {     DatagramSocket socket = new DatagramSocket(1234);     byte[] receiveData;     try     {      while(HOSTING)      {       try       {        receiveData = new byte[4096];        DatagramPacket receivePacket = new DatagramPacket(receiveData,receiveData.length);        socket.receive(receivePacket);        int ii = CONNECTIONS.size();        boolean exists = false;        for(int i=0;i<ii;i++)        {         if(CONNECTIONS.get(i).IP.equals(receivePacket.getAddress()))         {          exists = true;          break;         }        }        if(!exists)        {         //if this is the first time the client sends, create a connection for sending         CONNECTIONS.add(new Connection(receivePacket.getAddress(),1234,\"HOST\"));        }        else        {         //if the client exists in the CONNECTION list, print out the received message         String message = new String(receivePacket.getData());         System.out.println(\"HOST received message: \" + message);        }       }catch(Exception e){System.out.println(\"NetStartHostError: \" + e);}      }      socket.close();     }catch(Exception ee){}    }catch(Exception e){}   }  };  thread.start(); } //called by clients when connecting to host public static void connect(InetAddress ip,int port) {  CONNECTIONS.add(new Connection(ip,port,\"CLIENT\")); }}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://www.hostedgraphite.com/docs/languageguide/lg_java.html", "url position": 36, "segments": [{"code": "java.security.Security.setProperty(\"networkaddress.cache.ttl\" , \"60\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.io.DataOutputStream;\nimport java.net.Socket;\n\n...\nSocket conn          = new Socket(\"YOUR-UID.carbon.hostedgraphite.com\", 2003);\nDataOutputStream dos = new DataOutputStream(conn.getOutputStream());\ndos.writeBytes(\"YOUR-API-KEY.foo 1.2\\n\");\nconn.close();\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\n\n...\nDatagramSocket sock   = new DatagramSocket();\nInetAddress addr      = InetAddress.getByName(\"YOUR-UID.carbon.hostedgraphite.com\");\nbyte[] message        = \"YOUR-API-KEY.foo 1.2\\n\".getBytes();\nDatagramPacket packet = new DatagramPacket(message, message.length, addr, 2003);\nsock.send(packet);\nsock.close();\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.util.Base64;\nimport javax.net.ssl.HttpsURLConnection;\nimport java.io.*;\nimport java.net.URL;\n\n// Assumes the reader will try/catch the appropriate exceptions, and clean up\n// The connection when they're done with it!\n\nString data = \"foo 1.2\";\nURL url     = new URL(\"https://www.hostedgraphite.com/api/v1/sink\");\nHttpsURLConnection connection = (HttpsURLConnection)url.openConnection();\n\nString key        = \"YOUR_API_KEY\";\nString authHeader = Base64.getEncoder().encodeToString(key.getBytes());\n\nconnection.setRequestProperty(\"Authorization\", \"Basic \" + authHeader);\nconnection.setRequestMethod(\"POST\");\nconnection.setRequestProperty(\"Content-Length\", String.valueOf(data.getBytes().length));\nconnection.setUseCaches (false);\nconnection.setDoInput(true);\nconnection.setDoOutput(true);\n\nOutputStream wr = connection.getOutputStream();\nwr.write(data.getBytes(\"UTF-8\"));\nwr.flush();\nwr.close();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "URLFetchService fetcher= URLFetchServiceFactory.getURLFetchService();\nString data = \"foo 1.2\";\nString key  = \"YOUR_API_KEY\";\n\nString authHeaderString = \"Basic \" + Base64.encodeBase64String(key).getBytes(\"ISO-8859-1\");\nHTTPHeader authHeader   = new HTTPHeader(\"Authorization\", authHeaderString);\n\nHTTPRequest request = new HTTPRequest(\"https://www.hostedgraphite.com/api/v1/sink\", HTTPMethod.POST);\nrequest.getFetchOptions().setDeadline(10);\nrequest.setHeader(authHeader);\n\nrequest.setPayload(data.getBytes());\nHTTPResponse response = fetcher.fetch(request);\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://michieldemey.be/blog/network-discovery-using-udp-broadcast/", "url position": 24, "segments": [{"code": "public class DiscoveryThread implements Runnable {\r\n\r\n  @Override\r\n  public void run() {\r\n  }\r\n\r\n  public static DiscoveryThread getInstance() {\r\n    return DiscoveryThreadHolder.INSTANCE;\r\n  }\r\n\r\n  private static class DiscoveryThreadHolder {\r\n\r\n    private static final DiscoveryThread INSTANCE = new DiscoveryThread();\r\n  }\r\n\r\n}\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "DatagramSocket socket;\r\n\r\n  @Override\r\n  public void run() {\r\n    try {\r\n      //Keep a socket open to listen to all the UDP trafic that is destined for this port\r\n      socket = new DatagramSocket(8888, InetAddress.getByName(\"0.0.0.0\"));\r\n      socket.setBroadcast(true);\r\n\r\n      while (true) {\r\n        System.out.println(getClass().getName() + \">>>Ready to receive broadcast packets!\");\r\n\r\n        //Receive a packet\r\n        byte[] recvBuf = new byte[15000];\r\n        DatagramPacket packet = new DatagramPacket(recvBuf, recvBuf.length);\r\n        socket.receive(packet);\r\n\r\n        //Packet received\r\n        System.out.println(getClass().getName() + \">>>Discovery packet received from: \" + packet.getAddress().getHostAddress());\r\n        System.out.println(getClass().getName() + \">>>Packet received; data: \" + new String(packet.getData()));\r\n\r\n        //See if the packet holds the right command (message)\r\n        String message = new String(packet.getData()).trim();\r\n        if (message.equals(\"DISCOVER_FUIFSERVER_REQUEST\")) {\r\n          byte[] sendData = \"DISCOVER_FUIFSERVER_RESPONSE\".getBytes();\r\n\r\n          //Send a response\r\n          DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, packet.getAddress(), packet.getPort());\r\n          socket.send(sendPacket);\r\n\r\n          System.out.println(getClass().getName() + \">>>Sent packet to: \" + sendPacket.getAddress().getHostAddress());\r\n        }\r\n      }\r\n    } catch (IOException ex) {\r\n      Logger.getLogger(DiscoveryThread.class.getName()).log(Level.SEVERE, null, ex);\r\n    }\r\n  }", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "        // Find the server using UDP broadcast\r\n        try {\r\n          //Open a random port to send the package\r\n          c = new DatagramSocket();\r\n          c.setBroadcast(true);\r\n\r\n          byte[] sendData = \"DISCOVER_FUIFSERVER_REQUEST\".getBytes();\r\n\r\n          //Try the 255.255.255.255 first\r\n          try {\r\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName(\"255.255.255.255\"), 8888);\r\n            c.send(sendPacket);\r\n            System.out.println(getClass().getName() + \">>> Request packet sent to: 255.255.255.255 (DEFAULT)\");\r\n          } catch (Exception e) {\r\n          }\r\n\r\n          // Broadcast the message over all the network interfaces\r\n          Enumeration interfaces = NetworkInterface.getNetworkInterfaces();\r\n          while (interfaces.hasMoreElements()) {\r\n            NetworkInterface networkInterface = interfaces.nextElement();\r\n\r\n            if (networkInterface.isLoopback() || !networkInterface.isUp()) {\r\n              continue; // Don't want to broadcast to the loopback interface\r\n            }\r\n\r\n            for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\r\n              InetAddress broadcast = interfaceAddress.getBroadcast();\r\n              if (broadcast == null) {\r\n                continue;\r\n              }\r\n\r\n              // Send the broadcast package!\r\n              try {\r\n                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, broadcast, 8888);\r\n                c.send(sendPacket);\r\n              } catch (Exception e) {\r\n              }\r\n\r\n              System.out.println(getClass().getName() + \">>> Request packet sent to: \" + broadcast.getHostAddress() + \"; Interface: \" + networkInterface.getDisplayName());\r\n            }\r\n          }\r\n\r\n          System.out.println(getClass().getName() + \">>> Done looping over all network interfaces. Now waiting for a reply!\");\r\n\r\n          //Wait for a response\r\n          byte[] recvBuf = new byte[15000];\r\n          DatagramPacket receivePacket = new DatagramPacket(recvBuf, recvBuf.length);\r\n          c.receive(receivePacket);\r\n\r\n          //We have a response\r\n          System.out.println(getClass().getName() + \">>> Broadcast response from server: \" + receivePacket.getAddress().getHostAddress());\r\n\r\n          //Check if the message is correct\r\n          String message = new String(receivePacket.getData()).trim();\r\n          if (message.equals(\"DISCOVER_FUIFSERVER_RESPONSE\")) {\r\n            //DO SOMETHING WITH THE SERVER'S IP (for example, store it in your controller)\r\n            Controller_Base.setServerIp(receivePacket.getAddress());\r\n          }\r\n\r\n          //Close the port!\r\n          c.close();\r\n        } catch (IOException ex) {\r\n          Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);\r\n        }", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "Thread discoveryThread = new Thread(DiscoveryThread.getInstance());\r\n    discoveryThread.start();", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://community.hds.com/community/products-and-solutions/pentaho/blog/2018/01/04/creating-pdi-transformation-steps-for-sending-udp-packets", "url position": 35, "segments": []},
{"query": "How to send packet via UDP", "url": "http://www.coderpanda.com/java-socket-programming-transferring-java-object-through-socket-using-udp/", "url position": 34, "segments": []},
{"query": "How to send packet via UDP", "url": "https://developer.android.com/reference/java/net/DatagramSocket.html", "url position": 38, "segments": [{"code": "\nDatagramSocket ()", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nDatagramSocket (SocketAddress bindaddr)", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nDatagramSocket (int port)", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nDatagramSocket (int port, \n                InetAddress laddr)", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nDatagramSocket (DatagramSocketImpl impl)", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid bind (SocketAddress addr)", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid close ()", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid connect (InetAddress address, \n                int port)", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid connect (SocketAddress addr)", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid disconnect ()", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nboolean getBroadcast ()", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nDatagramChannel getChannel ()", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nInetAddress getInetAddress ()", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nInetAddress getLocalAddress ()", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint getLocalPort ()", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nSocketAddress getLocalSocketAddress ()", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint getPort ()", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint getReceiveBufferSize ()", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nSocketAddress getRemoteSocketAddress ()", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nboolean getReuseAddress ()", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint getSendBufferSize ()", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint getSoTimeout ()", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nint getTrafficClass ()", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nboolean isBound ()", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nboolean isClosed ()", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nboolean isConnected ()", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid receive (DatagramPacket p)", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid send (DatagramPacket p)", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setBroadcast (boolean on)", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setDatagramSocketImplFactory (DatagramSocketImplFactory fac)", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setReceiveBufferSize (int size)", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setReuseAddress (boolean on)", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setSendBufferSize (int size)", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setSoTimeout (int timeout)", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nvoid setTrafficClass (int tc)", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to send packet via UDP", "url": "http://www.hitcpm.com/watch?key=98a3bbe9707070c5a0b63c558d776587", "url position": 19, "segments": []},
{"query": "How to send packet via UDP", "url": "http://www.hitcpm.com/watch?key=98a3bbe9707070c5a0b63c558d776587", "url position": 29, "segments": []},
{"query": "How to send packet via UDP", "url": "http://www.romaniancoder.com/create-a-udp-client-server-in-java-using-the-producer-consumer-pattern/", "url position": 39, "segments": [{"code": "import java.io.IOException;\r\nimport java.net.*;\r\n\r\npublic class UdpUnicastServer implements Runnable {\r\n    /**\r\n     * The port where the client is listening.\r\n     */\r\n    private final int clientPort;\r\n\r\n    public UdpUnicastServer(int clientPort) {\r\n        this.clientPort = clientPort;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        /**\r\n         * Create a new server socket and bind it to a free port. I have chosen\r\n         * one in the 49152 - 65535 range, which are allocated for internal applications\r\n         */\r\n        try (DatagramSocket serverSocket = new DatagramSocket(50000)) {\r\n            // The server will generate 10000 messages and send them to the client\r\n            // Each message will be sent at a 2 ms interval\r\n            for (int i = 0; i < 10000; i++) {\r\n                String message = \"Message number \" + i;\r\n                DatagramPacket datagramPacket = new DatagramPacket(\r\n                        message.getBytes(),\r\n                        message.length(),\r\n                        InetAddress.getLocalHost(),\r\n                        clientPort\r\n                );\r\n                serverSocket.send(datagramPacket);\r\n\r\n                // Wait 2 ms before sending the next message\r\n                Thread.sleep(2);\r\n            }\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n        } catch (UnknownHostException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.IOException;\r\nimport java.net.DatagramPacket;\r\nimport java.net.DatagramSocket;\r\nimport java.net.SocketException;\r\nimport java.util.concurrent.BlockingQueue;\r\n\r\npublic class UdpUnicastClient implements Runnable {\r\n    private final int port;\r\n    private final BlockingQueue<byte[]> messageQueue;\r\n\r\n    public UdpUnicastClient(int port, BlockingQueue<byte[]> messageQueue) {\r\n        this.port = port;\r\n        this.messageQueue = messageQueue;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        /**\r\n         * Bind the client socket to the port on which you expect to\r\n         * read incoming messages\r\n         */\r\n        try (DatagramSocket clientSocket = new DatagramSocket(port)) {\r\n            // Set a timeout of 3000 ms for the client.\r\n            clientSocket.setSoTimeout(3000);\r\n            while (true) {\r\n                /**\r\n                 * Create a byte array buffer to store incoming data. If the message length\r\n                 * exceeds the length of your buffer, then the message will be truncated. To avoid this,\r\n                 * you can simply instantiate the buffer with the maximum UDP packet size, which\r\n                 * is 65506\r\n                 */\r\n                byte[] buffer = new byte[65507];\r\n                DatagramPacket datagramPacket = new DatagramPacket(buffer, 0, buffer.length);\r\n\r\n                /**\r\n                 * The receive method will wait for 3000 ms for data.\r\n                 * After that, the client will throw a timeout exception.\r\n                 */\r\n                clientSocket.receive(datagramPacket);\r\n\r\n                /**\r\n                 * Add the data contained in the datagram packet to the message\r\n                 * queue.The 'put' method will block if the message queue is full,\r\n                 * until there is space to store the new message.\r\n                 */\r\n                this.messageQueue.put(datagramPacket.getData());\r\n            }\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Timeout. Client is closing.\");\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.util.concurrent.BlockingQueue;\r\n\r\npublic class DataProcessor implements Runnable {\r\n    private final BlockingQueue<byte[]> messageQueue;\r\n\r\n    public DataProcessor(BlockingQueue<byte[]> messageQueue) {\r\n        this.messageQueue = messageQueue;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        int counter = 0;\r\n        while (true){\r\n            try {\r\n                /**\r\n                 * Try and take a message from the queue. Will block if the\r\n                 * message queue is empty, until an element becomes available.\r\n                 */\r\n                byte[] rawData = this.messageQueue.take();\r\n\r\n                /**\r\n                 * Increase message counter after processing\r\n                 */\r\n                counter++;\r\n                System.out.println(\"Data processor handled \" + counter + \" messages\");\r\n\r\n                /**\r\n                 * Simulate a 3 ms delay\r\n                 */\r\n                Thread.sleep(3);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.util.concurrent.ArrayBlockingQueue;\r\nimport java.util.concurrent.BlockingQueue;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        int port = 50001;\r\n\r\n        /**\r\n         * The initial capacity for the blocking collection needs to be fine tuned\r\n         * based on your application requirements.\r\n         */\r\n        BlockingQueue<byte[]> messageQueue = new ArrayBlockingQueue<>(1200);\r\n\r\n        UdpUnicastServer server = new UdpUnicastServer(port);\r\n        // message queue is shared between UDP client and Data Processor\r\n        UdpUnicastClient client = new UdpUnicastClient(port, messageQueue);\r\n        DataProcessor dataProcessor = new DataProcessor(messageQueue);\r\n\r\n        /**\r\n         * Execute the components as 3 different threads\r\n         */\r\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\r\n        executorService.submit(client);\r\n        executorService.submit(server);\r\n        executorService.submit(dataProcessor);\r\n    }\r\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to send packet via UDP", "url": "https://www.codeproject.com/Questions/870316/how-to-transfer-a-file-using-UDP-communication-in", "url position": 27, "segments": [{"code": "//client code\r\npublic class UDPSend {\r\nDatagramSocket clientSocket;\r\n    DatagramPacket sendPacket, receivePacket;\r\n    private InputStream inStream = null;\r\n    String checkSumValue;\r\n    public void communicate() {\r\n        byte[] sendData = new byte[1024];\r\n        byte[] receiveData = new byte[1024];\r\n        String path = \"text1.txt\", checkSumValue;\r\n        try {\r\n            FileReader fr = new FileReader(\"client.properties\");\r\n            Properties prop = new Properties();\r\n            prop.load(fr);\r\n            String serverHostname = prop.getProperty(\"ipAddress\");\r\n            int port = Integer.parseInt(prop.getProperty(\"port\"));\r\n            System.out.println(\"Host: \" + serverHostname);\r\n            System.out.println(\"Port: \" + port);\r\n//            BufferedReader inFromUser =\r\n//                    new BufferedReader(new InputStreamReader(System.in));\r\n            clientSocket = new DatagramSocket();\r\n            InetAddress ipAddress = InetAddress.getByName(serverHostname);\r\n            System.out.println(\"Attempting to connect to \" + ipAddress + \" via UDP \" + port);\r\n            checkSumValue = doMD5(path);\r\n            sendData = checkSumValue.getBytes();\r\n            sendPacket = new DatagramPacket(sendData, sendData.length, ipAddress, port);\r\n            clientSocket.send(sendPacket);\r\n            System.out.println(\"Client Checksum sent to server : \" + new String(sendPacket.getData()));\r\n//            int reply;\r\n            receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n            clientSocket.receive(receivePacket);\r\n            String res =new String(receivePacket.getData());\r\n//            reply=receivePacket.getData();\r\n//             reply=Integer.parseInt(res);\r\n            System.out.println(\"Reply: \"+ res);\r\n\r\n            if (res.equalsIgnoreCase(\"n\")) {\r\n            fileTransfer(path);\r\n            clientSocket.close();\r\n            }\r\n            else{\r\n            Thread.sleep(2000);\r\n            clientSocket.close();\r\n            }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception :\" + ex.getMessage());\r\n        }\r\n    }\r\n\r\n    public String doMD5(String path) {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            FileInputStream fis = new FileInputStream(path);\r\n\r\n            byte[] dataBytes = new byte[1024];\r\n\r\n            int nread = 0;\r\n            while ((nread = fis.read(dataBytes)) != -1) {\r\n                md.update(dataBytes, 0, nread);\r\n            };\r\n            byte[] mdbytes = md.digest();\r\n            StringBuffer sb = new StringBuffer();\r\n            for (int i = 0; i < mdbytes.length; i++) {\r\n                sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));\r\n            }\r\n            checkSumValue = sb.toString();\r\n            System.out.println(\"Digest(in hex format):: \" + checkSumValue);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception : \" + ex.getMessage());\r\n        }\r\n        return checkSumValue;\r\n    }\r\n    public void fileTransfer(String path){\r\n        try {\r\n            FileInputStream fstream = new FileInputStream(\"text1.txt\");\r\n            DataInputStream in = new DataInputStream(fstream);\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\r\n\r\n            File file = new File(\"text1.txt\");\r\n            FileInputStream fis = new FileInputStream(file);\r\n            byte[] fsize = new byte[(int) file.length()];\r\n            int size = fis.read(fsize);\r\n            System.out.println(\"Size = \" + size);\r\n            InetAddress addr = InetAddress.getByName(\"localhost\");\r\n            byte[] buf = new byte[10000];\r\n            String DataLine;\r\n            while ((DataLine = br.readLine()) != null) {\r\n//                DatagramPacket packet = new DatagramPacket(DataLine.getBytes(), DataLine.length(), addr, 4555);\r\n                receivePacket=new DatagramPacket(DataLine.getBytes(), DataLine.length());\r\n                System.out.println(DataLine);\r\n                DatagramSocket socket = new DatagramSocket();\r\n                socket.send(receivePacket);\r\n                System.out.println(\"Sent Packet: \"+new String(receivePacket.getData()));\r\n            }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception in file: \" + ex.getMessage());\r\n        }\r\n    }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "//server code\r\npublic class UDPReceive {\r\n\r\n    String checkSumValue;\r\n    DatagramSocket serverSocket;\r\n    DatagramPacket receivePacket, sendpacket;\r\n    private OutputStream ouStream = null;\r\n\r\n    public void communicate() {\r\n        try {\r\n            String path = \"text1.txt\";\r\n            FileReader fr = new FileReader(\"server.properties\");\r\n            Properties prop = new Properties();\r\n            prop.load(fr);\r\n            int port = Integer.parseInt(prop.getProperty(\"port\"));\r\n            serverSocket = new DatagramSocket(port);\r\n            byte[] receiveData = new byte[1024];\r\n            byte[] sendData = new byte[1024];\r\n            receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n            serverSocket.receive(receivePacket);\r\n            InetAddress IPAddress = receivePacket.getAddress();\r\n            System.out.println(\"Waiting for datagram packet. . .\\n\");\r\n            checkSumValue = new String(doMD5(path));\r\n            String msg = new String(receivePacket.getData());\r\n            System.out.println(\"Checksum of Client: \" + msg);\r\n            if (checkSumValue.equalsIgnoreCase(msg)) {\r\n                System.out.println(\"The file didn't update\");\r\n                String reply = \"y\";\r\n//                String r=new String(reply.);\r\n//                ouStream.write(reply);\r\n                sendData = reply.getBytes();\r\n                sendpacket = new DatagramPacket(sendData, sendData.length);\r\n                serverSocket.send(sendpacket);\r\n                System.out.println(\"Reply :\" + new String(sendData));\r\n            } else {\r\n                String reply = \"n\";\r\n//                ouStream.write(reply);\r\n                sendData = reply.getBytes();\r\n                System.out.println(\"Reply :\" + new String(sendData));\r\n                sendpacket = new DatagramPacket(sendData, sendData.length);\r\n                serverSocket.send(sendpacket);\r\n                System.out.println(\"The file updated\");\r\n                fileTransfer(path);\r\n            }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error msg: \" + ex.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public String doMD5(String path) {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            FileInputStream fis = new FileInputStream(path);\r\n            byte[] dataBytes = new byte[1024];\r\n            int nread = 0;\r\n            while ((nread = fis.read(dataBytes)) != -1) {\r\n                md.update(dataBytes, 0, nread);\r\n            };\r\n            byte[] mdbytes = md.digest();\r\n            StringBuffer sb = new StringBuffer();\r\n            for (int i = 0; i < mdbytes.length; i++) {\r\n                sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));\r\n            }\r\n            checkSumValue = sb.toString();\r\n            System.out.println(\"Digest(in hex format):: \" + checkSumValue);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error msg: \" + ex);\r\n        }\r\n        return checkSumValue;\r\n    }\r\n\r\n    public void fileTransfer(String path) {\r\n        try {\r\n            FileWriter fw = new FileWriter(new File(\r\n                    \"text1.txt\"));\r\n//            fw.write(\"hi\");\r\n//            DatagramSocket Socket = new DatagramSocket(port);\r\n            byte[] receiveData = new byte[1000000];\r\n            while (receiveData != null) {\r\n                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n                serverSocket.receive(receivePacket);\r\n                String sentence = new String(receivePacket.getData());\r\n                fw.write(sentence.trim());\r\n                fw.flush();\r\n                System.out.printf(\"RECEIVED: %s \", new String(receivePacket.getData()));\r\n            }\r\n\r\n            fw.flush();\r\n            fw.close();\r\n            serverSocket.close();\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n        }", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]}
]