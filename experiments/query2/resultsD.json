{
   "num_snippets_per_cluster": [
      11,
      9,
      5,
      5,
      4
   ],
   "num_clusters": 5,
   "clusters": [
      {
         "cluster_snippets": [
            {
               "Cluster": 0,
               "Code": "//Object Output\nimport java.net.*;\nimport java.io.*;\n//The sample class to be sent: Factory\nclass Factory implements Serializable\n{  private void writeObject(ObjectOutputStream out) throws IOException  \n{    out.defaultWriteObject();  }\n  private void readObject(ObjectInputStream in)\n               throws IOException, ClassNotFoundException  \n{    in.defaultReadObject();  }\n}\npublic class ShowObjOutput\n{  public static void main(String[] arg)  \n{    try    \n{      ObjectOutputStream os;\n      Socket sock = new Socket(\"panda.cs.uno.edu\", 6000);\n //panda is the host name\n      Factory fa = new Factory();\n      os = new ObjectOutputStream( new\n             BufferedOutputStream(sock.getOutputStream()));\n      os.writeObject(fa);\n    }\n    catch (IOException ex)\n    {}\n  }\n}\n",
               "LOC": 27,
               "Url": "https://www.javaworld.com/article/2077539/learn-java/java-tip-40--object-transport-via-datagram-packets.html",
               "Score": 1.0,
               "API_Weights": 3.432592703,
               "API_Qualified_Names": {
                  "ObjectOutputStream.defaultWriteObject": "java.io.ObjectOutputStream.defaultWriteObject",
                  "ObjectInputStream.defaultReadObject": "java.io.ObjectInputStream.defaultReadObject",
                  "Socket.__init__": "java.net.Socket.__init__",
                  "Factory.__init__": "org.apache.zookeeper.server.NIOServerCnxn.Factory.__init__",
                  "Socket.getOutputStream": "java.net.Socket.getOutputStream",
                  "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
                  "ObjectOutputStream.__init__": "java.io.ObjectOutputStream.__init__",
                  "ObjectOutputStream.writeObject": "java.io.ObjectOutputStream.writeObject"
               },
               "Url_Position": 16,
               "In_Page_Order": 1,
               "Num_API_Calls": 8,
               "Dist_Center": 0.1366644595,
               "MethodInvocations": [
                  "Factory.__init__",
                  "ObjectOutputStream.__init__",
                  "ObjectInputStream.defaultReadObject",
                  "Socket.__init__",
                  "Socket.getOutputStream",
                  "ObjectOutputStream.defaultWriteObject",
                  "ObjectOutputStream.writeObject",
                  "BufferedOutputStream.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "import java.io.*;\nimport java.net.*;\npublic class smtpClient {\n    public static void main(String[] args) {\n// declaration section:\n// smtpClient: our client socket\n// os: output stream\n// is: input stream\n        Socket smtpSocket = null;  \n        DataOutputStream os = null;\n        DataInputStream is = null;\n// Initialization section:\n// Try to open a socket on port 25\n// Try to open input and output streams\n        try {\n            smtpSocket = new Socket(\"hostname\", 25);\n            os = new DataOutputStream(smtpSocket.getOutputStream());\n            is = new DataInputStream(smtpSocket.getInputStream());\n        } catch (UnknownHostException e) {\n            System.err.println(\"Don't know about host: hostname\");\n        } catch (IOException e) {\n            System.err.println(\"Couldn't get I/O for the connection to: hostname\");\n        }\n// If everything has been initialized then we want to write some data\n// to the socket we have opened a connection to on port 25\n    if (smtpSocket != null && os != null && is != null) {\n            try {\n// The capital string before each colon has a special meaning to SMTP\n// you may want to read the SMTP specification, RFC1822/3\n        os.writeBytes(\"HELO\\n\");    \n                os.writeBytes(\"MAIL From: k3is@fundy.csd.unbsj.ca\\n\");\n                os.writeBytes(\"RCPT To: k3is@fundy.csd.unbsj.ca\\n\");\n                os.writeBytes(\"DATA\\n\");\n                os.writeBytes(\"From: k3is@fundy.csd.unbsj.ca\\n\");\n                os.writeBytes(\"Subject: testing\\n\");\n                os.writeBytes(\"Hi there\\n\"); // message body\n                os.writeBytes(\"\\n.\\n\");\n        os.writeBytes(\"QUIT\");\n// keep on reading from/to the socket till we receive the \"Ok\" from SMTP,\n// once we received that then we want to break.\n                String responseLine;\n                while ((responseLine = is.readLine()) != null) {\n                    System.out.println(\"Server: \" + responseLine);\n                    if (responseLine.indexOf(\"Ok\") != -1) {\n                      break;\n                    }\n                }\n// clean up:\n// close the output stream\n// close the input stream\n// close the socket\n        os.close();\n                is.close();\n                smtpSocket.close();   \n            } catch (UnknownHostException e) {\n                System.err.println(\"Trying to connect to unknown host: \" + e);\n            } catch (IOException e) {\n                System.err.println(\"IOException:  \" + e);\n            }\n        }\n    }           \n}\n",
               "LOC": 63,
               "Url": "https://www.javaworld.com/article/2077322/core-java/core-java-sockets-programming-in-java-a-tutorial.html",
               "Score": 0.9719699251,
               "API_Weights": 5.1579936815,
               "API_Qualified_Names": {
                  "Socket.__init__": "java.net.Socket.__init__",
                  "Socket.getOutputStream": "java.net.Socket.getOutputStream",
                  "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
                  "Socket.getInputStream": "java.net.Socket.getInputStream",
                  "DataInputStream.__init__": "java.io.DataInputStream.__init__",
                  "DataOutputStream.writeBytes": "java.io.DataOutputStream.writeBytes",
                  "DataInputStream.readLine": "java.io.DataInputStream.readLine",
                  "DataOutputStream.close": "java.io.DataOutputStream.close",
                  "DataInputStream.close": "java.io.DataInputStream.close",
                  "Socket.close": "java.net.Socket.close"
               },
               "Url_Position": 17,
               "In_Page_Order": 12,
               "Num_API_Calls": 10,
               "Dist_Center": 0.1428966649,
               "MethodInvocations": [
                  "DataOutputStream.writeBytes",
                  "DataOutputStream.close",
                  "Socket.__init__",
                  "DataInputStream.close",
                  "Socket.getOutputStream",
                  "Socket.close",
                  "DataInputStream.readLine",
                  "DataInputStream.__init__",
                  "Socket.getInputStream",
                  "DataOutputStream.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\n/**\n * A quick and dirty example of query DNS A record and log response.\n * This code has no error handling.\n *\n */\n\npublic class DNSClient {\n    private static final String DNS_SERVER_ADDRESS = \"8.8.8.8\";\n    private static final int DNS_SERVER_PORT = 53;\n\n    public static void main(String[] args) throws IOException {\n        String domain = \"google.com\";\n        InetAddress ipAddress = InetAddress.getByName(DNS_SERVER_ADDRESS);\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        DataOutputStream dos = new DataOutputStream(baos);\n\n        // *** Build a DNS Request Frame ****\n\n        // Identifier: A 16-bit identification field generated by the device that creates the DNS query. \n        // It is copied by the server into the response, so it can be used by that device to match that \n        // query to the corresponding reply received from a DNS server. This is used in a manner similar \n        // to how the Identifier field is used in many of the ICMP message types.\n        dos.writeShort(0x1234);\n\n        // Write Query Flags\n        dos.writeShort(0x0100);\n\n        // Question Count: Specifies the number of questions in the Question section of the message.\n        dos.writeShort(0x0001);\n\n        // Answer Record Count: Specifies the number of resource records in the Answer section of the message.\n        dos.writeShort(0x0000);\n\n        // Authority Record Count: Specifies the number of resource records in the Authority section of \n        // the message. (NS stands for name server)\n        dos.writeShort(0x0000);\n\n        // Additional Record Count: Specifies the number of resource records in the Additional section of the message.\n        dos.writeShort(0x0000);\n\n        String[] domainParts = domain.split(\"\\\\.\");\n        System.out.println(domain + \" has \" + domainParts.length + \" parts\");\n\n        for (int i = 0; i<domainParts.length; i++) {\n            System.out.println(\"Writing: \" + domainParts[i]);\n            byte[] domainBytes = domainParts[i].getBytes(\"UTF-8\");\n            dos.writeByte(domainBytes.length);\n            dos.write(domainBytes);\n        }\n\n        // No more parts\n        dos.writeByte(0x00);\n\n        // Type 0x01 = A (Host Request)\n        dos.writeShort(0x0001);\n\n        // Class 0x01 = IN\n        dos.writeShort(0x0001);\n\n        byte[] dnsFrame = baos.toByteArray();\n\n        System.out.println(\"Sending: \" + dnsFrame.length + \" bytes\");\n        for (int i =0; i< dnsFrame.length; i++) {\n            System.out.print(\"0x\" + String.format(\"%x\", dnsFrame[i]) + \" \" );\n        }\n\n        // *** Send DNS Request Frame ***\n        DatagramSocket socket = new DatagramSocket();\n        DatagramPacket dnsReqPacket = new DatagramPacket(dnsFrame, dnsFrame.length, ipAddress, DNS_SERVER_PORT);\n        socket.send(dnsReqPacket);\n\n        // Await response from DNS server\n        byte[] buf = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buf, buf.length);\n        socket.receive(packet);\n\n        System.out.println(\"\\n\\nReceived: \" + packet.getLength() + \" bytes\");\n\n        for (int i = 0; i < packet.getLength(); i++) {\n            System.out.print(\" 0x\" + String.format(\"%x\", buf[i]) + \" \" );\n        }\n        System.out.println(\"\\n\");\n\n\n        DataInputStream din = new DataInputStream(new ByteArrayInputStream(buf));\n        System.out.println(\"Transaction ID: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Flags: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Questions: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Answers RRs: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Authority RRs: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Additional RRs: 0x\" + String.format(\"%x\", din.readShort()));\n\n        int recLen = 0;\n        while ((recLen = din.readByte()) > 0) {\n            byte[] record = new byte[recLen];\n\n            for (int i = 0; i < recLen; i++) {\n                record[i] = din.readByte();\n            }\n\n            System.out.println(\"Record: \" + new String(record, \"UTF-8\"));\n        }\n\n        System.out.println(\"Record Type: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Class: 0x\" + String.format(\"%x\", din.readShort()));\n\n        System.out.println(\"Field: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Type: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"Class: 0x\" + String.format(\"%x\", din.readShort()));\n        System.out.println(\"TTL: 0x\" + String.format(\"%x\", din.readInt()));\n\n        short addrLen = din.readShort();\n        System.out.println(\"Len: 0x\" + String.format(\"%x\", addrLen));\n\n        System.out.print(\"Address: \");\n        for (int i = 0; i < addrLen; i++ ) {\n            System.out.print(\"\" + String.format(\"%d\", (din.readByte() & 0xFF)) + \".\");\n        }\n    }\n\n}\n",
               "LOC": 132,
               "Url": "https://stackoverflow.com/questions/36743226/java-send-udp-packet-to-dns-server",
               "Score": 0.447866762,
               "API_Weights": 5.7973769393,
               "API_Qualified_Names": {
                  "ByteArrayOutputStream.__init__": "java.io.ByteArrayOutputStream.__init__",
                  "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
                  "DataOutputStream.writeShort": "java.io.DataOutputStream.writeShort",
                  "DataOutputStream.writeByte": "java.io.DataOutputStream.writeByte",
                  "ByteArrayOutputStream.toByteArray": "java.io.ByteArrayOutputStream.toByteArray",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getLength": "java.net.DatagramPacket.getLength",
                  "ByteArrayInputStream.__init__": "java.io.ByteArrayInputStream.__init__",
                  "DataInputStream.__init__": "java.io.DataInputStream.__init__",
                  "DataInputStream.readShort": "java.io.DataInputStream.readShort",
                  "DataInputStream.readByte": "java.io.DataInputStream.readByte",
                  "DataInputStream.readInt": "java.io.DataInputStream.readInt"
               },
               "Url_Position": 2,
               "In_Page_Order": 1,
               "Num_API_Calls": 15,
               "Dist_Center": 0.2594257348,
               "MethodInvocations": [
                  "DataOutputStream.writeShort",
                  "ByteArrayOutputStream.toByteArray",
                  "ByteArrayOutputStream.__init__",
                  "ByteArrayInputStream.__init__",
                  "DataInputStream.readShort",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getLength",
                  "DataInputStream.__init__",
                  "DataInputStream.readInt",
                  "DataInputStream.readByte",
                  "DataOutputStream.writeByte",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__",
                  "DataOutputStream.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n        final DataOutputStream dataOut = new DataOutputStream(byteOut);\n        dataOut.writeInt(1);\n        dataOut.writeDouble(1.2);\n        dataOut.writeLong(4l);\n        dataOut.close(); // or dataOut.flush()\n        final byte[] bytes = byteOutStream.toByteArray();\n        final ByteArrayInputStream byteIn = new ByteArrayInputStream(bytes);\n        final DataInputStream dataIn = new DataInputStream(byteIn);\n        final int integ = dataIn.readInt();\n        final double doub = dataIn.readDouble();\n        final long lon = dataIn.readLong();\n        System.out.println(integ);\n        System.out.println(doub);\n        System.out.println(lon);\n    }\n",
               "LOC": 21,
               "Url": "https://stackoverflow.com/questions/5236620/how-to-send-an-int-through-udp-in-java",
               "Score": 0.4107124349,
               "API_Weights": 5.4829906881,
               "API_Qualified_Names": {
                  "ByteArrayOutputStream.__init__": "java.io.ByteArrayOutputStream.__init__",
                  "DataOutputStream.__init__": "java.io.DataOutputStream.__init__",
                  "DataOutputStream.writeInt": "java.io.DataOutputStream.writeInt",
                  "DataOutputStream.writeDouble": "java.io.DataOutputStream.writeDouble",
                  "DataOutputStream.writeLong": "java.io.DataOutputStream.writeLong",
                  "DataOutputStream.close": "java.io.DataOutputStream.close",
                  "ByteArrayInputStream.__init__": "java.io.ByteArrayInputStream.__init__",
                  "DataInputStream.__init__": "java.io.DataInputStream.__init__",
                  "DataInputStream.readInt": "java.io.DataInputStream.readInt",
                  "DataInputStream.readDouble": "java.io.DataInputStream.readDouble",
                  "DataInputStream.readLong": "java.io.DataInputStream.readLong"
               },
               "Url_Position": 5,
               "In_Page_Order": 1,
               "Num_API_Calls": 11,
               "Dist_Center": 0.267686626,
               "MethodInvocations": [
                  "ByteArrayInputStream.__init__",
                  "DataOutputStream.writeInt",
                  "ByteArrayOutputStream.__init__",
                  "DataOutputStream.writeLong",
                  "DataInputStream.readDouble",
                  "DataOutputStream.close",
                  "DataInputStream.readInt",
                  "DataInputStream.readLong",
                  "DataOutputStream.writeDouble",
                  "DataInputStream.__init__",
                  "DataOutputStream.__init__"
               ]
            },
            {
               "Cluster": 0,
               "Code": "\r\natagramSocket  socket;\r\ntry{\r\n         socket \t\t\t= new DatagramSocket();\r\n         String requestData \t\t= \"'Hello World' via UDP in JAVA\";\r\n         byte [] m \t\t\t\t= requestData.getBytes();\r\n         InetAddress aHost \t\t= InetAddress.getByName(\"myhostname\");\r\n         int serverPort \t\t\t= 1234;\r\n         DatagramPacket request \t= new DatagramPacket(m, requestData.length(), aHost, serverPort);\r\n         socket.send(request);\r\n         byte [] buffer = new byte[1000];\r\n         DatagramPacket reply = new DatagramPacket(buffer, buffer.length);\r\n         socket.setSoTimeout(2000);\r\n         this.socket.receive(reply);\r\n}\r\ncatch(SocketTimeoutException e){\r\n\te.printStackTrace();\r\n}\r\ncatch(Exception e){\r\n        e.printStackTrace();\r\n}finally{\r\n\tsocket.close();\r\n}\r\n",
               "LOC": 24,
               "Url": "http://codesamplez.com/programming/udp-programming-in-java",
               "Score": 0.0,
               "API_Weights": 2.2604640074,
               "API_Qualified_Names": {
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__"
               },
               "Url_Position": 13,
               "In_Page_Order": 1,
               "Num_API_Calls": 5,
               "Dist_Center": 0.3590044073,
               "MethodInvocations": [
                  "DatagramPacket.__init__",
                  "atagramSocket.setSoTimeout",
                  "atagramSocket.__init__",
                  "atagramSocket.close",
                  "atagramSocket.send"
               ]
            }
         ],
         "avg_cluster_api_weights": 4.426283603854467,
         "top_apis_by_cluster": [
            "dataoutputstream.__init__",
            "datainputstream.__init__",
            "socket.getoutputstream",
            "socket.__init__",
            "dataoutputstream.close",
            "datainputstream.readint",
            "bytearrayinputstream.__init__",
            "bytearrayoutputstream.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 1,
               "Code": "import java.io.*;\r\nimport java.net.*;\r\n\r\nclass UDPServer\r\n{\r\n   public static void main(String args[]) throws Exception\r\n      {\r\n         DatagramSocket serverSocket = new DatagramSocket(9876);\r\n            byte[] receiveData = new byte[1024];\r\n            byte[] sendData = new byte[1024];\r\n            while(true)\r\n               {\r\n                  DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n                  serverSocket.receive(receivePacket);\r\n                  String sentence = new String( receivePacket.getData());\r\n                  System.out.println(\"RECEIVED: \" + sentence);\r\n                  InetAddress IPAddress = receivePacket.getAddress();\r\n                  int port = receivePacket.getPort();\r\n                  String capitalizedSentence = sentence.toUpperCase();\r\n                  sendData = capitalizedSentence.getBytes();\r\n                  DatagramPacket sendPacket =\r\n                  new DatagramPacket(sendData, sendData.length, IPAddress, port);\r\n                  serverSocket.send(sendPacket);\r\n               }\r\n      }\r\n}",
               "LOC": 26,
               "Url": "https://systembash.com/a-simple-java-udp-server-and-udp-client/",
               "Score": 1.0,
               "API_Weights": 15.4323110398,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramPacket.getAddress": "java.net.DatagramPacket.getAddress",
                  "DatagramPacket.getPort": "java.net.DatagramPacket.getPort",
                  "DatagramSocket.send": "java.net.DatagramSocket.send"
               },
               "Url_Position": 8,
               "In_Page_Order": 1,
               "Num_API_Calls": 8,
               "Dist_Center": 0.1459884593,
               "MethodInvocations": [
                  "DatagramPacket.getAddress",
                  "String.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramPacket.getPort",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "    DatagramSocket socket = new DatagramSocket(1989);\n    DatagramPacket packet = new DatagramPacket(new byte[256] , 256);\n\n    socket.receive(packet);\n\n    System.out.print(new String(packet.getData()));\n",
               "LOC": 7,
               "Url": "https://stackoverflow.com/questions/5236620/how-to-send-an-int-through-udp-in-java",
               "Score": 0.6769519895,
               "API_Weights": 11.4315956342,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__"
               },
               "Url_Position": 5,
               "In_Page_Order": 3,
               "Num_API_Calls": 5,
               "Dist_Center": 0.1941330439,
               "MethodInvocations": [
                  "String.__init__",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "import java.io.IOException;\nimport java.net.*;\n\npublic class Receiver {\n\n    public static void main(String[] args) {\n        int port = args.length == 0 ? 57 : Integer.parseInt(args[0]);\n        new Receiver().run(port);\n    }\n\n    public void run(int port) {    \n      try {\n        DatagramSocket serverSocket = new DatagramSocket(port);\n        byte[] receiveData = new byte[8];\n\n        System.out.printf(\"Listening on udp:%s:%d%n\",\n                InetAddress.getLocalHost().getHostAddress(), port);     \n        DatagramPacket receivePacket = new DatagramPacket(receiveData,\n                           receiveData.length);\n\n        while(true)\n        {\n              serverSocket.receive(receivePacket);\n              String sentence = new String( receivePacket.getData(), 0,\n                                 receivePacket.getLength() );\n              System.out.println(\"RECEIVED: \" + sentence);\n              // now send acknowledgement packet back to sender     \n              InetAddress IPAddress = receivePacket.getAddress();\n              String sendString = \"polo\";\n              byte[] sendData = sendString.getBytes(\"UTF-8\");\n              DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length,\n                   IPAddress, receivePacket.getPort());\n              serverSocket.send(sendPacket);\n        }\n      } catch (IOException e) {\n              System.out.println(e);\n      }\n      // should close serverSocket in finally block\n    }\n}\n",
               "LOC": 41,
               "Url": "https://stackoverflow.com/questions/10556829/sending-and-receiving-udp-packets-using-java",
               "Score": 0.6340307118,
               "API_Weights": 16.6618545322,
               "API_Qualified_Names": {
                  "Receiver.__init__": "com.nokia.dempsy.messagetransport.Receiver.__init__",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getLength": "java.net.DatagramPacket.getLength",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramPacket.getAddress": "java.net.DatagramPacket.getAddress",
                  "DatagramPacket.getPort": "java.net.DatagramPacket.getPort",
                  "DatagramSocket.send": "java.net.DatagramSocket.send"
               },
               "Url_Position": 1,
               "In_Page_Order": 1,
               "Num_API_Calls": 10,
               "Dist_Center": 0.2005297002,
               "MethodInvocations": [
                  "DatagramPacket.getAddress",
                  "String.__init__",
                  "Receiver.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramPacket.getPort",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__",
                  "DatagramPacket.getLength"
               ]
            },
            {
               "Cluster": 1,
               "Code": "\r\nDatagramSocket \tsocket;\r\nDatagramPacket \trequest;\r\n\r\nwhile(true)\r\n{\r\n      String data = null;\r\n                \r\n       try {\r\n\t\tbuffer \t\t\t= new byte[this.DGRAM_LENGTH];\r\n\t\trequest \t\t= new DatagramPacket(buffer, buffer.length);\r\n\t\tsocket.receive(this.request);\r\n\t\tdata = new String(this.request.getData());\r\n\t\tString request = data.trim();\r\n                //do your processing with request data\r\n                //Sending response \r\n                String response = \"Test Reply from UDP server!\";\r\n                DatagramPacket reply = new DatagramPacket(response.getBytes(), response.length(), request.getAddress(), request.getPort());\r\n\t\tthis.socket.send(reply);\r\n\t}\r\n\tcatch(Exception err) {\r\n\t\terr.printStackTrace();\r\n\t} \r\n}\r\n\r\n",
               "LOC": 26,
               "Url": "http://codesamplez.com/programming/udp-programming-in-java",
               "Score": 0.6236881624,
               "API_Weights": 7.7436304008,
               "API_Qualified_Names": {
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "String.__init__": "java.lang.String.__init__"
               },
               "Url_Position": 13,
               "In_Page_Order": 2,
               "Num_API_Calls": 3,
               "Dist_Center": 0.202071074,
               "MethodInvocations": [
                  "DatagramSocket.receive",
                  "DatagramPacket.__init__",
                  "String.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "public class EchoServer extends Thread {\r\n\r\n    private DatagramSocket socket;\r\n    private boolean running;\r\n    private byte[] buf = new byte[256];\r\n\r\n    public EchoServer() {\r\n        socket = new DatagramSocket(4445);\r\n    }\r\n\r\n    public void run() {\r\n        running = true;\r\n\r\n        while (running) {\r\n            DatagramPacket packet \r\n              = new DatagramPacket(buf, buf.length);\r\n            socket.receive(packet);\r\n            \r\n            InetAddress address = packet.getAddress();\r\n            int port = packet.getPort();\r\n            packet = new DatagramPacket(buf, buf.length, address, port);\r\n            String received \r\n              = new String(packet.getData(), 0, packet.getLength());\r\n            \r\n            if (received.equals(\"end\")) {\r\n                running = false;\r\n                continue;\r\n            }\r\n            socket.send(packet);\r\n        }\r\n        socket.close();\r\n    }\r\n}",
               "LOC": 33,
               "Url": "http://www.baeldung.com/udp-in-java",
               "Score": 0.4292817009,
               "API_Weights": 16.4923773712,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getAddress": "java.net.DatagramPacket.getAddress",
                  "DatagramPacket.getPort": "java.net.DatagramPacket.getPort",
                  "DatagramPacket.getLength": "java.net.DatagramPacket.getLength",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramSocket.close": "java.net.DatagramSocket.close"
               },
               "Url_Position": 6,
               "In_Page_Order": 1,
               "Num_API_Calls": 10,
               "Dist_Center": 0.231043914,
               "MethodInvocations": [
                  "DatagramPacket.getAddress",
                  "String.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramPacket.getPort",
                  "DatagramSocket.close",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__",
                  "DatagramPacket.getLength"
               ]
            },
            {
               "Cluster": 1,
               "Code": "\npacket = new DatagramPacket(buf, buf.length);\nsocket.receive(packet);\nString received = new String(packet.getData(), 0, packet.getLength());\nSystem.out.println(\"Quote of the Moment: \" + received);\n",
               "LOC": 6,
               "Url": "https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html",
               "Score": 0.2709224685,
               "API_Weights": 5.7641921794,
               "API_Qualified_Names": {
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "String.__init__": "java.lang.String.__init__"
               },
               "Url_Position": 10,
               "In_Page_Order": 11,
               "Num_API_Calls": 2,
               "Dist_Center": 0.254644553,
               "MethodInvocations": [
                  "DatagramPacket.__init__",
                  "String.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "        // Find the server using UDP broadcast\n        try {\n          //Open a random port to send the package\n          c = new DatagramSocket();\n          c.setBroadcast(true);\n\n          byte[] sendData = \"DISCOVER_FUIFSERVER_REQUEST\".getBytes();\n\n          //Try the 255.255.255.255 first\n          try {\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName(\"255.255.255.255\"), 8888);\n            c.send(sendPacket);\n            System.out.println(getClass().getName() + \">>> Request packet sent to: 255.255.255.255 (DEFAULT)\");\n          } catch (Exception e) {\n          }\n\n          // Broadcast the message over all the network interfaces\n          Enumeration interfaces = NetworkInterface.getNetworkInterfaces();\n          while (interfaces.hasMoreElements()) {\n            NetworkInterface networkInterface = interfaces.nextElement();\n\n            if (networkInterface.isLoopback() || !networkInterface.isUp()) {\n              continue; // Don't want to broadcast to the loopback interface\n            }\n\n            for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n              InetAddress broadcast = interfaceAddress.getBroadcast();\n              if (broadcast == null) {\n                continue;\n              }\n\n              // Send the broadcast package!\n              try {\n                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, broadcast, 8888);\n                c.send(sendPacket);\n              } catch (Exception e) {\n              }\n\n              System.out.println(getClass().getName() + \">>> Request packet sent to: \" + broadcast.getHostAddress() + \"; Interface: \" + networkInterface.getDisplayName());\n            }\n          }\n\n          System.out.println(getClass().getName() + \">>> Done looping over all network interfaces. Now waiting for a reply!\");\n\n          //Wait for a response\n          byte[] recvBuf = new byte[15000];\n          DatagramPacket receivePacket = new DatagramPacket(recvBuf, recvBuf.length);\n          c.receive(receivePacket);\n\n          //We have a response\n          System.out.println(getClass().getName() + \">>> Broadcast response from server: \" + receivePacket.getAddress().getHostAddress());\n\n          //Check if the message is correct\n          String message = new String(receivePacket.getData()).trim();\n          if (message.equals(\"DISCOVER_FUIFSERVER_RESPONSE\")) {\n            //DO SOMETHING WITH THE SERVER'S IP (for example, store it in your controller)\n            Controller_Base.setServerIp(receivePacket.getAddress());\n          }\n\n          //Close the port!\n          c.close();\n        } catch (IOException ex) {\n          Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);\n        }\n",
               "LOC": 65,
               "Url": "https://demey.io/network-discovery-using-udp-broadcast/",
               "Score": 0.0978398495,
               "API_Weights": 15.1097751898,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
                  "Enumeration.nextElement": "java.util.Enumeration.nextElement",
                  "NetworkInterface.isUp": "java.net.NetworkInterface.isUp",
                  "NetworkInterface.getDisplayName": "java.net.NetworkInterface.getDisplayName",
                  "InetAddress.getHostAddress": "java.net.InetAddress.getHostAddress",
                  "DatagramPacket.getAddress": "java.net.DatagramPacket.getAddress",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__"
               },
               "Url_Position": 22,
               "In_Page_Order": 3,
               "Num_API_Calls": 10,
               "Dist_Center": 0.2804394519,
               "MethodInvocations": [
                  "NetworkInterface.getDisplayName",
                  "DatagramPacket.getAddress",
                  "String.__init__",
                  "Enumeration.hasMoreElements",
                  "DatagramPacket.__init__",
                  "InetAddress.getHostAddress",
                  "Enumeration.nextElement",
                  "NetworkInterface.isUp",
                  "DatagramPacket.getData",
                  "DatagramSocket.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "        // Find the server using UDP broadcast\r\n        try {\r\n          //Open a random port to send the package\r\n          c = new DatagramSocket();\r\n          c.setBroadcast(true);\r\n\r\n          byte[] sendData = \"DISCOVER_FUIFSERVER_REQUEST\".getBytes();\r\n\r\n          //Try the 255.255.255.255 first\r\n          try {\r\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName(\"255.255.255.255\"), 8888);\r\n            c.send(sendPacket);\r\n            System.out.println(getClass().getName() + \">>> Request packet sent to: 255.255.255.255 (DEFAULT)\");\r\n          } catch (Exception e) {\r\n          }\r\n\r\n          // Broadcast the message over all the network interfaces\r\n          Enumeration interfaces = NetworkInterface.getNetworkInterfaces();\r\n          while (interfaces.hasMoreElements()) {\r\n            NetworkInterface networkInterface = interfaces.nextElement();\r\n\r\n            if (networkInterface.isLoopback() || !networkInterface.isUp()) {\r\n              continue; // Don't want to broadcast to the loopback interface\r\n            }\r\n\r\n            for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\r\n              InetAddress broadcast = interfaceAddress.getBroadcast();\r\n              if (broadcast == null) {\r\n                continue;\r\n              }\r\n\r\n              // Send the broadcast package!\r\n              try {\r\n                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, broadcast, 8888);\r\n                c.send(sendPacket);\r\n              } catch (Exception e) {\r\n              }\r\n\r\n              System.out.println(getClass().getName() + \">>> Request packet sent to: \" + broadcast.getHostAddress() + \"; Interface: \" + networkInterface.getDisplayName());\r\n            }\r\n          }\r\n\r\n          System.out.println(getClass().getName() + \">>> Done looping over all network interfaces. Now waiting for a reply!\");\r\n\r\n          //Wait for a response\r\n          byte[] recvBuf = new byte[15000];\r\n          DatagramPacket receivePacket = new DatagramPacket(recvBuf, recvBuf.length);\r\n          c.receive(receivePacket);\r\n\r\n          //We have a response\r\n          System.out.println(getClass().getName() + \">>> Broadcast response from server: \" + receivePacket.getAddress().getHostAddress());\r\n\r\n          //Check if the message is correct\r\n          String message = new String(receivePacket.getData()).trim();\r\n          if (message.equals(\"DISCOVER_FUIFSERVER_RESPONSE\")) {\r\n            //DO SOMETHING WITH THE SERVER'S IP (for example, store it in your controller)\r\n            Controller_Base.setServerIp(receivePacket.getAddress());\r\n          }\r\n\r\n          //Close the port!\r\n          c.close();\r\n        } catch (IOException ex) {\r\n          Logger.getLogger(LoginWindow.class.getName()).log(Level.SEVERE, null, ex);\r\n        }",
               "LOC": 64,
               "Url": "https://michieldemey.be/blog/network-discovery-using-udp-broadcast/",
               "Score": 0.0974375035,
               "API_Weights": 15.1097751898,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
                  "Enumeration.nextElement": "java.util.Enumeration.nextElement",
                  "NetworkInterface.isUp": "java.net.NetworkInterface.isUp",
                  "NetworkInterface.getDisplayName": "java.net.NetworkInterface.getDisplayName",
                  "InetAddress.getHostAddress": "java.net.InetAddress.getHostAddress",
                  "DatagramPacket.getAddress": "java.net.DatagramPacket.getAddress",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__"
               },
               "Url_Position": 24,
               "In_Page_Order": 3,
               "Num_API_Calls": 10,
               "Dist_Center": 0.2804994145,
               "MethodInvocations": [
                  "NetworkInterface.getDisplayName",
                  "DatagramPacket.getAddress",
                  "String.__init__",
                  "Enumeration.hasMoreElements",
                  "DatagramPacket.__init__",
                  "InetAddress.getHostAddress",
                  "Enumeration.nextElement",
                  "NetworkInterface.isUp",
                  "DatagramPacket.getData",
                  "DatagramSocket.__init__"
               ]
            },
            {
               "Cluster": 1,
               "Code": "import java.io.IOException;\r\nimport java.net.DatagramPacket;\r\nimport java.net.DatagramSocket;\r\nimport java.net.SocketException;\r\nimport java.util.concurrent.BlockingQueue;\r\n\r\npublic class UdpUnicastClient implements Runnable {\r\n    private final int port;\r\n    private final BlockingQueue<byte[]> messageQueue;\r\n\r\n    public UdpUnicastClient(int port, BlockingQueue<byte[]> messageQueue) {\r\n        this.port = port;\r\n        this.messageQueue = messageQueue;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        /**\r\n         * Bind the client socket to the port on which you expect to\r\n         * read incoming messages\r\n         */\r\n        try (DatagramSocket clientSocket = new DatagramSocket(port)) {\r\n            // Set a timeout of 3000 ms for the client.\r\n            clientSocket.setSoTimeout(3000);\r\n            while (true) {\r\n                /**\r\n                 * Create a byte array buffer to store incoming data. If the message length\r\n                 * exceeds the length of your buffer, then the message will be truncated. To avoid this,\r\n                 * you can simply instantiate the buffer with the maximum UDP packet size, which\r\n                 * is 65506\r\n                 */\r\n                byte[] buffer = new byte[65507];\r\n                DatagramPacket datagramPacket = new DatagramPacket(buffer, 0, buffer.length);\r\n\r\n                /**\r\n                 * The receive method will wait for 3000 ms for data.\r\n                 * After that, the client will throw a timeout exception.\r\n                 */\r\n                clientSocket.receive(datagramPacket);\r\n\r\n                /**\r\n                 * Add the data contained in the datagram packet to the message\r\n                 * queue.The 'put' method will block if the message queue is full,\r\n                 * until there is space to store the new message.\r\n                 */\r\n                this.messageQueue.put(datagramPacket.getData());\r\n            }\r\n        } catch (SocketException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Timeout. Client is closing.\");\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}",
               "LOC": 56,
               "Url": "http://www.romaniancoder.com/create-a-udp-client-server-in-java-using-the-producer-consumer-pattern/",
               "Score": 0.0,
               "API_Weights": 5.6866523173,
               "API_Qualified_Names": {
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData"
               },
               "Url_Position": 39,
               "In_Page_Order": 2,
               "Num_API_Calls": 3,
               "Dist_Center": 0.2950207487,
               "MethodInvocations": [
                  "DatagramPacket.getData",
                  "DatagramPacket.__init__",
                  "AM.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 12.15912931717505,
         "top_apis_by_cluster": [
            "string.__init__",
            "datagrampacket.__init__",
            "datagrampacket.getdata",
            "datagramsocket.receive",
            "datagrampacket.getaddress",
            "datagramsocket.__init__",
            "datagrampacket.getport",
            "am.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 2,
               "Code": "\nDatagramSocket datagramSocket = new DatagramSocket(80);\n\nbyte[] buffer = new byte[10];\nDatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\ndatagramSocket.receive(packet);\n",
               "LOC": 8,
               "Url": "http://tutorials.jenkov.com/java-networking/udp-datagram-sockets.html",
               "Score": 1.0,
               "API_Weights": 8.5247478572,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive"
               },
               "Url_Position": 12,
               "In_Page_Order": 5,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1292781106,
               "MethodInvocations": [
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__",
                  "DatagramPacket.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "\nDatagramSocket datagramSocket = new DatagramSocket();\n\nbyte[] buffer = \"0123456789\".getBytes();\nInetAddress receiverAddress = InetAddress.getLocalHost();\n\nDatagramPacket packet = new DatagramPacket(\n        buffer, buffer.length, receiverAddress, 80);\ndatagramSocket.send(packet);\n",
               "LOC": 10,
               "Url": "http://tutorials.jenkov.com/java-networking/udp-datagram-sockets.html",
               "Score": 0.9940184559,
               "API_Weights": 9.7126715915,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send"
               },
               "Url_Position": 12,
               "In_Page_Order": 4,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1310364323,
               "MethodInvocations": [
                  "DatagramSocket.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "\n/*\n   Example how to send UDP text in Java.\nSee also: sfk netlog.\n\n   -  copy this to a file netlog.java\n   -  javac netlog.java\n-  run: dview -net\n      under Linux/Mac: wine dview.exe -net -linux &\n   -  java netlog\n*/\n\nimport java.io.*;\nimport java.net.*;\n\npublic class netlog\n{\n   public static DatagramSocket clSocket = null;\n   public static InetAddress clAddress = null;\n   public static int iClPort = -1;\n   static int iClRequest = 1;\n\n   public static void init(String sHost, int iPort) throws Throwable\n   {\n      clAddress = InetAddress.getByName(sHost);\n      iClPort = iPort;\n      clSocket = new DatagramSocket();\n   }\n\n   public static void log(String sTextIn) throws Throwable\n   {\n      String sText   = sTextIn+\"\\n\";\n\n      // change all [red] to compact color codes \\x1Fr\n      byte[] abData1 = sText.getBytes();\n      int    iSize1  = abData1.length;\n      byte[] abData2 = new byte[iSize1+100];\n\n      // keep 100 bytes space for header\n      int i2=100;\n      for (int i1=0; i1<iSize1;)\n      {\n         if (abData1[i1]=='[') {\n            i1++;\n            if (i1>=iSize1)\n               break;\n            abData2[i2++] = (byte)0x1F;\n            abData2[i2++] = abData1[i1++];\n            while (i1<iSize1 && abData1[i1]!=']')\n               i1++;\n            if (i1<iSize1)\n               i1++;\n         } else {\n            abData2[i2++] = abData1[i1++];\n         }\n      }\n      int iTextSize = i2-100;\n\n      // add sfktxt header before text\n      String sHead = \":sfktxt:v100,req\"+iClRequest+\",cs1\\n\\n\";\n      iClRequest++;\n      byte abHead[] = sHead.getBytes();\n      int iHeadLen  = abHead.length;\n      for (int i=0; i<iHeadLen; i++)\n         abData2[100-iHeadLen+i] = abHead[i];\n      int iStartOff = 100-iHeadLen;\n      int iFullSize = iHeadLen+iTextSize;\n\n      DatagramPacket packet = new DatagramPacket(abData2,\n         iStartOff, iFullSize, clAddress, iClPort);\n\n      clSocket.send(packet);\n   }\n\n   public static void main(String args[]) throws Throwable\n   {\n      netlog.init(\"localhost\", 21323);\n\n      netlog.log(\"[Red]Foo[def] and [Blue]bar[def] went \"\n                +\"to the [Green]zoo[def].\");\n   }\n}\n",
               "LOC": 83,
               "Url": "http://stahlworks.com/dev/article-18-03-send-udp-network-text-java-simple-source-code-example.html",
               "Score": 0.9940184559,
               "API_Weights": 9.7126715915,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send"
               },
               "Url_Position": 32,
               "In_Page_Order": 1,
               "Num_API_Calls": 3,
               "Dist_Center": 0.1310364323,
               "MethodInvocations": [
                  "DatagramSocket.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "   \n\nimport java.io.*;\nimport java.net.*;\n\npublic class UDPSend {\n  public static void main(String args[]) {\n    try {\n      String host = \"www.java2s.com\";\n      int port = 90;\n\n      byte[] message = \"Java Source and Support\".getBytes();\n\n      // Get the internet address of the specified host\n      InetAddress address = InetAddress.getByName(host);\n\n      // Initialize a datagram packet with data and address\n      DatagramPacket packet = new DatagramPacket(message, message.length,\n          address, port);\n\n      // Create a datagram socket, send the packet through it, close it.\n      DatagramSocket dsocket = new DatagramSocket();\n      dsocket.send(packet);\n      dsocket.close();\n    } catch (Exception e) {\n      System.err.println(e);\n    }\n  }\n}\n\n           \n         \n    \n    \n  \n",
               "LOC": 36,
               "Url": "http://www.java2s.com/Code/Java/Network-Protocol/SendoutUDPpockets.htm",
               "Score": 0.8744642445,
               "API_Weights": 12.061413832,
               "API_Qualified_Names": {
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramSocket.close": "java.net.DatagramSocket.close"
               },
               "Url_Position": 7,
               "In_Page_Order": 1,
               "Num_API_Calls": 4,
               "Dist_Center": 0.166180329,
               "MethodInvocations": [
                  "DatagramSocket.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramSocket.close"
               ]
            },
            {
               "Cluster": 2,
               "Code": "import java.io.*;\nimport java.net.*;\n\nclass UDPClient\n{\n   public static void main(String args[]) throws Exception\n   {\n      BufferedReader inFromUser =\n         new BufferedReader(new InputStreamReader(System.in));\n      DatagramSocket clientSocket = new DatagramSocket();\n      InetAddress IPAddress = InetAddress.getByName(\"localhost\");\n      byte[] sendData = new byte[1024];\n      byte[] receiveData = new byte[1024];\n      String sentence = inFromUser.readLine();\n      sendData = sentence.getBytes();\n      DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\n      clientSocket.send(sendPacket);\n      DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n      clientSocket.receive(receivePacket);\n      String modifiedSentence = new String(receivePacket.getData());\n      System.out.println(\"FROM SERVER:\" + modifiedSentence);\n      clientSocket.close();\n   }\n}\n",
               "LOC": 25,
               "Url": "https://stackoverflow.com/questions/8562689/need-to-send-a-udp-packet-and-receive-a-response-in-java",
               "Score": 0.6454010162,
               "API_Weights": 20.7047190763,
               "API_Qualified_Names": {
                  "InputStreamReader.__init__": "java.io.InputStreamReader.__init__",
                  "BufferedReader.__init__": "java.io.BufferedReader.__init__",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "BufferedReader.readLine": "java.io.BufferedReader.readLine",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramSocket.close": "java.net.DatagramSocket.close"
               },
               "Url_Position": 4,
               "In_Page_Order": 1,
               "Num_API_Calls": 10,
               "Dist_Center": 0.2335152587,
               "MethodInvocations": [
                  "InputStreamReader.__init__",
                  "String.__init__",
                  "DatagramSocket.receive",
                  "BufferedReader.readLine",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramSocket.close",
                  "BufferedReader.__init__",
                  "DatagramSocket.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "import java.io.*;\r\nimport java.net.*;\r\n\r\nclass UDPClient\r\n{\r\n   public static void main(String args[]) throws Exception\r\n   {\r\n      BufferedReader inFromUser =\r\n         new BufferedReader(new InputStreamReader(System.in));\r\n      DatagramSocket clientSocket = new DatagramSocket();\r\n      InetAddress IPAddress = InetAddress.getByName(\"localhost\");\r\n      byte[] sendData = new byte[1024];\r\n      byte[] receiveData = new byte[1024];\r\n      String sentence = inFromUser.readLine();\r\n      sendData = sentence.getBytes();\r\n      DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\r\n      clientSocket.send(sendPacket);\r\n      DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n      clientSocket.receive(receivePacket);\r\n      String modifiedSentence = new String(receivePacket.getData());\r\n      System.out.println(\"FROM SERVER:\" + modifiedSentence);\r\n      clientSocket.close();\r\n   }\r\n}",
               "LOC": 24,
               "Url": "https://systembash.com/a-simple-java-udp-server-and-udp-client/",
               "Score": 0.6454010162,
               "API_Weights": 20.7047190763,
               "API_Qualified_Names": {
                  "InputStreamReader.__init__": "java.io.InputStreamReader.__init__",
                  "BufferedReader.__init__": "java.io.BufferedReader.__init__",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "BufferedReader.readLine": "java.io.BufferedReader.readLine",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramSocket.close": "java.net.DatagramSocket.close"
               },
               "Url_Position": 8,
               "In_Page_Order": 2,
               "Num_API_Calls": 10,
               "Dist_Center": 0.2335152587,
               "MethodInvocations": [
                  "InputStreamReader.__init__",
                  "String.__init__",
                  "DatagramSocket.receive",
                  "BufferedReader.readLine",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramSocket.close",
                  "BufferedReader.__init__",
                  "DatagramSocket.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "public class EchoClient {\r\n    private DatagramSocket socket;\r\n    private InetAddress address;\r\n\r\n    private byte[] buf;\r\n\r\n    public EchoClient() {\r\n        socket = new DatagramSocket();\r\n        address = InetAddress.getByName(\"localhost\");\r\n    }\r\n\r\n    public String sendEcho(String msg) {\r\n        buf = msg.getBytes();\r\n        DatagramPacket packet \r\n          = new DatagramPacket(buf, buf.length, address, 4445);\r\n        socket.send(packet);\r\n        packet = new DatagramPacket(buf, buf.length);\r\n        socket.receive(packet);\r\n        String received = new String(\r\n          packet.getData(), 0, packet.getLength());\r\n        return received;\r\n    }\r\n\r\n    public void close() {\r\n        socket.close();\r\n    }\r\n}",
               "LOC": 27,
               "Url": "http://www.baeldung.com/udp-in-java",
               "Score": 0.5588963179,
               "API_Weights": 17.3226978589,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getLength": "java.net.DatagramPacket.getLength",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramSocket.close": "java.net.DatagramSocket.close"
               },
               "Url_Position": 6,
               "In_Page_Order": 2,
               "Num_API_Calls": 8,
               "Dist_Center": 0.2589439922,
               "MethodInvocations": [
                  "String.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramPacket.getData",
                  "DatagramSocket.close",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__",
                  "DatagramPacket.getLength"
               ]
            },
            {
               "Cluster": 2,
               "Code": "//server code\r\npublic class UDPReceive {\r\n\r\n    String checkSumValue;\r\n    DatagramSocket serverSocket;\r\n    DatagramPacket receivePacket, sendpacket;\r\n    private OutputStream ouStream = null;\r\n\r\n    public void communicate() {\r\n        try {\r\n            String path = \"text1.txt\";\r\n            FileReader fr = new FileReader(\"server.properties\");\r\n            Properties prop = new Properties();\r\n            prop.load(fr);\r\n            int port = Integer.parseInt(prop.getProperty(\"port\"));\r\n            serverSocket = new DatagramSocket(port);\r\n            byte[] receiveData = new byte[1024];\r\n            byte[] sendData = new byte[1024];\r\n            receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n            serverSocket.receive(receivePacket);\r\n            InetAddress IPAddress = receivePacket.getAddress();\r\n            System.out.println(\"Waiting for datagram packet. . .\\n\");\r\n            checkSumValue = new String(doMD5(path));\r\n            String msg = new String(receivePacket.getData());\r\n            System.out.println(\"Checksum of Client: \" + msg);\r\n            if (checkSumValue.equalsIgnoreCase(msg)) {\r\n                System.out.println(\"The file didn't update\");\r\n                String reply = \"y\";\r\n//                String r=new String(reply.);\r\n//                ouStream.write(reply);\r\n                sendData = reply.getBytes();\r\n                sendpacket = new DatagramPacket(sendData, sendData.length);\r\n                serverSocket.send(sendpacket);\r\n                System.out.println(\"Reply :\" + new String(sendData));\r\n            } else {\r\n                String reply = \"n\";\r\n//                ouStream.write(reply);\r\n                sendData = reply.getBytes();\r\n                System.out.println(\"Reply :\" + new String(sendData));\r\n                sendpacket = new DatagramPacket(sendData, sendData.length);\r\n                serverSocket.send(sendpacket);\r\n                System.out.println(\"The file updated\");\r\n                fileTransfer(path);\r\n            }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error msg: \" + ex.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public String doMD5(String path) {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            FileInputStream fis = new FileInputStream(path);\r\n            byte[] dataBytes = new byte[1024];\r\n            int nread = 0;\r\n            while ((nread = fis.read(dataBytes)) != -1) {\r\n                md.update(dataBytes, 0, nread);\r\n            };\r\n            byte[] mdbytes = md.digest();\r\n            StringBuffer sb = new StringBuffer();\r\n            for (int i = 0; i < mdbytes.length; i++) {\r\n                sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));\r\n            }\r\n            checkSumValue = sb.toString();\r\n            System.out.println(\"Digest(in hex format):: \" + checkSumValue);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Error msg: \" + ex);\r\n        }\r\n        return checkSumValue;\r\n    }\r\n\r\n    public void fileTransfer(String path) {\r\n        try {\r\n            FileWriter fw = new FileWriter(new File(\r\n                    \"text1.txt\"));\r\n//            fw.write(\"hi\");\r\n//            DatagramSocket Socket = new DatagramSocket(port);\r\n            byte[] receiveData = new byte[1000000];\r\n            while (receiveData != null) {\r\n                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n                serverSocket.receive(receivePacket);\r\n                String sentence = new String(receivePacket.getData());\r\n                fw.write(sentence.trim());\r\n                fw.flush();\r\n                System.out.printf(\"RECEIVED: %s \", new String(receivePacket.getData()));\r\n            }\r\n\r\n            fw.flush();\r\n            fw.close();\r\n            serverSocket.close();\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n        }",
               "LOC": 96,
               "Url": "https://www.codeproject.com/Questions/870316/how-to-transfer-a-file-using-UDP-communication-in",
               "Score": 0.4840951729,
               "API_Weights": 23.4847766107,
               "API_Qualified_Names": {
                  "FileReader.__init__": "java.io.FileReader.__init__",
                  "Properties.__init__": "java.util.Properties.__init__",
                  "Properties.load": "java.util.Properties.load",
                  "Properties.getProperty": "java.util.Properties.getProperty",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramPacket.getAddress": "java.net.DatagramPacket.getAddress",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FileInputStream.read": "java.io.FileInputStream.read",
                  "MessageDigest.digest": "java.security.MessageDigest.digest",
                  "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
                  "StringBuffer.toString": "java.lang.StringBuffer.toString",
                  "File.__init__": "java.io.File.__init__",
                  "FileWriter.__init__": "java.io.FileWriter.__init__",
                  "FileWriter.flush": "java.io.FileWriter.flush",
                  "FileWriter.close": "java.io.FileWriter.close",
                  "DatagramSocket.close": "java.net.DatagramSocket.close"
               },
               "Url_Position": 27,
               "In_Page_Order": 2,
               "Num_API_Calls": 21,
               "Dist_Center": 0.2809323745,
               "MethodInvocations": [
                  "DatagramSocket.send",
                  "FileWriter.flush",
                  "FileInputStream.read",
                  "FileWriter.close",
                  "String.__init__",
                  "FileInputStream.__init__",
                  "DatagramPacket.getData",
                  "DatagramSocket.__init__",
                  "Properties.load",
                  "File.__init__",
                  "StringBuffer.__init__",
                  "DatagramPacket.__init__",
                  "Properties.__init__",
                  "Properties.getProperty",
                  "StringBuffer.toString",
                  "DatagramSocket.close",
                  "DatagramSocket.receive",
                  "DatagramPacket.getAddress",
                  "MessageDigest.digest",
                  "FileReader.__init__",
                  "FileWriter.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "//client code\r\npublic class UDPSend {\r\nDatagramSocket clientSocket;\r\n    DatagramPacket sendPacket, receivePacket;\r\n    private InputStream inStream = null;\r\n    String checkSumValue;\r\n    public void communicate() {\r\n        byte[] sendData = new byte[1024];\r\n        byte[] receiveData = new byte[1024];\r\n        String path = \"text1.txt\", checkSumValue;\r\n        try {\r\n            FileReader fr = new FileReader(\"client.properties\");\r\n            Properties prop = new Properties();\r\n            prop.load(fr);\r\n            String serverHostname = prop.getProperty(\"ipAddress\");\r\n            int port = Integer.parseInt(prop.getProperty(\"port\"));\r\n            System.out.println(\"Host: \" + serverHostname);\r\n            System.out.println(\"Port: \" + port);\r\n//            BufferedReader inFromUser =\r\n//                    new BufferedReader(new InputStreamReader(System.in));\r\n            clientSocket = new DatagramSocket();\r\n            InetAddress ipAddress = InetAddress.getByName(serverHostname);\r\n            System.out.println(\"Attempting to connect to \" + ipAddress + \" via UDP \" + port);\r\n            checkSumValue = doMD5(path);\r\n            sendData = checkSumValue.getBytes();\r\n            sendPacket = new DatagramPacket(sendData, sendData.length, ipAddress, port);\r\n            clientSocket.send(sendPacket);\r\n            System.out.println(\"Client Checksum sent to server : \" + new String(sendPacket.getData()));\r\n//            int reply;\r\n            receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n            clientSocket.receive(receivePacket);\r\n            String res =new String(receivePacket.getData());\r\n//            reply=receivePacket.getData();\r\n//             reply=Integer.parseInt(res);\r\n            System.out.println(\"Reply: \"+ res);\r\n\r\n            if (res.equalsIgnoreCase(\"n\")) {\r\n            fileTransfer(path);\r\n            clientSocket.close();\r\n            }\r\n            else{\r\n            Thread.sleep(2000);\r\n            clientSocket.close();\r\n            }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception :\" + ex.getMessage());\r\n        }\r\n    }\r\n\r\n    public String doMD5(String path) {\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            FileInputStream fis = new FileInputStream(path);\r\n\r\n            byte[] dataBytes = new byte[1024];\r\n\r\n            int nread = 0;\r\n            while ((nread = fis.read(dataBytes)) != -1) {\r\n                md.update(dataBytes, 0, nread);\r\n            };\r\n            byte[] mdbytes = md.digest();\r\n            StringBuffer sb = new StringBuffer();\r\n            for (int i = 0; i < mdbytes.length; i++) {\r\n                sb.append(Integer.toString((mdbytes[i] & 0xff) + 0x100, 16).substring(1));\r\n            }\r\n            checkSumValue = sb.toString();\r\n            System.out.println(\"Digest(in hex format):: \" + checkSumValue);\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception : \" + ex.getMessage());\r\n        }\r\n        return checkSumValue;\r\n    }\r\n    public void fileTransfer(String path){\r\n        try {\r\n            FileInputStream fstream = new FileInputStream(\"text1.txt\");\r\n            DataInputStream in = new DataInputStream(fstream);\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(in));\r\n\r\n            File file = new File(\"text1.txt\");\r\n            FileInputStream fis = new FileInputStream(file);\r\n            byte[] fsize = new byte[(int) file.length()];\r\n            int size = fis.read(fsize);\r\n            System.out.println(\"Size = \" + size);\r\n            InetAddress addr = InetAddress.getByName(\"localhost\");\r\n            byte[] buf = new byte[10000];\r\n            String DataLine;\r\n            while ((DataLine = br.readLine()) != null) {\r\n//                DatagramPacket packet = new DatagramPacket(DataLine.getBytes(), DataLine.length(), addr, 4555);\r\n                receivePacket=new DatagramPacket(DataLine.getBytes(), DataLine.length());\r\n                System.out.println(DataLine);\r\n                DatagramSocket socket = new DatagramSocket();\r\n                socket.send(receivePacket);\r\n                System.out.println(\"Sent Packet: \"+new String(receivePacket.getData()));\r\n            }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception in file: \" + ex.getMessage());\r\n        }\r\n    }\r\n}",
               "LOC": 99,
               "Url": "https://www.codeproject.com/Questions/870316/how-to-transfer-a-file-using-UDP-communication-in",
               "Score": 0.4823489004,
               "API_Weights": 26.8013390852,
               "API_Qualified_Names": {
                  "FileReader.__init__": "java.io.FileReader.__init__",
                  "Properties.__init__": "java.util.Properties.__init__",
                  "Properties.load": "java.util.Properties.load",
                  "Properties.getProperty": "java.util.Properties.getProperty",
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramSocket.close": "java.net.DatagramSocket.close",
                  "FileInputStream.__init__": "java.io.FileInputStream.__init__",
                  "FileInputStream.read": "java.io.FileInputStream.read",
                  "MessageDigest.digest": "java.security.MessageDigest.digest",
                  "StringBuffer.__init__": "java.lang.StringBuffer.__init__",
                  "StringBuffer.toString": "java.lang.StringBuffer.toString",
                  "DataInputStream.__init__": "java.io.DataInputStream.__init__",
                  "InputStreamReader.__init__": "java.io.InputStreamReader.__init__",
                  "BufferedReader.__init__": "java.io.BufferedReader.__init__",
                  "File.__init__": "java.io.File.__init__",
                  "File.length": "java.io.File.length",
                  "BufferedReader.readLine": "java.io.BufferedReader.readLine"
               },
               "Url_Position": 27,
               "In_Page_Order": 1,
               "Num_API_Calls": 22,
               "Dist_Center": 0.281445705,
               "MethodInvocations": [
                  "DatagramSocket.send",
                  "FileInputStream.read",
                  "DataInputStream.__init__",
                  "File.length",
                  "String.__init__",
                  "FileInputStream.__init__",
                  "DatagramPacket.getData",
                  "BufferedReader.__init__",
                  "DatagramSocket.__init__",
                  "Properties.load",
                  "InputStreamReader.__init__",
                  "File.__init__",
                  "StringBuffer.__init__",
                  "DatagramPacket.__init__",
                  "Properties.__init__",
                  "Properties.getProperty",
                  "DatagramSocket.close",
                  "StringBuffer.toString",
                  "DatagramSocket.receive",
                  "MessageDigest.digest",
                  "BufferedReader.readLine",
                  "FileReader.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "class Connection{ String NAME; InetAddress IP; int PORT;   DatagramSocket DSOCKET; boolean ENABLED = true; public Connection(InetAddress ip, int port,String name) {  IP = ip;  PORT = port;  NAME = name;  try  {   DSOCKET = new DatagramSocket();   receive();   send();  }catch(Exception e){} } public void send() {  Thread sendthread = new Thread()  {   public void run()   {    try    {     byte[] sendData;     while(ENABLED)     {       try       {         String message = \"Hello there!\";         sendData = new byte[message.getBytes().length];         sendData = message.getBytes();         DatagramPacket sendPacket = new DatagramPacket(sendData,sendData.length,IP,PORT);         DSOCKET.send(sendPacket);       }catch(Exception e){System.out.println(\"NetSendError: \" + e);}     }     DSOCKET.close();    }catch(Exception e){}   }   };  sendthread.start(); } public void receive() {  Thread thread = new Thread()  {   public void run()   {    byte[] receiveData;    try    {     DSOCKET.setSoTimeout(1000);     while(ENABLED)     {      receiveData = new byte[4096];      DatagramPacket receivePacket = new DatagramPacket(receiveData,receiveData.length);      DSOCKET.receive(receivePacket);      String message = new String(receivePacket.getData());      System.out.println(\"CLIENT received message: \" + message);     }    }catch(Exception e){}   }  };  thread.start(); }}",
               "LOC": 1,
               "Url": "http://www.java-gaming.org/index.php?topic=36130.0",
               "Score": 0.0241637001,
               "API_Weights": 18.17876451,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "DatagramSocket.close": "java.net.DatagramSocket.close",
                  "DatagramSocket.send": "java.net.DatagramSocket.send",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start",
                  "String.__init__": "java.lang.String.__init__",
                  "DatagramSocket.receive": "java.net.DatagramSocket.receive",
                  "DatagramSocket.setSoTimeout": "java.net.DatagramSocket.setSoTimeout",
                  "DatagramPacket.getData": "java.net.DatagramPacket.getData"
               },
               "Url_Position": 31,
               "In_Page_Order": 1,
               "Num_API_Calls": 10,
               "Dist_Center": 0.4161328326,
               "MethodInvocations": [
                  "String.__init__",
                  "DatagramSocket.send",
                  "DatagramPacket.__init__",
                  "DatagramSocket.setSoTimeout",
                  "DatagramPacket.getData",
                  "DatagramSocket.close",
                  "Thread.start",
                  "DatagramSocket.receive",
                  "DatagramSocket.__init__",
                  "Thread.__init__"
               ]
            },
            {
               "Cluster": 2,
               "Code": "\npublic QuoteServerThread() throws IOException {\n    this(\"QuoteServer\");\n}\n\npublic QuoteServerThread(String name) throws IOException {\n    super(name);\n    socket = new DatagramSocket(4445);\n\n    try {\n        in = new BufferedReader(new FileReader(\"one-liners.txt\"));\n    }   \n    catch (FileNotFoundException e){\n        System.err.println(\"Couldn't open quote file.  Serving time instead.\");\n    }\n}  \n",
               "LOC": 17,
               "Url": "https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html",
               "Score": 2.220446049e-16,
               "API_Weights": 6.442959232,
               "API_Qualified_Names": {
                  "DatagramSocket.__init__": "java.net.DatagramSocket.__init__",
                  "FileReader.__init__": "java.io.FileReader.__init__",
                  "BufferedReader.__init__": "java.io.BufferedReader.__init__"
               },
               "Url_Position": 10,
               "In_Page_Order": 2,
               "Num_API_Calls": 3,
               "Dist_Center": 0.4232359415,
               "MethodInvocations": [
                  "FileReader.__init__",
                  "DatagramSocket.__init__",
                  "BufferedReader.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 15.786498211061748,
         "top_apis_by_cluster": [
            "datagramsocket.__init__",
            "datagramsocket.send",
            "datagrampacket.__init__",
            "datagramsocket.close",
            "datagramsocket.receive",
            "bufferedreader.__init__",
            "datagrampacket.getdata",
            "string.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 3,
               "Code": "import java.util.concurrent.ArrayBlockingQueue;\r\nimport java.util.concurrent.BlockingQueue;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        int port = 50001;\r\n\r\n        /**\r\n         * The initial capacity for the blocking collection needs to be fine tuned\r\n         * based on your application requirements.\r\n         */\r\n        BlockingQueue<byte[]> messageQueue = new ArrayBlockingQueue<>(1200);\r\n\r\n        UdpUnicastServer server = new UdpUnicastServer(port);\r\n        // message queue is shared between UDP client and Data Processor\r\n        UdpUnicastClient client = new UdpUnicastClient(port, messageQueue);\r\n        DataProcessor dataProcessor = new DataProcessor(messageQueue);\r\n\r\n        /**\r\n         * Execute the components as 3 different threads\r\n         */\r\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\r\n        executorService.submit(client);\r\n        executorService.submit(server);\r\n        executorService.submit(dataProcessor);\r\n    }\r\n}",
               "LOC": 30,
               "Url": "http://www.romaniancoder.com/create-a-udp-client-server-in-java-using-the-producer-consumer-pattern/",
               "Score": 1.0,
               "API_Weights": 2.2360679775,
               "API_Qualified_Names": {
                  "BlockingQueue.__init__": "java.util.concurrent.BlockingQueue.__init__",
                  "ExecutorService.submit": "java.util.concurrent.ExecutorService.submit"
               },
               "Url_Position": 39,
               "In_Page_Order": 4,
               "Num_API_Calls": 5,
               "Dist_Center": 0.1412003168,
               "MethodInvocations": [
                  "BlockingQueue.__init__",
                  "UdpUnicastServer.__init__",
                  "ExecutorService.submit",
                  "DataProcessor.__init__",
                  "UdpUnicastClient.__init__"
               ]
            },
            {
               "Cluster": 3,
               "Code": "import java.io.*;\nimport java.net.*;\npublic class Sender\n{  public void sendTo(Object o, String hostName, int desPort)  \n{    try    \n{      InetAddress address = InetAddress.getByName(hostName);\n      ByteArrayOutputStream byteStream = new\n          ByteArrayOutputStream(5000);\n      ObjectOutputStream os = new ObjectOutputStream(new\n                              BufferedOutputStream(byteStream));\n      os.flush();\n      os.writeObject(o);\n      os.flush();\n      //retrieves byte array\n      byte[] sendBuf = byteStream.toByteArray();\n      DatagramPacket packet = new DatagramPacket(\n                          sendBuf, sendBuf.length, address, desPort);\n      int byteCount = packet.getLength();\n      dSock.send(packet);\n      os.close();\n    }\n    catch (UnknownHostException e)\n    {\n      System.err.println(\"Exception:  \" + e);\n      e.printStackTrace();    }\n    catch (IOException e)    { e.printStackTrace();\n }\n  }\n}\n",
               "LOC": 30,
               "Url": "https://www.javaworld.com/article/2077539/learn-java/java-tip-40--object-transport-via-datagram-packets.html",
               "Score": 0.7898631833,
               "API_Weights": 2.9241536226,
               "API_Qualified_Names": {
                  "ByteArrayOutputStream.__init__": "java.io.ByteArrayOutputStream.__init__",
                  "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
                  "ObjectOutputStream.__init__": "java.io.ObjectOutputStream.__init__",
                  "ObjectOutputStream.flush": "java.io.ObjectOutputStream.flush",
                  "ObjectOutputStream.writeObject": "java.io.ObjectOutputStream.writeObject",
                  "ByteArrayOutputStream.toByteArray": "java.io.ByteArrayOutputStream.toByteArray",
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramPacket.getLength": "java.net.DatagramPacket.getLength",
                  "ObjectOutputStream.close": "java.io.ObjectOutputStream.close"
               },
               "Url_Position": 16,
               "In_Page_Order": 3,
               "Num_API_Calls": 9,
               "Dist_Center": 0.1777192027,
               "MethodInvocations": [
                  "ByteArrayOutputStream.toByteArray",
                  "ByteArrayOutputStream.__init__",
                  "ObjectOutputStream.__init__",
                  "ObjectOutputStream.flush",
                  "DatagramPacket.__init__",
                  "ObjectOutputStream.close",
                  "ObjectOutputStream.writeObject",
                  "BufferedOutputStream.__init__",
                  "DatagramPacket.getLength"
               ]
            },
            {
               "Cluster": 3,
               "Code": "Thread discoveryThread = new Thread(DiscoveryThread.getInstance());\r\n    discoveryThread.start();",
               "LOC": 2,
               "Url": "https://michieldemey.be/blog/network-discovery-using-udp-broadcast/",
               "Score": 0.5868773194,
               "API_Weights": 2.8284271247,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 24,
               "In_Page_Order": 4,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2129953514,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 3,
               "Code": "Thread discoveryThread = new Thread(DiscoveryThread.getInstance());\ndiscoveryThread.start();\n",
               "LOC": 3,
               "Url": "https://demey.io/network-discovery-using-udp-broadcast/",
               "Score": 0.5868773194,
               "API_Weights": 2.8284271247,
               "API_Qualified_Names": {
                  "Thread.__init__": "java.lang.Thread.__init__",
                  "Thread.start": "java.lang.Thread.start"
               },
               "Url_Position": 22,
               "In_Page_Order": 4,
               "Num_API_Calls": 2,
               "Dist_Center": 0.2129953514,
               "MethodInvocations": [
                  "Thread.__init__",
                  "Thread.start"
               ]
            },
            {
               "Cluster": 3,
               "Code": "public class UDPTest {\r\n    EchoClient client;\r\n\r\n    @Before\r\n    public void setup(){\r\n        new EchoServer().start();\r\n        client = new EchoClient();\r\n    }\r\n\r\n    @Test\r\n    public void whenCanSendAndReceivePacket_thenCorrect() {\r\n        String echo = client.sendEcho(\"hello server\");\r\n        assertEquals(\"hello server\", echo);\r\n        echo = client.sendEcho(\"server is working\");\r\n        assertFalse(echo.equals(\"hello server\"));\r\n    }\r\n\r\n    @After\r\n    public void tearDown() {\r\n        client.sendEcho(\"end\");\r\n        client.close();\r\n    }\r\n}",
               "LOC": 23,
               "Url": "http://www.baeldung.com/udp-in-java",
               "Score": 1.110223025e-16,
               "API_Weights": 2.0,
               "API_Qualified_Names": {},
               "Url_Position": 6,
               "In_Page_Order": 3,
               "Num_API_Calls": 4,
               "Dist_Center": 0.3149865504,
               "MethodInvocations": [
                  "EchoServer.__init__",
                  "EchoClient.sendEcho",
                  "EchoClient.close",
                  "EchoClient.__init__"
               ]
            }
         ],
         "avg_cluster_api_weights": 2.56341516992616,
         "top_apis_by_cluster": [
            "thread.start",
            "thread.__init__",
            "echoclient.sendecho",
            "echoserver.__init__",
            "echoclient.__init__",
            "echoclient.close",
            "udpunicastclient.__init__",
            "dataprocessor.__init__"
         ]
      },
      {
         "cluster_snippets": [
            {
               "Cluster": 4,
               "Code": "URLFetchService fetcher= URLFetchServiceFactory.getURLFetchService();\nString data = \"foo 1.2\";\nString key  = \"YOUR_API_KEY\";\n\nString authHeaderString = \"Basic \" + Base64.encodeBase64String(key).getBytes(\"ISO-8859-1\");\nHTTPHeader authHeader   = new HTTPHeader(\"Authorization\", authHeaderString);\n\nHTTPRequest request = new HTTPRequest(\"https://www.hostedgraphite.com/api/v1/sink\", HTTPMethod.POST);\nrequest.getFetchOptions().setDeadline(10);\nrequest.setHeader(authHeader);\n\nrequest.setPayload(data.getBytes());\nHTTPResponse response = fetcher.fetch(request);\n",
               "LOC": 14,
               "Url": "https://www.hostedgraphite.com/docs/languageguide/lg_java.html",
               "Score": 1.0,
               "API_Weights": 2.4494897428,
               "API_Qualified_Names": {
                  "HTTPHeader.__init__": "com.google.appengine.api.urlfetch.HTTPHeader.__init__",
                  "HTTPRequest.__init__": "com.google.appengine.api.urlfetch.HTTPRequest.__init__",
                  "HTTPRequest.setPayload": "com.google.appengine.api.urlfetch.HTTPRequest.setPayload",
                  "URLFetchService.fetch": "com.google.appengine.api.urlfetch.URLFetchService.fetch"
               },
               "Url_Position": 36,
               "In_Page_Order": 5,
               "Num_API_Calls": 6,
               "Dist_Center": 0.1029070117,
               "MethodInvocations": [
                  "URLFetchService.fetch",
                  "HTTPRequest.setHeader",
                  "HTTPRequest.getFetchOptions",
                  "HTTPRequest.__init__",
                  "HTTPHeader.__init__",
                  "HTTPRequest.setPayload"
               ]
            },
            {
               "Cluster": 4,
               "Code": "ObjectInputStream os = new ObjectInputStream(bin);\nos.readInt();\n",
               "LOC": 3,
               "Url": "https://stackoverflow.com/questions/5236620/how-to-send-an-int-through-udp-in-java",
               "Score": 0.3174653228,
               "API_Weights": 2.1500586633,
               "API_Qualified_Names": {
                  "ObjectInputStream.__init__": "java.io.ObjectInputStream.__init__",
                  "ObjectInputStream.readInt": "java.io.ObjectInputStream.readInt"
               },
               "Url_Position": 5,
               "In_Page_Order": 2,
               "Num_API_Calls": 2,
               "Dist_Center": 0.1783258092,
               "MethodInvocations": [
                  "ObjectInputStream.readInt",
                  "ObjectInputStream.__init__"
               ]
            },
            {
               "Cluster": 4,
               "Code": "import java.io.*;\nimport java.net.*;\npublic class Receiver\n{  public Object recvObjFrom()  \n{    try\n    {\n      byte[] recvBuf = new byte[5000];\n      DatagramPacket packet = new DatagramPacket(recvBuf,\n                                                 recvBuf.length);\n      dSock.receive(packet);\n      int byteCount = packet.getLength();\n      ByteArrayInputStream byteStream = new\n                                  ByteArrayInputStream(recvBuf);\n      ObjectInputStream is = new\n           ObjectInputStream(new BufferedInputStream(byteStream));\n      Object o = is.readObject();\n      is.close();\n      return(o);\n    }\n    catch (IOException e)\n    {\n      System.err.println(\"Exception:  \" + e);\n      e.printStackTrace();\n    }\n    catch (ClassNotFoundException e)\n    { e.printStackTrace(); }\n    return(null);  }\n}\n",
               "LOC": 29,
               "Url": "https://www.javaworld.com/article/2077539/learn-java/java-tip-40--object-transport-via-datagram-packets.html",
               "Score": 0.2970451031,
               "API_Weights": 4.3371723779,
               "API_Qualified_Names": {
                  "DatagramPacket.__init__": "java.net.DatagramPacket.__init__",
                  "DatagramPacket.getLength": "java.net.DatagramPacket.getLength",
                  "ByteArrayInputStream.__init__": "java.io.ByteArrayInputStream.__init__",
                  "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
                  "ObjectInputStream.__init__": "java.io.ObjectInputStream.__init__",
                  "ObjectInputStream.readObject": "java.io.ObjectInputStream.readObject",
                  "ObjectInputStream.close": "java.io.ObjectInputStream.close"
               },
               "Url_Position": 16,
               "In_Page_Order": 4,
               "Num_API_Calls": 7,
               "Dist_Center": 0.1805822051,
               "MethodInvocations": [
                  "ByteArrayInputStream.__init__",
                  "ObjectInputStream.readObject",
                  "ObjectInputStream.close",
                  "DatagramPacket.__init__",
                  "BufferedInputStream.__init__",
                  "ObjectInputStream.__init__",
                  "DatagramPacket.getLength"
               ]
            },
            {
               "Cluster": 4,
               "Code": "//Object Input\nimport java.net.*;\nimport java.io.*;\npublic class ShowObjInput\n{  public static void main(String[] arg)\n  {    try    \n{      ObjectInputStream is;\n      ServerSocket servSock = new ServerSocket(6000);\n      Sock sock;\n      sock = servSock.accept();\n      is = new ObjectInputStream( new\n               BufferedInputStream(sock.getInputStream()));\n      Factory o = (Factory)is.readObject();\n    }    catch (IOException ex)\n    {}\n  }\n}\n",
               "LOC": 18,
               "Url": "https://www.javaworld.com/article/2077539/learn-java/java-tip-40--object-transport-via-datagram-packets.html",
               "Score": 0.0,
               "API_Weights": 4.3033167239,
               "API_Qualified_Names": {
                  "ServerSocket.__init__": "java.net.ServerSocket.__init__",
                  "ServerSocket.accept": "java.net.ServerSocket.accept",
                  "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
                  "ObjectInputStream.__init__": "java.io.ObjectInputStream.__init__",
                  "ObjectInputStream.readObject": "java.io.ObjectInputStream.readObject"
               },
               "Url_Position": 16,
               "In_Page_Order": 2,
               "Num_API_Calls": 6,
               "Dist_Center": 0.21340513,
               "MethodInvocations": [
                  "ServerSocket.__init__",
                  "ServerSocket.accept",
                  "Sock.getInputStream",
                  "BufferedInputStream.__init__",
                  "ObjectInputStream.__init__",
                  "ObjectInputStream.readObject"
               ]
            }
         ],
         "avg_cluster_api_weights": 3.310009376965702,
         "top_apis_by_cluster": [
            "objectinputstream.__init__",
            "objectinputstream.readobject",
            "bufferedinputstream.__init__",
            "objectinputstream.readint",
            "objectinputstream.close",
            "serversocket.__init__",
            "serversocket.accept",
            "sock.getinputstream"
         ]
      }
   ]
}