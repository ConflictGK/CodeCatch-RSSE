[
{"query": "How to read ZIP archive", "url": "https://www.mkyong.com/java/how-to-decompress-files-from-a-zip-file/", "url position": 9, "segments": [{"code": "\r\npackage com.mkyong.zip;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipInputStream;\r\n\r\npublic class UnZip\r\n{\r\n    List<String> fileList;\r\n    private static final String INPUT_ZIP_FILE = \"C:\\\\MyFile.zip\";\r\n    private static final String OUTPUT_FOLDER = \"C:\\\\outputzip\";\r\n\t\t\r\n    public static void main( String[] args )\r\n    {\r\n    \tUnZip unZip = new UnZip();\r\n    \tunZip.unZipIt(INPUT_ZIP_FILE,OUTPUT_FOLDER);\r\n    }\r\n    \r\n    /**\r\n     * Unzip it\r\n     * @param zipFile input zip file\r\n     * @param output zip file output folder\r\n     */\r\n    public void unZipIt(String zipFile, String outputFolder){\r\n\r\n     byte[] buffer = new byte[1024];\r\n    \t\r\n     try{\r\n    \t\t\r\n    \t//create output directory is not exists\r\n    \tFile folder = new File(OUTPUT_FOLDER);\r\n    \tif(!folder.exists()){\r\n    \t\tfolder.mkdir();\r\n    \t}\r\n    \t\t\r\n    \t//get the zip file content\r\n    \tZipInputStream zis = \r\n    \t\tnew ZipInputStream(new FileInputStream(zipFile));\r\n    \t//get the zipped file list entry\r\n    \tZipEntry ze = zis.getNextEntry();\r\n    \t\t\r\n    \twhile(ze!=null){\r\n    \t\t\t\r\n    \t   String fileName = ze.getName();\r\n           File newFile = new File(outputFolder + File.separator + fileName);\r\n                \r\n           System.out.println(\"file unzip : \"+ newFile.getAbsoluteFile());\r\n                \r\n            //create all non exists folders\r\n            //else you will hit FileNotFoundException for compressed folder\r\n            new File(newFile.getParent()).mkdirs();\r\n              \r\n            FileOutputStream fos = new FileOutputStream(newFile);             \r\n\r\n            int len;\r\n            while ((len = zis.read(buffer)) > 0) {\r\n       \t\tfos.write(buffer, 0, len);\r\n            }\r\n        \t\t\r\n            fos.close();   \r\n            ze = zis.getNextEntry();\r\n    \t}\r\n    \t\r\n        zis.closeEntry();\r\n    \tzis.close();\r\n    \t\t\r\n    \tSystem.out.println(\"Done\");\r\n    \t\t\r\n    }catch(IOException ex){\r\n       ex.printStackTrace(); \r\n    }\r\n   }    \r\n}\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\r\nfile unzip : C:\\outputzip\\pdf\\Java-Interview.pdf\r\nfile unzip : C:\\outputzip\\spy\\log\\spy.log\r\nfile unzip : C:\\outputzip\\utf-encoded.txt\r\nfile unzip : C:\\outputzip\\utf.txt\r\nDone\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "http://zetcode.com/java/zipinputstream/", "url position": 13, "segments": [{"code": "\nZipInputStream(InputStream in)\nZipInputStream(InputStream in, Charset charset)\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\npackage com.zetcode;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class JavaReadZip {\n\n    private final static Long MILLS_IN_DAY = 86400000L;\n\n    public static void main(String[] args) throws IOException {\n\n        String fileName = \"src/resources/myfile.zip\";\n\n        try (FileInputStream fis = new FileInputStream(fileName);\n                BufferedInputStream bis = new BufferedInputStream(fis);\n                ZipInputStream zis = new ZipInputStream(bis)) {\n            \n            ZipEntry ze;\n\n            while ((ze = zis.getNextEntry()) != null) {\n\n                System.out.format(\"File: %s Size: %d Last Modified %s %n\",\n                        ze.getName(), ze.getSize(),\n                        LocalDate.ofEpochDay(ze.getTime() / MILLS_IN_DAY));\n            }\n        }\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nString fileName = \"src/resources/myfile.zip\";\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\ntry (FileInputStream fis = new FileInputStream(fileName);\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nBufferedInputStream bis = new BufferedInputStream(fis);\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nZipInputStream zis = new ZipInputStream(bis)) {\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nwhile ((ze = zis.getNextEntry()) != null) {\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nSystem.out.format(\"File: %s Size: %d Last Modified %s %n\", \n        ze.getName(), ze.getSize(), \n        LocalDate.ofEpochDay(ze.getTime() / MILLS_IN_DAY));\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nFile: maven.pdf Size: 6430817 Last Modified 2017-02-23 \nFile: mavenbyexample.pdf Size: 1363061 Last Modified 2017-02-15 \nFile: modal_verbs.jpg Size: 31353 Last Modified 2017-03-04 \nFile: sid.jpg Size: 57708 Last Modified 2017-06-05 \nFile: spring-boot-reference.pdf Size: 1946586 Last Modified 2017-06-05 \n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\npackage com.zetcode;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class JavaUnzip {\n\n    public static void main(String args[]) throws Exception {\n\n        byte[] buffer = new byte[2048];\n\n        Path outDir = Paths.get(\"src/resources/output/\");\n        String zipFileName = \"src/resources/myfile.zip\";\n\n        try (FileInputStream fis = new FileInputStream(zipFileName);\n                BufferedInputStream bis = new BufferedInputStream(fis);\n                ZipInputStream stream = new ZipInputStream(bis)) {\n\n            ZipEntry entry;\n            while ((entry = stream.getNextEntry()) != null) {\n\n                Path filePath = outDir.resolve(entry.getName());\n\n                try (FileOutputStream fos = new FileOutputStream(filePath.toFile());\n                        BufferedOutputStream bos = new BufferedOutputStream(fos, buffer.length)) {\n\n                    int len;\n                    while ((len = stream.read(buffer)) > 0) {\n                        bos.write(buffer, 0, len);\n                    }\n                }\n            }\n        }\n    }\n}\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nPath outDir = Paths.get(\"src/resources/output/\");\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nwhile ((entry = stream.getNextEntry()) != null) {\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nwhile ((len  = stream.read(buffer)) > 0) {\n    bos.write(buffer, 0, len);\n}\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://tutorials.jenkov.com/java-zip/zipfile.html", "url position": 16, "segments": [{"code": "\n ZipFile zipFile = new ZipFile(\"d:\\\\data\\\\myzipfile.zip\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nZipEntry zipEntry = zipFile.getEntry(\"file1.txt\");\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nZipEntry zipEntry = zipFile.getEntry(\"dir/subdir/file1.txt\");\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nZipEntry zipEntry = zipFile.getEntry(\"dir/subdir/file1.txt\");\n\nInputStream inputStream = this.zipFile.getInputStream(zipEntry);\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nEnumeration<? extends ZipEntry> entries = zipFile.entries();\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\nwhile(entries.hasMoreElements()){\n    ZipEntry entry = entries.nextElement();\n    if(entry.isDirectory()){\n        System.out.println(\"dir  : \" + entry.getName());\n    } else {\n        System.out.println(\"file : \" + entry.getName());\n    }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://stackoverflow.com/questions/15667125/read-content-from-files-which-are-inside-zip-file", "url position": 1, "segments": [{"code": "public static void main(String[] args) throws IOException {\n    ZipFile zipFile = new ZipFile(\"C:/test.zip\");\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    while(entries.hasMoreElements()){\n        ZipEntry entry = entries.nextElement();\n        InputStream stream = zipFile.getInputStream(entry);\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "103", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private void extractAll(URI fromZip, Path toDirectory) throws IOException{\n    FileSystems.newFileSystem(fromZip, Collections.emptyMap())\n            .getRootDirectories()\n            .forEach(root -> {\n                // in a full implementation, you'd have to\n                // handle directories \n                Files.walk(root).forEach(path -> Files.copy(path, toDirectory));\n            });\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "24", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private void extractAll(URI fromZip, Path toDirectory) throws IOException{\n    FileSystem zipFs = FileSystems.newFileSystem(fromZip, Collections.emptyMap());\n\n    for(Path root : zipFs.getRootDirectories()) {\n        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n                    throws IOException {\n                // You can do anything you want with the path here\n                Files.copy(file, toDirectory);\n                return FileVisitResult.CONTINUE;\n            }\n\n            @Override\n            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) \n                    throws IOException {\n                // In a full implementation, you'd need to create each \n                // sub-directory of the destination directory before \n                // copying files into it\n                return super.preVisitDirectory(dir, attrs);\n            }\n        });\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "24", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "while (entry != null) {\n  // If entry never becomes null here, loop will never break.\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "9", "answer_stars": 0, "length": false, "semicolon": false}, {"code": "ZipEntry entry = null;\nwhile ((entry = zip.getNextEntry()) != null) {\n  // Rest of your code\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "9", "answer_stars": 0, "length": false, "semicolon": true}, {"code": "public class ZippedFileInputStream extends InputStream {\n\n    private ZipInputStream is;\n\n    public ZippedFileInputStream(ZipInputStream is){\n        this.is = is;\n    }\n\n    @Override\n    public int read() throws IOException {\n        return is.read();\n    }\n\n    @Override\n    public void close() throws IOException {\n        is.closeEntry();\n    }\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(\"SomeFile.zip\"));\n\n    while((entry = zipInputStream.getNextEntry())!= null) {\n\n     ZippedFileInputStream archivedFileInputStream = new ZippedFileInputStream(zipInputStream);\n\n     //... perform whatever logic you want here with ZippedFileInputStream \n\n     // note that this will only close the current entry stream and not the ZipInputStream\n     archivedFileInputStream.close();\n\n    }\n    zipInputStream.close();\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.oracle.com/technetwork/articles/java/compress-1565076.html", "url position": 14, "segments": [{"code": "\n0, 40\n0, 40\n0,10 1,20 0,10\n0,10 1,1 0,18 1,1 0,10\n0,10 1,1 0,18 1,1 0,10\n0,10 1,1 0,18 1,1 0,10\n0,10 1,20 0,10\n0,40", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\nFileInputStream fis = new FileInputStream(\"figs.zip\"); ZipInputStream zin = new    ZipInputStream(new BufferedInputStream(fis)); ", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nZipEntry entry;\nwhile((entry = zin.getNextEntry()) != null) {\n   // extract data\n   // open output streams\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nint BUFFER = 2048;\nFileOutputStream fos = new \n  FileOutputStream(entry.getName());\nBufferedOutputStream dest = new \n  BufferedOutputStream(fos, BUFFER);\n ", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nwhile ((count = zin.read(data, 0, BUFFER)) != -1) {\n   //System.out.write(x);\n   dest.write(data, 0, count);\n}", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ndest.flush();\ndest.close();\nzin.close();", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class UnZip {\n   final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedOutputStream dest = null;\n         FileInputStream fis = new \n\t   FileInputStream(argv[0]);\n         ZipInputStream zis = new \n\t   ZipInputStream(new BufferedInputStream(fis));\n         ZipEntry entry;\n         while((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" +entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            // write the files to the disk\n            FileOutputStream fos = new \n\t      FileOutputStream(entry.getName());\n            dest = new \n              BufferedOutputStream(fos, BUFFER);\n            while ((count = zis.read(data, 0, BUFFER)) \n              != -1) {\n               dest.write(data, 0, count);\n            }\n            dest.flush();\n            dest.close();\n         }\n         zis.close();\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nwhile(e.hasMoreElements()) {\n   entry = (ZipEntry) e.nextElement();\n   // read contents and save them\n}", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nis = new \n  BufferedInputStream(zipfile.getInputStream(entry)); ", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nbyte data[] = new byte[BUFFER];\nFileOutputStream fos = new \n  FileOutputStream(entry.getName());\ndest = new BufferedOutputStream(fos, BUFFER);\nwhile ((count = is.read(data, 0, BUFFER)) != -1) {\n   dest.write(data, 0, count);\n} ", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\ndest.flush();\ndest.close();\nis.close();", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.*;\nimport java.util.zip.*;\n\npublic class UnZip2 {\n   static final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedOutputStream dest = null;\n         BufferedInputStream is = null;\n         ZipEntry entry;\n         ZipFile zipfile = new ZipFile(argv[0]);\n         Enumeration e = zipfile.entries();\n         while(e.hasMoreElements()) {\n            entry = (ZipEntry) e.nextElement();\n            System.out.println(\"Extracting: \" +entry);\n            is = new BufferedInputStream\n              (zipfile.getInputStream(entry));\n            int count;\n            byte data[] = new byte[BUFFER];\n            FileOutputStream fos = new \n              FileOutputStream(entry.getName());\n            dest = new \n              BufferedOutputStream(fos, BUFFER);\n            while ((count = is.read(data, 0, BUFFER)) \n              != -1) {\n               dest.write(data, 0, count);\n            }\n            dest.flush();\n            dest.close();\n            is.close();\n         }\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n}", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nFileOutputStream dest = new \n  FileOutputStream(\"myfigs.zip\");\nZipOutputStream out = new \n  ZipOutputStream(new BufferedOutputStream(dest)); ", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nFile f = new File(\".\");\nString files[] = f.list();\nfor (int i=0; i<files.length; i++) {\n   System.out.println(\"Adding: \"+files[i]);\n   FileInputStream fi = new FileInputStream(files[i]);\n   // create zip entry\n   // add entries to ZIP file\n}", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nint count;\nwhile((count = origin.read(data, 0, BUFFER)) != -1) {\n   out.write(data, 0, count);\n} ", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\norigin.close();\nout.close();", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class Zip {\n   static final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedInputStream origin = null;\n         FileOutputStream dest = new \n           FileOutputStream(\"c:\\\\zip\\\\myfigs.zip\");\n         ZipOutputStream out = new ZipOutputStream(new \n           BufferedOutputStream(dest));\n         //out.setMethod(ZipOutputStream.DEFLATED);\n         byte data[] = new byte[BUFFER];\n         // get a list of files from current directory\n         File f = new File(\".\");\n         String files[] = f.list();\n\n         for (int i=0; i<files.length; i++) {\n            System.out.println(\"Adding: \"+files[i]);\n            FileInputStream fi = new \n              FileInputStream(files[i]);\n            origin = new \n              BufferedInputStream(fi, BUFFER);\n            ZipEntry entry = new ZipEntry(files[i]);\n            out.putNextEntry(entry);\n            int count;\n            while((count = origin.read(data, 0, \n              BUFFER)) != -1) {\n               out.write(data, 0, count);\n            }\n            origin.close();\n         }\n         out.close();\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n} ", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class Zip {\n   static final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedInputStream origin = null;\n         FileOutputStream dest = new \n           FileOutputStream(\"c:\\\\zip\\\\myfigs.zip\");\n         CheckedOutputStream checksum = new \n           CheckedOutputStream(dest, new Adler32());\n         ZipOutputStream out = new \n           ZipOutputStream(new \n             BufferedOutputStream(checksum));\n         //out.setMethod(ZipOutputStream.DEFLATED);\n         byte data[] = new byte[BUFFER];\n         // get a list of files from current directory\n         File f = new File(\".\");\n         String files[] = f.list();\n\n         for (int i=0; i<files.length; i++) {\n            System.out.println(\"Adding: \"+files[i]);\n            FileInputStream fi = new \n              FileInputStream(files[i]);\n            origin = new \n              BufferedInputStream(fi, BUFFER);\n            ZipEntry entry = new ZipEntry(files[i]);\n            out.putNextEntry(entry);\n            int count;\n            while((count = origin.read(data, 0, \n              BUFFER)) != -1) {\n               out.write(data, 0, count);\n            }\n            origin.close();\n         }\n         out.close();\n         System.out.println(\"checksum: \n           \"+checksum.getChecksum().getValue());\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n} ", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class UnZip {\n   public static void main (String argv[]) {\n      try {\n         final int BUFFER = 2048;\n         BufferedOutputStream dest = null;\n         FileInputStream fis = new \n\t   FileInputStream(argv[0]);\n         CheckedInputStream checksum = new \n           CheckedInputStream(fis, new Adler32());\n         ZipInputStream zis = new \n           ZipInputStream(new \n             BufferedInputStream(checksum));\n         ZipEntry entry;\n         while((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" +entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            // write the files to the disk\n            FileOutputStream fos = new \n              FileOutputStream(entry.getName());\n            dest = new BufferedOutputStream(fos, \n              BUFFER);\n            while ((count = zis.read(data, 0, \n              BUFFER)) != -1) {\n               dest.write(data, 0, count);\n            }\n            dest.flush();\n            dest.close();\n         }\n         zis.close();\n         System.out.println(\"Checksum: \n           \"+checksum.getChecksum().getValue());\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n}\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.io.*;\n\npublic class Employee implements Serializable {\n   String name;\n   int age;\n   int salary;\n\n   public Employee(String name, int age, int salary) {\n      this.name = name;\n      this.age = age;\n      this.salary = salary;\n   }\n\n   public void print() {\n      System.out.println(\"Record for: \"+name);\n      System.out.println(\"Name: \"+name);\n      System.out.println(\"Age: \"+age);\n      System.out.println(\"Salary: \"+salary);\n  }\n}\n ", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class SaveEmployee {\n   public static void main(String argv[]) throws \n     Exception {\n      // create some objects\n      Employee sarah = new Employee(\"S. Jordan\", 28, \n        56000);\n      Employee sam = new Employee(\"S. McDonald\", 29, \n        58000);\n      // serialize the objects sarah and sam\n      FileOutputStream fos = new \n        FileOutputStream(\"db\");\n      GZIPOutputStream gz = new GZIPOutputStream(fos);\n      ObjectOutputStream oos = new \n        ObjectOutputStream(gz);\n      oos.writeObject(sarah);\n      oos.writeObject(sam);\n      oos.flush();\n      oos.close();\n      fos.close();\n   }\n} ", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class ReadEmployee {\n   public static void main(String argv[]) throws \n     Exception{\n      //deserialize objects sarah and sam\n      FileInputStream fis = new FileInputStream(\"db\");\n      GZIPInputStream gs = new GZIPInputStream(fis);\n      ObjectInputStream ois = new ObjectInputStream(gs);\n      Employee sarah = (Employee) ois.readObject();\n      Employee sam = (Employee) ois.readObject();\n      //print the records after reconstruction of state\n      sarah.print();\n      sam.print();\n      ois.close();\n      fis.close();\n   }\n}\n ", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n// write to client\nGZIPOutputStream gzipout = new \n  GZIPOutputStream(socket.getOutputStream());\nObjectOutputStream oos = new \n  ObjectOutputStream(gzipout);\noos.writeObject(obj);\ngzipos.finish(); ", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\n// read from server\nSocket socket = new Socket(remoteServerIP, PORT);\nGZIPInputStream gzipin = new \n  GZIPInputStream(socket.getInputStream());\nObjectInputStream ois = new ObjectInputStream(gzipin);\nObject o = ois.readObject(); ", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://www.java-tips.org/java-se-tips-100019/38-java-util-zip/601-how-to-read-files-within-a-zip-file.html", "url position": 8, "segments": [{"code": " import java.io.*;\r\nimport java.util.zip.*;\r\n\r\nclass  readZipFiles \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n         if (args.length != 1) \r\n        {\r\n            System.out.println(\"Usage: java testFiles [zipfile path] \");\r\n            return;\r\n        }\r\n        try\r\n        {\r\n            String filename = args[0];\r\n            readZipFiles list = new readZipFiles( );\r\n            list.readZipFiles(filename);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void readZipFiles(String filename)\r\n    {\r\n        try\r\n        {\r\n            byte[] buf = new byte[1024];\r\n            ZipInputStream zipinputstream = null;\r\n            ZipEntry zipentry;\r\n            zipinputstream = new ZipInputStream(\r\n                 new FileInputStream(filename));\r\n\r\n            zipentry = zipinputstream.getNextEntry();\r\n            while (zipentry != null) \r\n            { \r\n                //for each entry to be extracted\r\n                String entryName = zipentry.getName();\r\n                System.out.println(\"File ::\"+entryName);\r\n                RandomAccessFile  rf;\r\n                File newFile = new File(entryName);\r\n                String directory = newFile.getParent();\r\n\r\n                if(directory == null)\r\n                {\r\n                    if(newFile.isDirectory())\r\n                        break;\r\n                }\r\n\r\n                rf = new RandomAccessFile(entryName,\"r\");               \r\n                String line;\r\n\r\n                if ((line =rf.readLine()) !=null)\r\n                {\r\n                    System.out.println(line);\r\n                }\r\n\r\n                rf.close(); \r\n                zipinputstream.closeEntry();\r\n                zipentry = zipinputstream.getNextEntry();\r\n\r\n            }//while\r\n\r\n            zipinputstream.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://stackoverflow.com/questions/46217926/how-to-read-all-java-files-from-a-zip-file", "url position": 2, "segments": [{"code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport org.apache.commons.io.IOUtils;\n\npublic class test {\n    public static void main(String[] args) throws IOException {\n        ZipFile zipFile = new ZipFile(\"test.zip\");\n        Enumeration<? extends ZipEntry> entries = zipFile.entries();\n        System.out.println(entries);\n\n        while(entries.hasMoreElements()){\n            ZipEntry entry = entries.nextElement();\n            System.out.println(entry.getName());\n            if(entry.getName().contains(\"java\")){\n                InputStream stream = zipFile.getInputStream(entry);\n                System.out.println(IOUtils.toString(stream, StandardCharsets.UTF_8));\n            }\n        }\n    }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "File javaFile = new File(zipEntry.getName());\njavaFiles.add(javaFile); \n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": false, "semicolon": true}, {"code": " ZipFile zipFile = new ZipFile(\"C:/test.zip\");\n\nEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\nwhile(entries.hasMoreElements()){\n    ZipEntry entry = entries.nextElement();\n    InputStream stream = zipFile.getInputStream(entry);\n}\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": "0", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipFile.html", "url position": 17, "segments": [{"code": "<pre>public class <span class=\"strong\">ZipFile</span>\nextends <a href=\"../../../java/lang/Object.html\" title=\"class in java.lang\">Object</a>\nimplements <a href=\"../../../java/io/Closeable.html\" title=\"interface in java.io\">Closeable</a></pre>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int OPEN_READ</pre>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int OPEN_DELETE</pre>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long LOCSIG</pre>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long EXTSIG</pre>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long CENSIG</pre>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long ENDSIG</pre>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCHDR</pre>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTHDR</pre>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENHDR</pre>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDHDR</pre>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCVER</pre>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCFLG</pre>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCHOW</pre>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCTIM</pre>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCCRC</pre>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCSIZ</pre>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCLEN</pre>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCNAM</pre>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCEXT</pre>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTCRC</pre>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTSIZ</pre>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTLEN</pre>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENVEM</pre>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENVER</pre>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENFLG</pre>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENHOW</pre>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENTIM</pre>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENCRC</pre>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENSIZ</pre>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENLEN</pre>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENNAM</pre>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENEXT</pre>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENCOM</pre>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENDSK</pre>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENATT</pre>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENATX</pre>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENOFF</pre>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDSUB</pre>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDTOT</pre>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDSIZ</pre>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDOFF</pre>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDCOM</pre>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipFile(<a href=\"../../../java/lang/String.html\" title=\"class in java.lang\">String</a>\u00a0name)\n        throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipFile(<a href=\"../../../java/io/File.html\" title=\"class in java.io\">File</a>\u00a0file,\n       int\u00a0mode)\n        throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipFile(<a href=\"../../../java/io/File.html\" title=\"class in java.io\">File</a>\u00a0file)\n        throws <a href=\"../../../java/util/zip/ZipException.html\" title=\"class in java.util.zip\">ZipException</a>,\n               <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipFile(<a href=\"../../../java/io/File.html\" title=\"class in java.io\">File</a>\u00a0file,\n       int\u00a0mode,\n       <a href=\"../../../java/nio/charset/Charset.html\" title=\"class in java.nio.charset\">Charset</a>\u00a0charset)\n        throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipFile(<a href=\"../../../java/lang/String.html\" title=\"class in java.lang\">String</a>\u00a0name,\n       <a href=\"../../../java/nio/charset/Charset.html\" title=\"class in java.nio.charset\">Charset</a>\u00a0charset)\n        throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipFile(<a href=\"../../../java/io/File.html\" title=\"class in java.io\">File</a>\u00a0file,\n       <a href=\"../../../java/nio/charset/Charset.html\" title=\"class in java.nio.charset\">Charset</a>\u00a0charset)\n        throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0<a href=\"../../../java/lang/String.html\" title=\"class in java.lang\">String</a>\u00a0getComment()</pre>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0<a href=\"../../../java/util/zip/ZipEntry.html\" title=\"class in java.util.zip\">ZipEntry</a>\u00a0getEntry(<a href=\"../../../java/lang/String.html\" title=\"class in java.lang\">String</a>\u00a0name)</pre>", "in_page_order": 51, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0<a href=\"../../../java/io/InputStream.html\" title=\"class in java.io\">InputStream</a>\u00a0getInputStream(<a href=\"../../../java/util/zip/ZipEntry.html\" title=\"class in java.util.zip\">ZipEntry</a>\u00a0entry)\n                           throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 52, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0<a href=\"../../../java/lang/String.html\" title=\"class in java.lang\">String</a>\u00a0getName()</pre>", "in_page_order": 53, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0<a href=\"../../../java/util/Enumeration.html\" title=\"interface in java.util\">Enumeration</a>&lt;? extends <a href=\"../../../java/util/zip/ZipEntry.html\" title=\"class in java.util.zip\">ZipEntry</a>&gt;\u00a0entries()</pre>", "in_page_order": 54, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0int\u00a0size()</pre>", "in_page_order": 55, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0void\u00a0close()\n           throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 56, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>protected\u00a0void\u00a0finalize()\n                 throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 57, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipInputStream.html", "url position": 18, "segments": [{"code": "<pre>public class <span class=\"strong\">ZipInputStream</span>\nextends <a href=\"../../../java/util/zip/InflaterInputStream.html\" title=\"class in java.util.zip\">InflaterInputStream</a></pre>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long LOCSIG</pre>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long EXTSIG</pre>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long CENSIG</pre>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0long ENDSIG</pre>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCHDR</pre>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTHDR</pre>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENHDR</pre>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDHDR</pre>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCVER</pre>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCFLG</pre>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCHOW</pre>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCTIM</pre>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCCRC</pre>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCSIZ</pre>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCLEN</pre>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCNAM</pre>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int LOCEXT</pre>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTCRC</pre>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTSIZ</pre>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int EXTLEN</pre>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENVEM</pre>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENVER</pre>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENFLG</pre>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENHOW</pre>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENTIM</pre>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENCRC</pre>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENSIZ</pre>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENLEN</pre>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENNAM</pre>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENEXT</pre>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENCOM</pre>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENDSK</pre>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENATT</pre>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENATX</pre>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int CENOFF</pre>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDSUB</pre>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDTOT</pre>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDSIZ</pre>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDOFF</pre>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public static final\u00a0int ENDCOM</pre>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipInputStream(<a href=\"../../../java/io/InputStream.html\" title=\"class in java.io\">InputStream</a>\u00a0in)</pre>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0ZipInputStream(<a href=\"../../../java/io/InputStream.html\" title=\"class in java.io\">InputStream</a>\u00a0in,\n              <a href=\"../../../java/nio/charset/Charset.html\" title=\"class in java.nio.charset\">Charset</a>\u00a0charset)</pre>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0<a href=\"../../../java/util/zip/ZipEntry.html\" title=\"class in java.util.zip\">ZipEntry</a>\u00a0getNextEntry()\n                      throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0void\u00a0closeEntry()\n                throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0int\u00a0available()\n              throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0int\u00a0read(byte[]\u00a0b,\n       int\u00a0off,\n       int\u00a0len)\n         throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0long\u00a0skip(long\u00a0n)\n          throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>public\u00a0void\u00a0close()\n           throws <a href=\"../../../java/io/IOException.html\" title=\"class in java.io\">IOException</a></pre>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "<pre>protected\u00a0<a href=\"../../../java/util/zip/ZipEntry.html\" title=\"class in java.util.zip\">ZipEntry</a>\u00a0createZipEntry(<a href=\"../../../java/lang/String.html\" title=\"class in java.lang\">String</a>\u00a0name)</pre>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "http://www.thecoderscorner.com/team-blog/java-and-jvm/12-reading-a-zip-file-from-java-using-zipinputstream/", "url position": 7, "segments": [{"code": "package com.thecoderscorner.example.compression;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Date;\nimport java.util.logging.Logger;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * ZipReader reads the zip file specified using ZipInputStream,\n * it then outputs the raw files into the output directory\n * specified as a parameter.\n */\npublic class ZipReader\n{\n    private static final Logger LOGGER = Logger.getLogger(\"ZipReader\");\n    // Expands the zip file passed as argument 1, into the\n    // directory provided in argument 2\n    public static void main(String args[]) throws Exception\n    {\n        if(args.length != 2)\n        {\n            LOGGER.severe(\"zipreader zipfile outputdir\");\n            return;\n        }\n\n        // create a buffer to improve copy performance later.\n        byte[] buffer = new byte[2048];\n\n        Path outDir = Paths.get(args[1]);\n\n        try(\n                // we open the zip file using a java 7 try with resources block so\n                // that we don't need a finally.\n                ZipInputStream stream = new ZipInputStream(new FileInputStream(args[0]))\n        )\n        {\n            LOGGER.info(\"Zip file: \" + args[0] + \" has been opened\");\n\n            // now iterate through each file in the zip archive. The get\n            // next entry call will return a ZipEntry for each file in\n            // the stream\n            ZipEntry entry;\n            while((entry = stream.getNextEntry())!=null)\n            {\n                // We can read the file information from the ZipEntry.\n                String fileInfo = String.format(\"Entry: [%s] len %d added %TD\",\n                                entry.getName(), entry.getSize(),\n                                new Date(entry.getTime()));\n                LOGGER.info(fileInfo);\n\n                Path filePath = outDir.resolve(entry.getName());\n\n                // Now we can read the file data from the stream. We now\n                // treat the stream like a usual input stream reading from\n                // it until it returns 0 or less.\n                try (\n                        FileOutputStream  output = new FileOutputStream(filePath.toFile())\n                )\n                {\n                    LOGGER.info(\"Writing file: \" + filePath);\n                    int len;\n                    while ((len = stream.read(buffer)) > 0)\n                    {\n                        output.write(buffer, 0, len);\n                    }\n                }\n            }\n        }\n    }\n}\n\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "Mar 28, 2017 7:36:43 PM com.thecoderscorner.example.compression.ZipReader main\nINFO: Zip file: c:/dev/temp/transistor.zip has been opened\nMar 28, 2017 7:36:43 PM com.thecoderscorner.example.compression.ZipReader main\nINFO: Entry: [transistor.jpg] len 2329 added 05/02/15\nMar 28, 2017 7:36:43 PM com.thecoderscorner.example.compression.ZipReader main\nINFO: Writing file: c:\\dev\\temp\\zipout\\transistor.jpg\n\nProcess finished with exit code 0\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "dave@DAVESLAPTOP:/mnt/c/Dev/temp/zipout$ ls -l\ntotal 4\n-rwxrwxrwx 1 root root 2329 Mar 28 19:36 transistor.jpg\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "http://www.avajava.com/tutorials/lessons/how-do-i-unzip-the-contents-of-a-zip-file.html", "url position": 12, "segments": [{"code": "\r\nfile1.txt\r\nfile2.txt\r\nfolder/file3.txt\r\nfolder/file4.txt\r\nf1/f2/f3/file5.txt\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "package test;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.Enumeration;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipFile;\r\n\r\npublic class ExtractZipContents {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\ttry {\r\n\t\t\tZipFile zipFile = new ZipFile(\"test.zip\");\r\n\t\t\tEnumeration<?> enu = zipFile.entries();\r\n\t\t\twhile (enu.hasMoreElements()) {\r\n\t\t\t\tZipEntry zipEntry = (ZipEntry) enu.nextElement();\r\n\r\n\t\t\t\tString name = zipEntry.getName();\r\n\t\t\t\tlong size = zipEntry.getSize();\r\n\t\t\t\tlong compressedSize = zipEntry.getCompressedSize();\r\n\t\t\t\tSystem.out.printf(\"name: %-20s | size: %6d | compressed size: %6d\\n\", \r\n\t\t\t\t\t\tname, size, compressedSize);\r\n\r\n\t\t\t\tFile file = new File(name);\r\n\t\t\t\tif (name.endsWith(\"/\")) {\r\n\t\t\t\t\tfile.mkdirs();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tFile parent = file.getParentFile();\r\n\t\t\t\tif (parent != null) {\r\n\t\t\t\t\tparent.mkdirs();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tInputStream is = zipFile.getInputStream(zipEntry);\r\n\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\r\n\t\t\t\tbyte[] bytes = new byte[1024];\r\n\t\t\t\tint length;\r\n\t\t\t\twhile ((length = is.read(bytes)) >= 0) {\r\n\t\t\t\t\tfos.write(bytes, 0, length);\r\n\t\t\t\t}\r\n\t\t\t\tis.close();\r\n\t\t\t\tfos.close();\r\n\r\n\t\t\t}\r\n\t\t\tzipFile.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://stackoverflow.com/questions/36548755/read-zip-file-content-without-extracting-in-java", "url position": 3, "segments": [{"code": "public static void main(String[] args) throws IOException {\n    ZipFile zip = new ZipFile(\"C:\\\\Users\\\\mofh\\\\Desktop\\\\test.zip\");\n\n\n    for (Enumeration e = zip.entries(); e.hasMoreElements(); ) {\n        ZipEntry entry = (ZipEntry) e.nextElement();\n        if (!entry.isDirectory()) {\n            if (FilenameUtils.getExtension(entry.getName()).equals(\"png\")) {\n                byte[] image = getImage(zip.getInputStream(entry));\n                //do your thing\n            } else if (FilenameUtils.getExtension(entry.getName()).equals(\"txt\")) {\n                StringBuilder out = getTxtFiles(zip.getInputStream(entry));\n                //do your thing\n            }\n        }\n    }\n\n\n}\n\nprivate  static StringBuilder getTxtFiles(InputStream in)  {\n    StringBuilder out = new StringBuilder();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n    String line;\n    try {\n        while ((line = reader.readLine()) != null) {\n            out.append(line);\n        }\n    } catch (IOException e) {\n        // do something, probably not a text file\n        e.printStackTrace();\n    }\n    return out;\n}\n\nprivate static byte[] getImage(InputStream in)  {\n    try {\n        BufferedImage image = ImageIO.read(in); //just checking if the InputStream belongs in fact to an image\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"png\", baos);\n        return baos.toByteArray();\n    } catch (IOException e) {\n        // do something, it is not a image\n        e.printStackTrace();\n    }\n    return null;\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public static void main(String args[]) throws Exception\n{\n    //bis, zis as you have\n    try{\n        ZipEntry file;\n        while((file = zis.getNextEntry())!=null) // get next file and continue only if file is not null\n        {\n            byte b[] = new byte[(int)file.getSize()]; // create array to read.\n            zis.read(b); // read bytes in b\n            if(file.getName().endsWith(\".txt\")){\n                // read files. You have data in `b`\n            }else if(file.getName().endsWith(\".png\")){\n                // process image\n            }\n        }\n    }\n    finally{\n        zis.close();\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "1", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.java2s.com/Code/Java/File-Input-Output/ReadingtheContentsofaZIPFile.htm", "url position": 6, "segments": [{"code": "         \nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\npublic class ReadZip {\n  public static void main(String args[]) {\n    try {\n      ZipFile zf = new ZipFile(\"ReadZip.zip\");\n      Enumeration entries = zf.entries();\n\n      BufferedReader input = new BufferedReader(new InputStreamReader(\n          System.in));\n      while (entries.hasMoreElements()) {\n        ZipEntry ze = (ZipEntry) entries.nextElement();\n        System.out.println(\"Read \" + ze.getName() + \"?\");\n        String inputLine = input.readLine();\n        if (inputLine.equalsIgnoreCase(\"yes\")) {\n          long size = ze.getSize();\n          if (size > 0) {\n            System.out.println(\"Length is \" + size);\n            BufferedReader br = new BufferedReader(\n                new InputStreamReader(zf.getInputStream(ze)));\n            String line;\n            while ((line = br.readLine()) != null) {\n              System.out.println(line);\n            }\n            br.close();\n          }\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n\n           \n         \n    \n    \n    \n    \n    \n    \n    \n    \n  \n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://stackoverflow.com/questions/23869228/how-to-read-file-from-zip-using-inputstream", "url position": 5, "segments": [{"code": " zipStream = new ZipInputStream(channelSftp.get(\"Port_Increment_201405261400_2251.zip\"));\n zipStream.getNextEntry();\n\n sc = new Scanner(zipStream);\n while (sc.hasNextLine()) {\n     System.out.println(sc.nextLine());\n }\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "14", "answer_stars": 0, "length": true, "semicolon": true}, {"code": "// Expands the zip file passed as argument 1, into the\n// directory provided in argument 2\npublic static void main(String args[]) throws Exception\n{\n    if(args.length != 2)\n    {\n        System.err.println(\"zipreader zipfile outputdir\");\n        return;\n    }\n\n    // create a buffer to improve copy performance later.\n    byte[] buffer = new byte[2048];\n\n    // open the zip file stream\n    InputStream theFile = new FileInputStream(args[0]);\n    ZipInputStream stream = new ZipInputStream(theFile);\n    String outdir = args[1];\n\n    try\n    {\n\n        // now iterate through each item in the stream. The get next\n        // entry call will return a ZipEntry for each file in the\n        // stream\n        ZipEntry entry;\n        while((entry = stream.getNextEntry())!=null)\n        {\n            String s = String.format(\"Entry: %s len %d added %TD\",\n                            entry.getName(), entry.getSize(),\n                            new Date(entry.getTime()));\n            System.out.println(s);\n\n            // Once we get the entry from the stream, the stream is\n            // positioned read to read the raw data, and we keep\n            // reading until read returns 0 or less.\n            String outpath = outdir + \"/\" + entry.getName();\n            FileOutputStream output = null;\n            try\n            {\n                output = new FileOutputStream(outpath);\n                int len = 0;\n                while ((len = stream.read(buffer)) > 0)\n                {\n                    output.write(buffer, 0, len);\n                }\n            }\n            finally\n            {\n                // we must always close the output file\n                if(output!=null) output.close();\n            }\n        }\n    }\n    finally\n    {\n        // we must always close the zip file.\n        stream.close();\n    }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": "11", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://stackoverflow.com/questions/35313884/how-to-read-files-in-a-zip-file-in-java", "url position": 4, "segments": [{"code": "ZipEntry entry = entries.nextElement();\nif (!entry.isDirectory()) {\n    InputStream stream = zipFile.getInputStream(entry);\n...\n    stream.close();\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": true, "answer_votes": "2", "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://javarevisited.blogspot.gr/2014/06/2-examples-to-read-zip-files-in-java-zipFile-vs-zipInputStream.html", "url position": 11, "segments": [{"code": "import java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipInputStream;\n\n/**\n * Java program to iterate and read file entries from Zip archive.\n * This program demonstrate two ways to retrieve files from Zip using ZipFile and by using ZipInputStream class.\n * @author Javin\n */\n\npublic class ZipFileReader {\n\n    // This Zip file contains 11 PNG images\n    private static final String FILE_NAME = \"C:\\\\temp\\\\pics.zip\";\n    private static final String OUTPUT_DIR = \"C:\\\\temp\\\\Images\\\\\";\n    private static final int BUFFER_SIZE = 8192;\n\n    public static void main(String args[]) throws IOException {\n\n        // Prefer ZipFile over ZipInputStream\n        readUsingZipFile();\n    //  readUsingZipInputStream();\n\n    }\n\n    /*\n     * Example of reading Zip archive using ZipFile class\n     */\n\n    private static void readUsingZipFile() throws IOException {\n        final ZipFile file = new ZipFile(FILE_NAME);\n        System.out.println(\"Iterating over zip file : \" + FILE_NAME);\n\n        try {\n            final Enumeration<? extends ZipEntry> entries = file.entries();\n            while (entries.hasMoreElements()) {\n                final ZipEntry entry = entries.nextElement();\n                System.out.printf(\"File: %s Size %d  Modified on %TD %n\", entry.getName(), entry.getSize(), new Date(entry.getTime()));\n                extractEntry(entry, file.getInputStream(entry));\n            }\n            System.out.printf(\"Zip file %s extracted successfully in %s\", FILE_NAME, OUTPUT_DIR);\n        } finally {\n            file.close();\n        }\n\n    }\n\n    /*\n     * Example of reading Zip file using ZipInputStream in Java.\n     */\n\n    private static void readUsingZipInputStream() throws IOException {\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(FILE_NAME));\n        final ZipInputStream is = new ZipInputStream(bis);\n\n        try {\n            ZipEntry entry;\n            while ((entry = is.getNextEntry()) != null) {\n                System.out.printf(\"File: %s Size %d  Modified on %TD %n\", entry.getName(), entry.getSize(), new Date(entry.getTime()));\n                extractEntry(entry, is);\n            }\n        } finally {\n            is.close();\n        }\n\n    }\n\n    /*\n     * Utility method to read  data from InputStream\n     */\n\n    private static void extractEntry(final ZipEntry entry, InputStream is) throws IOException {\n        String exractedFile = OUTPUT_DIR + entry.getName();\n        FileOutputStream fos = null;\n\n        try {\n            fos = new FileOutputStream(exractedFile);\n            final byte[] buf = new byte[BUFFER_SIZE];\n            int read = 0;\n            int length;\n\n            while ((length = is.read(buf, 0, buf.length)) >= 0) {\n                fos.write(buf, 0, length);\n            }\n\n        } catch (IOException ioex) {\n            fos.close();\n        }\n\n    }\n\n}\n\nOutput:\nIterating over zip file : C:\\temp\\pics.zip\nFile: Image  (11).png Size 21294  Modified on 10/24/13\nFile: Image  (1).png Size 22296  Modified on 11/19/13\nFile: Image  (2).png Size 10458  Modified on 10/24/13\nFile: Image  (3).png Size 18425  Modified on 11/19/13\nFile: Image  (4).png Size 31888  Modified on 11/19/13\nFile: Image  (5).png Size 27454  Modified on 11/19/13\nFile: Image  (6).png Size 67608  Modified on 11/19/13\nFile: Image  (7).png Size 8659  Modified on 11/19/13\nFile: Image  (8).png Size 40015  Modified on 11/19/13\nFile: Image  (9).png Size 17062  Modified on 10/24/13\nFile: Image  (10).png Size 42467  Modified on 10/24/13\nZip file C:\\temp\\pics.zip extracted successfully in C:\\temp\\Images\\", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.baeldung.com/java-compress-and-uncompress", "url position": 15, "segments": [{"code": "public class ZipFile {\r\n    public static void main(String[] args) throws IOException {\r\n        String sourceFile = \"test1.txt\";\r\n        FileOutputStream fos = new FileOutputStream(\"compressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        File fileToZip = new File(sourceFile);\r\n        FileInputStream fis = new FileInputStream(fileToZip);\r\n        ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\r\n        zipOut.putNextEntry(zipEntry);\r\n        final byte[] bytes = new byte[1024];\r\n        int length;\r\n        while((length = fis.read(bytes)) >= 0) {\r\n            zipOut.write(bytes, 0, length);\r\n        }\r\n        zipOut.close();\r\n        fis.close();\r\n        fos.close();\r\n    }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class ZipMultipleFiles {\r\n    public static void main(String[] args) throws IOException {\r\n        List<String> srcFiles = Arrays.asList(\"test1.txt\", \"test2.txt\");\r\n        FileOutputStream fos = new FileOutputStream(\"multiCompressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        for (String srcFile : srcFiles) {\r\n            File fileToZip = new File(srcFile);\r\n            FileInputStream fis = new FileInputStream(fileToZip);\r\n            ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\r\n            zipOut.putNextEntry(zipEntry);\r\n\r\n            byte[] bytes = new byte[1024];\r\n            int length;\r\n            while((length = fis.read(bytes)) >= 0) {\r\n                zipOut.write(bytes, 0, length);\r\n            }\r\n            fis.close();\r\n        }\r\n        zipOut.close();\r\n        fos.close();\r\n    }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class ZipDirectory {\r\n    public static void main(String[] args) throws IOException {\r\n        String sourceFile = \"zipTest\";\r\n        FileOutputStream fos = new FileOutputStream(\"dirCompressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        File fileToZip = new File(sourceFile);\r\n\r\n        zipFile(fileToZip, fileToZip.getName(), zipOut);\r\n        zipOut.close();\r\n        fos.close();\r\n    }\r\n\r\n    private static void zipFile(File fileToZip, String fileName, ZipOutputStream zipOut) throws IOException {\r\n        if (fileToZip.isHidden()) {\r\n            return;\r\n        }\r\n        if (fileToZip.isDirectory()) {\r\n            File[] children = fileToZip.listFiles();\r\n            for (File childFile : children) {\r\n                zipFile(childFile, fileName + \"/\" + childFile.getName(), zipOut);\r\n            }\r\n            return;\r\n        }\r\n        FileInputStream fis = new FileInputStream(fileToZip);\r\n        ZipEntry zipEntry = new ZipEntry(fileName);\r\n        zipOut.putNextEntry(zipEntry);\r\n        byte[] bytes = new byte[1024];\r\n        int length;\r\n        while ((length = fis.read(bytes)) >= 0) {\r\n            zipOut.write(bytes, 0, length);\r\n        }\r\n        fis.close();\r\n    }\r\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class UnzipFile {\r\n    public static void main(String[] args) throws IOException {\r\n        String fileZip = \"compressed.zip\";\r\n        byte[] buffer = new byte[1024];\r\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(fileZip));\r\n        ZipEntry zipEntry = zis.getNextEntry();\r\n        while(zipEntry != null){\r\n            String fileName = zipEntry.getName();\r\n            File newFile = new File(\"unzipTest/\" + fileName);\r\n            FileOutputStream fos = new FileOutputStream(newFile);\r\n            int len;\r\n            while ((len = zis.read(buffer)) > 0) {\r\n                fos.write(buffer, 0, len);\r\n            }\r\n            fos.close();\r\n            zipEntry = zis.getNextEntry();\r\n        }\r\n        zis.closeEntry();\r\n        zis.close();\r\n    }\r\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.java2novice.com/java-collections-and-util/zip/file-list/", "url position": 20, "segments": [{"code": "package com.java2novice.zip;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class MyZipFileList {\n\npublic void printFileList(String filePath){\n\t\t\n\t\tFileInputStream fis = null;\n\t\tZipInputStream zipIs = null;\n\t\tZipEntry zEntry = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(filePath);\n\t\t\tzipIs = new ZipInputStream(new BufferedInputStream(fis));\n\t\t\twhile((zEntry = zipIs.getNextEntry()) != null){\n\t\t\t\tSystem.out.println(zEntry.getName());\n\t\t\t}\n\t\t\tzipIs.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String a[]){\n\t\t\n\t\tMyZipFileList mfe = new MyZipFileList();\n\t\tmfe.printFileList(\"C:/Archive.zip\");\n\t}\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "config_copy.txt\nmac-addr_copy.txt\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "http://blog.codeleak.pl/2014/06/listing-zip-file-content-java-8.html", "url position": 21, "segments": [{"code": "public class Zipper {\n    public void printEntries(PrintStream stream, String zip)  {\n        ZipFile zipFile = null;\n        try {\n            zipFile = new ZipFile(zip);\n            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry zipEntry = entries.nextElement();\n                stream.println(zipEntry.getName());\n            }\n        } catch (IOException e) {\n            // error while opening a ZIP file\n        } finally {\n            if (zipFile != null) {\n                try {\n                    zipFile.close();\n                } catch (IOException e) {\n                    // do something\n                }\n            }\n        }\n    }\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class Zipper {\n    public void printEntries(PrintStream stream, String zip) {\n        try (ZipFile zipFile = new ZipFile(zip)) {\n            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry zipEntry = entries.nextElement();\n                stream.println(zipEntry.getName());\n            }\n        } catch (IOException e) {\n            // error while opening a ZIP file\n        }\n    }\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class Zipper {\n    public void printEntries(PrintStream stream, String zip) {\n        try (ZipFile zipFile = new ZipFile(zip)) {\n            zipFile.stream()\n                    .forEach(stream::println);\n        } catch (IOException e) {\n            // error while opening a ZIP file\n        }\n    }\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public void printEntries(PrintStream stream, String zip) {\n    try (ZipFile zipFile = new ZipFile(zip)) {\n        Predicate<ZipEntry> isFile = ze -> !ze.isDirectory();\n        Predicate<ZipEntry> isJava = ze -> ze.getName().matches(\".*java\");\n        Comparator<ZipEntry> bySize = \n                (ze1, ze2) -> Long.valueOf(ze2.getSize() - ze1.getSize()).intValue();\n        zipFile.stream()\n                .filter(isFile.and(isJava))\n                .sorted(bySize)\n                .forEach(ze -> print(stream, ze));\n    } catch (IOException e) {\n        // error while opening a ZIP file\n    }\n}\n\nprivate void print(PrintStream stream, ZipEntry zipEntry) {\n    stream.println(zipEntry.getName() + \", size = \" + zipEntry.getSize());\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "a = [someFile/starting/with/an/A]\nu = [someFile/starting/with/an/U, someOtherFile/starting/with/an/U]\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "public void printEntries(PrintStream stream, String zip) {\n    try (ZipFile zipFile = new ZipFile(zip)) {\n        Predicate<ZipEntry> isFile = ze -> !ze.isDirectory();\n        Predicate<ZipEntry> isJava = ze -> ze.getName().matches(\".*java\");\n        Comparator<ZipEntry> bySize =\n            (ze1, ze2) -> Long.valueOf(ze2.getSize()).compareTo(Long.valueOf(ze1.getSize()));\n\n        Map<String, List<ZipEntry>> result = zipFile.stream()\n                .filter(isFile.and(isJava))\n                .sorted(bySize)\n                .collect(groupingBy(this::fileIndex));\n\n        result.entrySet().stream().forEach(stream::println);\n\n    } catch (IOException e) {\n        // error while opening a ZIP file\n    }\n}\n\nprivate String fileIndex(ZipEntry zipEntry) {\n    Path path = Paths.get(zipEntry.getName());\n    Path fileName = path.getFileName();\n    return fileName.toString().substring(0, 1).toLowerCase();\n}", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public void printEntries(PrintStream stream, String zip) {\n\n    try (ZipFile zipFile = new ZipFile(zip)) {\n        Predicate<ZipEntry> isFile = ze -> !ze.isDirectory();\n        Predicate<ZipEntry> isJava = ze -> ze.getName().matches(\".*java\");\n\n        List<ZipEntry> result = zipFile.stream()\n                .filter(isFile.and(isJava))\n                .filter(ze -> containsText(zipFile, ze, \"@Test\"))\n                .collect(Collectors.toList());\n\n        result.forEach(stream::println);\n\n\n    } catch (IOException e) {\n        // error while opening a ZIP file\n    }\n}\n\nprivate boolean containsText(ZipFile zipFile, ZipEntry zipEntry, String needle) {\n    try (InputStream inputStream = zipFile.getInputStream(zipEntry);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n\n        Optional<String> found = reader.lines()\n                .filter(l -> l.contains(needle))\n                .findFirst();\n\n        return found.isPresent();\n\n    } catch (IOException e) {\n        return false;\n    }\n}", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://www.javamex.com/tutorials/compression/zip.shtml", "url position": 19, "segments": [{"code": "\r\nZipFile zf = new ZipFile(file);\r\ntry {\r\n  InputStream in = zf.getInputStream(\"file.txt\");\r\n  // ... read from 'in' as normal\r\n} finally {\r\n  zf.close();\r\n}\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.codejava.net/java-se/file-io/how-to-read-contents-of-a-zip-file-in-java", "url position": 10, "segments": [{"code": "ZipFile zipFile = new ZipFile(zipFilePath);\nEnumeration<? extends ZipEntry> entries = zipFile.entries();", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\nimport java.util.*;\nimport java.util.zip.*;\n\n/**\n * This program reads contents of a ZIP file.\n *\n * @author www.codejava.net\n */\npublic class ReadZipFile {\n\n\tprivate static void read(String zipFilePath) {\n\t\ttry {\n\t\t\tZipFile zipFile = new ZipFile(zipFilePath);\n\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tZipEntry entry = entries.nextElement();\n\t\t\t\tString name = entry.getName();\n\t\t\t\tlong compressedSize = entry.getCompressedSize();\n\t\t\t\tlong normalSize = entry.getSize();\n\t\t\t\tString type = entry.isDirectory() ? \"DIR\" : \"FILE\";\n\n\t\t\t\tSystem.out.println(name);\n\t\t\t\tSystem.out.format(\"\\t %s - %d - %d\\n\", type, compressedSize, normalSize);\n\t\t\t}\n\n\t\t\tzipFile.close();\n\t\t} catch (IOException ex) {\n\t\t\tSystem.err.println(ex);\n\t\t}\n\t}\n\n\n\tpublic static void main(String[] args) {\n\t\tString zipFilePath = args[0];\n\t\tread(zipFilePath);\n\t}\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://www.computerhope.com/issues/ch001343.htm", "url position": 30, "segments": []},
{"query": "How to read ZIP archive", "url": "https://en.wikipedia.org/wiki/JAR_(file_format)", "url position": 26, "segments": [{"code": "\nManifest-Version: 1.0\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nMain-Class: com.example.MyClassName\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nName: myCompany/myPackage/\nSealed: true\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "\nName: java/util/\nSpecification-Title: \"Java Utility Classes\"\nSpecification-Version: \"1.2\"\nSpecification-Vendor: \"Sun Microsystems, Inc.\".\nImplementation-Title: \"java.util\"\nImplementation-Version: \"build57\"\nImplementation-Vendor: \"Sun Microsystems, Inc.\"\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "\nClass-Path: . pkg1.jar path/to/pkg2.jar\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "https://commons.apache.org/proper/commons-compress/examples.html", "url position": 27, "segments": [{"code": "\nCompressorOutputStream gzippedOut = new CompressorStreamFactory()\n    .createCompressorOutputStream(CompressorStreamFactory.GZIP, myOutputStream);\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nArchiveInputStream input = new ArchiveStreamFactory()\n    .createArchiveInputStream(originalInput);\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nCompressorInputStream input = new CompressorStreamFactory()\n    .createCompressorInputStream(originalInput);\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nArArchiveEntry entry = new ArArchiveEntry(name, size);\narOutput.putArchiveEntry(entry);\narOutput.write(contentOfEntry);\narOutput.closeArchiveEntry();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nArArchiveEntry entry = (ArArchiveEntry) arInput.getNextEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    arInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nCpioArchiveEntry entry = new CpioArchiveEntry(name, size);\ncpioOutput.putArchiveEntry(entry);\ncpioOutput.write(contentOfEntry);\ncpioOutput.closeArchiveEntry();\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nCpioArchiveEntry entry = cpioInput.getNextCPIOEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    cpioInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nDumpArchiveEntry entry = dumpInput.getNextDumpEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    dumpInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nTarArchiveEntry entry = new TarArchiveEntry(name);\nentry.setSize(size);\ntarOutput.putArchiveEntry(entry);\ntarOutput.write(contentOfEntry);\ntarOutput.closeArchiveEntry();\n", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nTarArchiveEntry entry = tarInput.getNextTarEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    tarInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nZipArchiveEntry entry = new ZipArchiveEntry(name);\nentry.setSize(size);\nzipOutput.putArchiveEntry(entry);\nzipOutput.write(contentOfEntry);\nzipOutput.closeArchiveEntry();\n", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nZipArchiveEntry entry = zipInput.getNextZipEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    zipInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nZipArchiveEntry entry = zipFile.getEntry(name);\nInputStream content = zipFile.getInputStream(entry);\ntry {\n    READ UNTIL content IS EXHAUSTED\n} finally {\n    content.close();\n}\n", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nbyte[] inputData; // zip archive contents\nSeekableInMemoryByteChannel inMemoryByteChannel = new SeekableInMemoryByteChannel(inputData);\nZipFile zipFile = new ZipFile(inMemoryByteChannel);\nZipArchiveEntry archiveEntry = zipFile.getEntry(\"entryName\");\nInputStream inputStream = zipFile.getInputStream(archiveEntry);\ninputStream.read() // read data from the input stream\n", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\npublic class ScatterSample {\n\n  ParallelScatterZipCreator scatterZipCreator = new ParallelScatterZipCreator();\n  ScatterZipOutputStream dirs = ScatterZipOutputStream.fileBased(File.createTempFile(\"scatter-dirs\", \"tmp\"));\n\n  public ScatterSample() throws IOException {\n  }\n\n  public void addEntry(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier streamSupplier) throws IOException {\n     if (zipArchiveEntry.isDirectory() && !zipArchiveEntry.isUnixSymlink())\n        dirs.addArchiveEntry(ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry, streamSupplier));\n     else\n        scatterZipCreator.addArchiveEntry( zipArchiveEntry, streamSupplier);\n  }\n\n  public void writeTo(ZipArchiveOutputStream zipArchiveOutputStream)\n  throws IOException, ExecutionException, InterruptedException {\n     dirs.writeTo(zipArchiveOutputStream);\n     dirs.close();\n     scatterZipCreator.writeTo(zipArchiveOutputStream);\n  }\n}\n", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nJarArchiveEntry entry = new JarArchiveEntry(name, size);\nentry.setSize(size);\njarOutput.putArchiveEntry(entry);\njarOutput.write(contentOfEntry);\njarOutput.closeArchiveEntry();\n", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nJarArchiveEntry entry = jarInput.getNextJarEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    jarInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nSevenZOutputFile sevenZOutput = new SevenZOutputFile(file);\nSevenZArchiveEntry entry = sevenZOutput.createArchiveEntry(fileToArchive, name);\nsevenZOutput.putArchiveEntry(entry);\nsevenZOutput.write(contentOfEntry);\nsevenZOutput.closeArchiveEntry();\n", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nSevenZFile sevenZFile = new SevenZFile(new File(\"archive.7z\"));\nSevenZArchiveEntry entry = sevenZFile.getNextEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    sevenZFile.read(content, offset, content.length - offset);\n}\n", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nbyte[] inputData; // 7z archive contents\nSeekableInMemoryByteChannel inMemoryByteChannel = new SeekableInMemoryByteChannel(inputData);\nSevenZFile sevenZFile = new SevenZFile(inMemoryByteChannel);\nSevenZArchiveEntry entry = sevenZFile.getNextEntry();\nsevenZFile.read();  // read current entry's data\n", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nArjArchiveEntry entry = arjInput.getNextEntry();\nbyte[] content = new byte[entry.getSize()];\nLOOP UNTIL entry.getSize() HAS BEEN READ {\n    arjInput.read(content, offset, content.length - offset);\n}\n", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.br\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nBrotliCompressorInputStream brIn = new BrotliCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = brIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nbrIn.close();\n", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.bz2\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nBZip2CompressorInputStream bzIn = new BZip2CompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = bzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nbzIn.close();\n", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.gz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nBZip2CompressorOutputStream bzOut = new BZip2CompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    bzOut.write(buffer, 0, n);\n}\nbzOut.close();\nin.close();\n", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.gz\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nGZipCompressorInputStream gzIn = new GZipCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = gzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\ngzIn.close();\n", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.gz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nGZipCompressorOutputStream gzOut = new GZipCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    gzOut.write(buffer, 0, n);\n}\ngzOut.close();\nin.close();\n", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.pack\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.jar\"));\nPack200CompressorInputStream pIn = new Pack200CompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = pIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\npIn.close();\n", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.jar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.pack\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nPack200CompressorOutputStream pOut = new Pack200CompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    pOut.write(buffer, 0, n);\n}\npOut.close();\nin.close();\n", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.xz\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nXZCompressorInputStream xzIn = new XZCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = xzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nxzIn.close();\n", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.xz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nXZCompressorOutputStream xzOut = new XZCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    xzOut.write(buffer, 0, n);\n}\nxzOut.close();\nin.close();\n", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.Z\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nZCompressorInputStream zIn = new ZCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = zIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nzIn.close();\n", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.lzma\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nLZMACompressorInputStream lzmaIn = new LZMACompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = xzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nlzmaIn.close();\n", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.lzma\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nLZMACompressorOutputStream lzOut = new LZMACompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    lzOut.write(buffer, 0, n);\n}\nlzOut.close();\nin.close();\n", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"some-file\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nDeflateCompressorInputStream defIn = new DeflateCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = defIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\ndefIn.close();\n", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"some-file\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nDeflateCompressorOutputStream defOut = new DeflateCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    defOut.write(buffer, 0, n);\n}\ndefOut.close();\nin.close();\n", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.sz\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nFramedSnappyCompressorInputStream zIn = new FramedSnappyCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = zIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nzIn.close();\n", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.sz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nFramedSnappyCompressorOutputStream snOut = new FramedSnappyCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    snOut.write(buffer, 0, n);\n}\nsnOut.close();\nin.close();\n", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.lz4\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nFramedLZ4CompressorInputStream zIn = new FramedLZ4CompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = zIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nzIn.close();\n", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.lz4\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nFramedLZ4CompressorOutputStream lzOut = new FramedLZ4CompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    lzOut.write(buffer, 0, n);\n}\nlzOut.close();\nin.close();\n", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "org.apache.commons.compress.compressors.TestCompressorStreamProvider", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "org.apache.commons.compress.archivers.TestArchiveStreamProvider", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "http://www.speakingcs.com/2015/07/how-to-unzipextract-files-from-zip.html", "url position": 29, "segments": [{"code": "ZipFile zFile = new ZipFile(\"C:\\Users\\sreenath\\Desktop\\Test.zip\");\n\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "Enumeration<? extends ZipEntry> entries = zFile.entries();\n\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "ZipEntry anEntry = null;\n\nwhile(entries.hasMoreElements()) {\n\n anEntry = entries.nextElement(); \n\n if(!anEntry.isDirectory() ) {\n\n  saveEntry(zFile,anEntry,newPath); // saves files which are not directories\n\n } else {  \n\n  newPath += File.seperator+anEntry.getName();\n\n }\n\n}\n\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "InputStream in = zFile.getInputStream(anEntry);\n\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(newPath + \"/\" + anEntry.getName()));\n\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "     InputStream in = null;\n     BufferedOutputStream fos = null;\n   \n     File aFile = null;\n try{\n  aFile = new File(newPath +\"/\" + anEntry.getName());\n  aFile.getParentFile().mkdirs();\n  in = zFile.getInputStream(anEntry);\n  fos = new BufferedOutputStream(new FileOutputStream(aFile));\n  byte[] buffer = new byte[1024];\n  int length;\n  while((length = in.read(buffer)) > 0) {\n   fos.write(buffer,0,length);\n  }\n  \n } finally {\n  if(in != null) {\n   in.close();\n  }\n  if(fos != null) {\n   fos.close();\n }\n}\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package com.speakingcs.zip;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipException;\nimport java.util.zip.ZipFile;\n\npublic class UnZipFile {\n\n public static void main(String[] args) {\n  \n  UnZipFile uzf = new UnZipFile();\n  try {\n   uzf.unZipFile(new File(\"C:/Users/A8020/Desktop/xyz.zip\"));\n  } catch (ZipException e) {\n   e.printStackTrace();\n  } catch (IOException e) {\n   e.printStackTrace();\n  }\n }\n\n private void unZipFile(File src) throws ZipException, IOException {\n  String newPath = \"\";\n  String filePath = src.getAbsolutePath();\n  ZipFile zFile = new ZipFile(src);\n  new File(filePath.substring(0, filePath.lastIndexOf('.'))).mkdir();\n  newPath = filePath.substring(0,filePath.lastIndexOf('.'));\n  \n  Enumeration entries = zFile.entries();\n  \n  while(entries.hasMoreElements()) {\n   \n   ZipEntry anEntry = entries.nextElement();\n   if(!anEntry.isDirectory()) {    \n    saveEntry(zFile,anEntry,newPath);\n   } else { \n    newPath += File.separator+anEntry.getName();\n   }\n  }\n  \n }\n\n private void saveEntry(ZipFile zFile, ZipEntry anEntry, String newPath) throws IOException {\n  InputStream in = null;\n  BufferedOutputStream fos = null;\n   \n  File aFile = null;\n  try{\n   aFile = new File(newPath +\"/\" + anEntry.getName());\n   aFile.getParentFile().mkdirs();\n   in = zFile.getInputStream(anEntry);\n   fos = new BufferedOutputStream(new FileOutputStream(aFile));\n   byte[] buffer = new byte[1024];\n   int length;\n   while((length = in.read(buffer)) > 0) {\n    fos.write(buffer,0,length);\n   }\n   \n  } finally {\n   if(in != null) {\n    in.close();\n   }\n   if(fos != null) {\n    fos.close();\n   }\n  }  \n } \n}\n\n", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://www.boraji.com/java-how-to-decompress-files-from-a-zip-file", "url position": 23, "segments": [{"code": "package com.boraji.tutorial.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * @author imssbora\n */\npublic class UnzipFileExample1 {\n  public static void main(String[] args) {\n    File zipFile = new File(\"Test.zip\");\n    File output = new File(\"Unzip\");\n    FileInputStream fileInputStream = null;\n    ZipInputStream zipInputStream = null;\n    try {\n      fileInputStream = new FileInputStream(zipFile);\n      zipInputStream = new ZipInputStream(fileInputStream);\n\n      // Get ZipEntry\n      ZipEntry entry = zipInputStream.getNextEntry();\n      while (entry != null) {\n        if (entry.isDirectory()) {\n\n          // Create directory\n          File dir = new File(output, entry.getName());\n          if (!dir.exists()) {\n            dir.mkdirs();\n          }\n        } else {\n\n          // Read zipEntry and write to a file.\n          File file = new File(output, entry.getName());\n          FileOutputStream fileOutputStream = new FileOutputStream(file);\n          int i;\n          byte[] data = new byte[1024];\n          while ((i = zipInputStream.read(data)) != -1) {\n            fileOutputStream.write(data, 0, i);\n          }\n\n          fileOutputStream.close();\n\n        }\n        // Get next entry\n        entry = zipInputStream.getNextEntry();\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (fileInputStream != null) {\n          fileInputStream.close();\n        }\n        if (zipInputStream != null) {\n          zipInputStream.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package com.boraji.tutorial.io;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\n/**\n * @author imssbora\n */\npublic class UnzipFileExample2 {\n  public static void main(String[] args) {\n    File output = new File(\"Unzip2\");\n    ZipFile zipFile = null;\n    try {\n\n      zipFile = new ZipFile(new File(\"Test.zip\"));\n\n      Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n      while (entries.hasMoreElements()) {\n        ZipEntry entry = (ZipEntry) entries.nextElement();\n        if (entry.isDirectory()) {\n\n          // Create directory\n          File dir = new File(output, entry.getName());\n          if (!dir.exists()) {\n            dir.mkdirs();\n          }\n        } else {\n\n          // Get zipEntry name and create an output stream.\n          File file = new File(output, entry.getName());\n          FileOutputStream fileOutputStream = new FileOutputStream(file);\n          InputStream inputStream = zipFile.getInputStream(entry);\n\n          // Read Zip file entry\n          int i;\n          byte[] data = new byte[1024];\n          while ((i = inputStream.read(data)) != -1) {\n            fileOutputStream.write(data, 0, i);\n          }\n\n          fileOutputStream.close();\n          inputStream.close();\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (zipFile != null) {\n          zipFile.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://memorynotfound.com/java-7z-seven-zip-example-compress-decompress-file/", "url position": 32, "segments": [{"code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                             http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.memorynotfound.io.compression</groupId>\n    <artifactId>7z</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <name>IO Compression - ${project.artifactId}</name>\n    <url>https://memorynotfound.com</url>\n    <packaging>jar</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-compress</artifactId>\n            <version>1.14</version>\n        </dependency>\n        <dependency>\n            <groupId>org.tukaani</groupId>\n            <artifactId>xz</artifactId>\n            <version>1.6</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.7.0</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "package com.memorynotfound.resource;\n\nimport org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;\nimport org.apache.commons.compress.archivers.sevenz.SevenZFile;\nimport org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class SevenZ {\n\n    private SevenZ() {\n\n    }\n\n    public static void compress(String name, File... files) throws IOException {\n        try (SevenZOutputFile out = new SevenZOutputFile(new File(name))){\n            for (File file : files){\n                addToArchiveCompression(out, file, \".\");\n            }\n        }\n    }\n\n    public static void decompress(String in, File destination) throws IOException {\n        SevenZFile sevenZFile = new SevenZFile(new File(in));\n        SevenZArchiveEntry entry;\n        while ((entry = sevenZFile.getNextEntry()) != null){\n            if (entry.isDirectory()){\n                continue;\n            }\n            File curfile = new File(destination, entry.getName());\n            File parent = curfile.getParentFile();\n            if (!parent.exists()) {\n                parent.mkdirs();\n            }\n            FileOutputStream out = new FileOutputStream(curfile);\n            byte[] content = new byte[(int) entry.getSize()];\n            sevenZFile.read(content, 0, content.length);\n            out.write(content);\n            out.close();\n        }\n    }\n\n    private static void addToArchiveCompression(SevenZOutputFile out, File file, String dir) throws IOException {\n        String name = dir + File.separator + file.getName();\n        if (file.isFile()){\n            SevenZArchiveEntry entry = out.createArchiveEntry(file, name);\n            out.putArchiveEntry(entry);\n\n            FileInputStream in = new FileInputStream(file);\n            byte[] b = new byte[1024];\n            int count = 0;\n            while ((count = in.read(b)) > 0) {\n                out.write(b, 0, count);\n            }\n            out.closeArchiveEntry();\n\n        } else if (file.isDirectory()) {\n            File[] children = file.listFiles();\n            if (children != null){\n                for (File child : children){\n                    addToArchiveCompression(out, child, name);\n                }\n            }\n        } else {\n            System.out.println(file.getName() + \" is not supported\");\n        }\n    }\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "package com.memorynotfound.resource;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class SevenZProgram {\n\n    private static final String OUTPUT_DIRECTORY = \"/tmp\";\n    private static final String TAR_GZIP_SUFFIX = \".7z\";\n\n    private static final String MULTIPLE_RESOURCES = \"/example-multiple-resources\";\n    private static final String RECURSIVE_DIRECTORY = \"/example-recursive-directory\";\n\n    private static final String MULTIPLE_RESOURCES_PATH = OUTPUT_DIRECTORY + MULTIPLE_RESOURCES + TAR_GZIP_SUFFIX;\n    private static final String RECURSIVE_DIRECTORY_PATH = OUTPUT_DIRECTORY + RECURSIVE_DIRECTORY + TAR_GZIP_SUFFIX;\n\n\n    public static void main(String... args) throws IOException {\n\n        // class for resource classloading\n        Class clazz = SevenZProgram.class;\n\n        // get multiple resources files to compress\n        File resource1 = new File(clazz.getResource(\"/in/resource1.txt\").getFile());\n        File resource2 = new File(clazz.getResource(\"/in/resource2.txt\").getFile());\n        File resource3 = new File(clazz.getResource(\"/in/resource3.txt\").getFile());\n\n        // compress multiple resources\n        SevenZ.compress(MULTIPLE_RESOURCES_PATH, resource1, resource2, resource3);\n\n        // decompress multiple resources\n        SevenZ.decompress(MULTIPLE_RESOURCES_PATH, new File(OUTPUT_DIRECTORY + MULTIPLE_RESOURCES));\n\n\n\n        // get directory file to compress\n        File directory = new File(clazz.getResource(\"/in/dir\").getFile());\n\n        // compress recursive directory\n        SevenZ.compress(RECURSIVE_DIRECTORY_PATH, directory);\n\n        // decompress recursive directory\n        SevenZ.decompress(RECURSIVE_DIRECTORY_PATH, new File(OUTPUT_DIRECTORY + RECURSIVE_DIRECTORY));\n    }\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://gist.github.com/phaniram/6233013", "url position": 28, "segments": [{"code": "<td id=\"file-ufg-java-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">package</span> <span class=\"pl-smi\">ufg</span>;</td>", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC2\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC3\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.BufferedOutputStream</span>;</td>", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.File</span>;</td>", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.FileOutputStream</span>;</td>", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC6\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.IOException</span>;</td>", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.InputStream</span>;</td>", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.OutputStream</span>;</td>", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC9\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.io.PrintStream</span>;</td>", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC10\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.net.MalformedURLException</span>;</td>", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.net.URL</span>;</td>", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.Enumeration</span>;</td>", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC13\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.List</span>;</td>", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC14\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.Scanner</span>;</td>", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC15\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.zip.ZipEntry</span>;</td>", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC16\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.util.zip.ZipFile</span>;</td>", "in_page_order": 16, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC17\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 17, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC18\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">UFG</span> {</td>", "in_page_order": 18, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC19\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 19, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC20\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">List&lt;<span class=\"pl-smi\">String</span>&gt;</span> fileList;</td>", "in_page_order": 20, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC21\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">ZIP_FILE_URL</span>;</td>", "in_page_order": 21, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC22\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">INPUT_ZIP_FILE</span>;</td>", "in_page_order": 22, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC23\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">OUTPUT_FOLDER</span>;</td>", "in_page_order": 23, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC24\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 24, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC25\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">copyInputStream</span>(<span class=\"pl-smi\">InputStream</span> <span class=\"pl-v\">in</span>, <span class=\"pl-smi\">OutputStream</span> <span class=\"pl-v\">out</span>)</td>", "in_page_order": 25, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC26\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {</td>", "in_page_order": 26, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC27\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">byte</span>[] buffer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[<span class=\"pl-c1\">1024</span>];</td>", "in_page_order": 27, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC28\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">int</span> len;</td>", "in_page_order": 28, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC29\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">while</span> ((len <span class=\"pl-k\">=</span> in<span class=\"pl-k\">.</span>read(buffer)) <span class=\"pl-k\">&gt;=</span> <span class=\"pl-c1\">0</span>) {</td>", "in_page_order": 29, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC30\" class=\"blob-code blob-code-inner js-file-line\">            out<span class=\"pl-k\">.</span>write(buffer, <span class=\"pl-c1\">0</span>, len);</td>", "in_page_order": 30, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC31\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 31, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC32\" class=\"blob-code blob-code-inner js-file-line\">        in<span class=\"pl-k\">.</span>close();</td>", "in_page_order": 32, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC33\" class=\"blob-code blob-code-inner js-file-line\">        out<span class=\"pl-k\">.</span>close();</td>", "in_page_order": 33, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC34\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 34, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC35\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 35, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC36\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">downloadFile</span>() {</td>", "in_page_order": 36, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC37\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">try</span> {</td>", "in_page_order": 37, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC38\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">long</span> startTime <span class=\"pl-k\">=</span> <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>currentTimeMillis();</td>", "in_page_order": 38, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC39\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 39, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC40\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">URL</span> url <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-c1\">this</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>ZIP_FILE_URL</span>);</td>", "in_page_order": 40, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC41\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 41, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC42\" class=\"blob-code blob-code-inner js-file-line\">            url<span class=\"pl-k\">.</span>openConnection();</td>", "in_page_order": 42, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC43\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">InputStream</span> reader <span class=\"pl-k\">=</span> url<span class=\"pl-k\">.</span>openStream();</td>", "in_page_order": 43, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC44\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 44, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC45\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">FileOutputStream</span> writer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FileOutputStream</span>(<span class=\"pl-c1\">this</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>INPUT_ZIP_FILE</span>);</td>", "in_page_order": 45, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC46\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">byte</span>[] buffer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[<span class=\"pl-c1\">102400</span>];</td>", "in_page_order": 46, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC47\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">int</span> totalBytesRead <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;</td>", "in_page_order": 47, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC48\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">int</span> bytesRead <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;</td>", "in_page_order": 48, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC49\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 49, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC50\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Reading ZIP file 20KB blocks at a time.<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 50, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC51\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 51, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC52\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">while</span> ((bytesRead <span class=\"pl-k\">=</span> reader<span class=\"pl-k\">.</span>read(buffer)) <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">0</span>) {</td>", "in_page_order": 52, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC53\" class=\"blob-code blob-code-inner js-file-line\">                writer<span class=\"pl-k\">.</span>write(buffer, <span class=\"pl-c1\">0</span>, bytesRead);</td>", "in_page_order": 53, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC54\" class=\"blob-code blob-code-inner js-file-line\">                buffer <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[<span class=\"pl-c1\">102400</span>];</td>", "in_page_order": 54, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC55\" class=\"blob-code blob-code-inner js-file-line\">                totalBytesRead <span class=\"pl-k\">+=</span> bytesRead;</td>", "in_page_order": 55, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC56\" class=\"blob-code blob-code-inner js-file-line\">            }</td>", "in_page_order": 56, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC57\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 57, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC58\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">long</span> endTime <span class=\"pl-k\">=</span> <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>currentTimeMillis();</td>", "in_page_order": 58, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC59\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 59, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC60\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Done. <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Integer</span>(totalBytesRead)<span class=\"pl-k\">.</span>toString() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> bytes read (<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Long</span>(endTime <span class=\"pl-k\">-</span> startTime)<span class=\"pl-k\">.</span>toString() <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span> millseconds).<span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 60, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC61\" class=\"blob-code blob-code-inner js-file-line\">            writer<span class=\"pl-k\">.</span>close();</td>", "in_page_order": 61, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC62\" class=\"blob-code blob-code-inner js-file-line\">            reader<span class=\"pl-k\">.</span>close();</td>", "in_page_order": 62, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC63\" class=\"blob-code blob-code-inner js-file-line\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">MalformedURLException</span> e) {</td>", "in_page_order": 63, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC64\" class=\"blob-code blob-code-inner js-file-line\">            e<span class=\"pl-k\">.</span>printStackTrace();</td>", "in_page_order": 64, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC65\" class=\"blob-code blob-code-inner js-file-line\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> e) {</td>", "in_page_order": 65, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC66\" class=\"blob-code blob-code-inner js-file-line\">            e<span class=\"pl-k\">.</span>printStackTrace();</td>", "in_page_order": 66, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC67\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 67, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC68\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 68, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC69\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 69, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC70\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">unZipIt</span>() {</td>", "in_page_order": 70, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC71\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-k\">try</span> {</td>", "in_page_order": 71, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC72\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 72, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC73\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">ZipFile</span> zipFile <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ZipFile</span>(<span class=\"pl-c1\">INPUT_ZIP_FILE</span>);</td>", "in_page_order": 73, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC74\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 74, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC75\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">Enumeration</span> zipEntries <span class=\"pl-k\">=</span> zipFile<span class=\"pl-k\">.</span>entries();</td>", "in_page_order": 75, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC76\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 76, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC77\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">File</span> <span class=\"pl-c1\">OUTFILEFOLD</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-c1\">OUTPUT_FOLDER</span>);</td>", "in_page_order": 77, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC78\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-c1\">OUTFILEFOLD</span><span class=\"pl-k\">.</span>exists()) {</td>", "in_page_order": 78, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC79\" class=\"blob-code blob-code-inner js-file-line\">                <span class=\"pl-c1\">OUTFILEFOLD</span><span class=\"pl-k\">.</span>mkdir();</td>", "in_page_order": 79, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC80\" class=\"blob-code blob-code-inner js-file-line\">            }</td>", "in_page_order": 80, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC81\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">String</span> <span class=\"pl-c1\">OUTDIR</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">OUTPUT_FOLDER</span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">File</span><span class=\"pl-k\">.</span>separator;</td>", "in_page_order": 81, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC82\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">while</span> (zipEntries<span class=\"pl-k\">.</span>hasMoreElements()) {</td>", "in_page_order": 82, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC83\" class=\"blob-code blob-code-inner js-file-line\">                <span class=\"pl-smi\">ZipEntry</span> zipEntry <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">ZipEntry</span>) zipEntries<span class=\"pl-k\">.</span>nextElement();</td>", "in_page_order": 83, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC84\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 84, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC85\" class=\"blob-code blob-code-inner js-file-line\">                <span class=\"pl-k\">if</span> (zipEntry<span class=\"pl-k\">.</span>isDirectory()) {</td>", "in_page_order": 85, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC86\" class=\"blob-code blob-code-inner js-file-line\">                    <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>      Extracting directory: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">OUTDIR</span> <span class=\"pl-k\">+</span> zipEntry<span class=\"pl-k\">.</span>getName());</td>", "in_page_order": 86, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC87\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 87, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC88\" class=\"blob-code blob-code-inner js-file-line\">                    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-c1\">OUTDIR</span> <span class=\"pl-k\">+</span> zipEntry<span class=\"pl-k\">.</span>getName())<span class=\"pl-k\">.</span>mkdir();</td>", "in_page_order": 88, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC89\" class=\"blob-code blob-code-inner js-file-line\">                    <span class=\"pl-k\">continue</span>;</td>", "in_page_order": 89, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC90\" class=\"blob-code blob-code-inner js-file-line\">                }</td>", "in_page_order": 90, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC91\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 91, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC92\" class=\"blob-code blob-code-inner js-file-line\">                <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>       Extracting file: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">OUTDIR</span> <span class=\"pl-k\">+</span> zipEntry<span class=\"pl-k\">.</span>getName());</td>", "in_page_order": 92, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC93\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 93, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC94\" class=\"blob-code blob-code-inner js-file-line\">                copyInputStream(zipFile<span class=\"pl-k\">.</span>getInputStream(zipEntry), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BufferedOutputStream</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">FileOutputStream</span>(<span class=\"pl-c1\">OUTDIR</span> <span class=\"pl-k\">+</span> zipEntry<span class=\"pl-k\">.</span>getName())));</td>", "in_page_order": 94, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC95\" class=\"blob-code blob-code-inner js-file-line\">            }</td>", "in_page_order": 95, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC96\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 96, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC97\" class=\"blob-code blob-code-inner js-file-line\">            zipFile<span class=\"pl-k\">.</span>close();</td>", "in_page_order": 97, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC98\" class=\"blob-code blob-code-inner js-file-line\">        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IOException</span> ioe) {</td>", "in_page_order": 98, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC99\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>err<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unhandled exception:<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 99, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC100\" class=\"blob-code blob-code-inner js-file-line\">            ioe<span class=\"pl-k\">.</span>printStackTrace();</td>", "in_page_order": 100, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC101\" class=\"blob-code blob-code-inner js-file-line\">            <span class=\"pl-k\">return</span>;</td>", "in_page_order": 101, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC102\" class=\"blob-code blob-code-inner js-file-line\">        }</td>", "in_page_order": 102, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC103\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 103, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC104\" class=\"blob-code blob-code-inner js-file-line\">\n</td>", "in_page_order": 104, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC105\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-k\">String</span>[] <span class=\"pl-v\">args</span>) {</td>", "in_page_order": 105, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC106\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">UFG</span> csg <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">UFG</span>();</td>", "in_page_order": 106, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC107\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Please provide the S3 file<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 107, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC108\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">Scanner</span> sc <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Scanner</span>(<span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>in);</td>", "in_page_order": 108, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC109\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">csg<span class=\"pl-k\">.</span>ZIP_FILE_URL</span> <span class=\"pl-k\">=</span> sc<span class=\"pl-k\">.</span>nextLine();</td>", "in_page_order": 109, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC110\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Please provide the destination with filename<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 110, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC111\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">csg<span class=\"pl-k\">.</span>INPUT_ZIP_FILE</span> <span class=\"pl-k\">=</span> sc<span class=\"pl-k\">.</span>nextLine();</td>", "in_page_order": 111, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC112\" class=\"blob-code blob-code-inner js-file-line\">        csg<span class=\"pl-k\">.</span>downloadFile();</td>", "in_page_order": 112, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC113\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">System</span><span class=\"pl-k\">.</span>out<span class=\"pl-k\">.</span>println(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Provide OUTPUT folder it should unzip to<span class=\"pl-pds\">\"</span></span>);</td>", "in_page_order": 113, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC114\" class=\"blob-code blob-code-inner js-file-line\">        <span class=\"pl-smi\">csg<span class=\"pl-k\">.</span>OUTPUT_FOLDER</span> <span class=\"pl-k\">=</span> sc<span class=\"pl-k\">.</span>nextLine();</td>", "in_page_order": 114, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC115\" class=\"blob-code blob-code-inner js-file-line\">        csg<span class=\"pl-k\">.</span>unZipIt();</td>", "in_page_order": 115, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC116\" class=\"blob-code blob-code-inner js-file-line\">        sc<span class=\"pl-k\">.</span>close();</td>", "in_page_order": 116, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC117\" class=\"blob-code blob-code-inner js-file-line\">    }</td>", "in_page_order": 117, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}, {"code": "<td id=\"file-ufg-java-LC118\" class=\"blob-code blob-code-inner js-file-line\">}</td>", "in_page_order": 118, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": "2", "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "http://www.dreamincode.net/forums/topic/244086-write-and-read-zip-file-from-java/", "url position": 25, "segments": [{"code": "import java.io.*;\nimport java.util.zip.*;\n/*\n * Creates a ZIP file to be read by Winzip or Winrar\n */\npublic class WriteZip {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// lets put 2 files\n\t\tString[] filename = {\"file1.dat\", \"file2.dat\"};\n\t\t// create a line of text for the files\n        byte[] buffer = new byte[27];        // the alphabet + <line feed?\n        byte letter = 'a';\n        for(int i = 0; i < 26; ++i)\n        \tbuffer[i] = letter++;\n        buffer[26] = '\\n';   // and an end of line\n        \n        try {\n\t\t    // Create the ZIP file\n\t\t    String outFilename = \"myzip.zip\";\n\t\t    ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outFilename));\n\n\t\t    // Compress two files\n\t\t    for (int i=0; i<filename.length; i++) {\n\t\t        // Add ZIP entry to output stream.\n\t\t        out.putNextEntry(new ZipEntry(filename[i]));\n\n\t\t        // Transfer 10 lines into the file\n\t\t        for(int j = 0; j < 10; ++j)\n\t\t            out.write(buffer);\n\n\t\t        // Close the file\n\t\t        out.closeEntry();\n\t\t    }\n\n\t\t    // Close the ZIP file\n\t\t    out.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Problem writing ZIP file: \" + e);\n\t\t}\n\n\t}\n}\n\r", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.io.*;\nimport java.util.zip.*;\n\npublic class ReadZip {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\t// Open the ZIP file\n\t\t\tString inFilename = \"myzip.zip\";\n\t\t\tZipInputStream in = new ZipInputStream(new FileInputStream(inFilename));\n\n\t\t\t// While we have other entry\n\t\t\tZipEntry entry = in.getNextEntry();\n\t\t\twhile(entry != null){\n\t\t\t\tSystem.out.println(\"Reading: \" + entry.getName());\n\t\t\t\t// Transfer bytes from the ZIP file to the output file\n\t\t\t\t// OK I know that my file contains 10 * 27 bytes the reading might\n\t\t\t\t// be more versatile and test if there is more bytes in the file\n\t\t\t\tbyte[] buf = new byte[1024];\n\t\t\t\t\n\t\t\t\tint len = in.read(buf);\n\t            String theFile = new String(buf, 0, len);\n\t\t\t\tSystem.out.println(theFile);\n\n\t\t\t\tentry = in.getNextEntry();\n\t\t\t} // end while\n\t\t\t// Close the ZIP file\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Probel reading back the ZIP file: \" + e);\n\t\t}\n\n\t}\n}\n\r", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.opencodez.com/java/zip-file-using-java.htm", "url position": 24, "segments": [{"code": "private void zipFiles(List<File> fileList, String destZipFile) {\tbyte[] buffer = new byte[1024];\ttry {\t\tFileOutputStream fos = new FileOutputStream(destZipFile);\t\tZipOutputStream zos = new ZipOutputStream(fos);\t\tSystem.out.println(\"Creating Zip Archive : \" + destZipFile);\t\tfor (File file : fileList) {\t\t\tSystem.out.println(\"Added \" + file);\t\t\tZipEntry ze = new ZipEntry(file.getName());\t\t\t//This is required to make sure the archived files keep the last modified \t\t\t//time same as disk. \t\t\tze.setTime(file.lastModified());\t\t\tzos.putNextEntry(ze);\t\t\tFileInputStream in = new FileInputStream(file);\t\t\tint len;\t\t\twhile ((len = in.read(buffer)) > 0) {\t\t\t\tzos.write(buffer, 0, len);\t\t\t}\t\t\tin.close();\t\t}\t\tzos.closeEntry();\t\tzos.close();\t\tSystem.out.println(\"Done\");\t} catch (IOException ex) {\t\tex.printStackTrace();\t}}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "private List<File> getFileList(String sourceDir, String extensions) {\tList<File> fileList = new ArrayList<File>();\tFile dir = new File(sourceDir);\tif (dir.isDirectory()) {\t\tString[] fList = dir.list();\t\tfor (String filename : fList) {\t\t\tFile iFile = new File(getAbsolutePath(dir, filename));\t\t\tif (iFile.isFile()) {\t\t\t\tif (null != extensions) {\t\t\t\t\tif (extensions.toLowerCase().contains(getFileExtension(filename))) {\t\t\t\t\t\tfileList.add(iFile);\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tfileList.add(iFile);\t\t\t\t}\t\t\t}\t\t}\t} else if (dir.isFile()) {\t\tfileList.add(dir);\t}\treturn fileList;}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public void unzip(String srcZipFile, String destDir) {\tbyte[] buffer = new byte[1024];\t\ttry {\t\tZipInputStream zis = new ZipInputStream(new FileInputStream(srcZipFile));\t\tZipEntry zipEntry = zis.getNextEntry();\t\twhile (zipEntry != null) {\t\t\tString fileName = zipEntry.getName();\t\t\tFile newFile = new File(destDir + File.separator + fileName);\t\t\tFileOutputStream fos = new FileOutputStream(newFile);\t\t\tint len;\t\t\twhile ((len = zis.read(buffer)) > 0) {\t\t\t\tfos.write(buffer, 0, len);\t\t\t}\t\t\tfos.close();\t\t\t//This is required to make sure the unzipped files keep the last modified \t\t\t//time same as of the time they were compressed.\t\t\tnewFile.setLastModified(zipEntry.getTime());\t\t\tzipEntry = zis.getNextEntry();\t\t}\t\tzis.closeEntry();\t\tzis.close();\t} catch (IOException ex) {\t\tex.printStackTrace();\t}}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public class ZipTest {\tprivate static final String OUTPUT_ZIP_FILE = \"C:\\\\java-exec\\\\MyFile1.zip\";\tprivate static final String SOURCE_FOLDER = \"C:\\\\java-exec\";\tprivate static final String DESTINATION_FOLDER = \"C:\\\\java-exec\\\\unzipped\";\tpublic static void main(String[] args) {\t\t\t\tZipUtil zipper = new ZipUtil();\t\t\t\t//Zip all the text files from source folder to specified zip file.\t\tzipper.zip(SOURCE_FOLDER, OUTPUT_ZIP_FILE, \"txt\");\t\t\t\t//Unzip the given archive to specified folder.\t\tzipper.unzip(OUTPUT_ZIP_FILE, DESTINATION_FOLDER);\t}}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://support.sas.com/kb/14/065.html", "url position": 33, "segments": [{"code": "\nWhen attempting to invoke the Information Delivery Portal, the browser\nmay result in a blank window.  The following error may also appear in\nthe web server log:\n\n   Exception while expanding web application archive xxxx.war\n   java.util.zip.ZipException: Error opening zip file\n   &ltpath&gt\\xxxx.war\n\nwhere xxxx.war is the name of a war file deployed for use with the\nPortal.\n\nThis problem will occur if the associated .war file has not been\nproperly deployed.\n\nTo correct the problem, complete the installation steps for the SAS Web\nInfrastructure Kit starting with the section \"Step 11: Deploy Web\nApplication Files into the Servlet Container\".\n\nBy default, the installation instructions are located in:\n\n    C:\\Program Files\\SAS\\Web\\Portal2.0.1\\wik_readme.html\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}]},
{"query": "How to read ZIP archive", "url": "https://developer.android.com/reference/java/util/zip/package-summary.html", "url position": 34, "segments": []},
{"query": "How to read ZIP archive", "url": "http://blog.alutam.com/2009/10/31/reading-password-protected-zip-files-in-java/", "url position": 22, "segments": [{"code": "import java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\npublic class ZipDecryptInputStream extends InputStream {\r\n    private static final int[] CRC_TABLE = new int[256];\r\n    // compute the table\r\n    // (could also have it pre-computed - see http://snippets.dzone.com/tag/crc32)\r\n    static {\r\n        for (int i = 0; i < 256; i++) {\r\n            int r = i;\r\n            for (int j = 0; j < 8; j++) {\r\n                if ((r & 1) == 1) {\r\n                    r = (r >>> 1) ^ 0xedb88320;\r\n                } else {\r\n                    r >>>= 1;\r\n                }\r\n            }\r\n            CRC_TABLE[i] = r;\r\n        }\r\n    }\r\n\r\n    private static final int DECRYPT_HEADER_SIZE = 12;\r\n    private static final int[] LFH_SIGNATURE = {0x50, 0x4b, 0x03, 0x04};\r\n\r\n    private final InputStream delegate;\r\n    private final String password;\r\n    private final int keys[] = new int[3];\r\n\r\n    private State state = State.SIGNATURE;\r\n    private int skipBytes;\r\n    private int compressedSize;\r\n    private int value;\r\n    private int valuePos;\r\n    private int valueInc;\r\n\r\n    public ZipDecryptInputStream(InputStream stream, String password) {\r\n        this.delegate = stream;\r\n        this.password = password;\r\n    }\r\n\r\n    @Override\r\n    public int read() throws IOException {\r\n        int result = delegate.read();\r\n        if (skipBytes == 0) {\r\n            switch (state) {\r\n                case SIGNATURE:\r\n                    if (result != LFH_SIGNATURE[valuePos]) {\r\n                        state = State.TAIL;\r\n                    } else {\r\n                        valuePos++;\r\n                        if (valuePos >= LFH_SIGNATURE.length) {\r\n                            skipBytes = 2;\r\n                            state = State.FLAGS;\r\n                        }\r\n                    }\r\n                    break;\r\n                case FLAGS:\r\n                    if ((result & 1) == 0) {\r\n                        throw new IllegalStateException(\"ZIP not password protected.\");\r\n                    }\r\n                    if ((result & 64) == 64) {\r\n                        throw new IllegalStateException(\"Strong encryption used.\");\r\n                    }\r\n                    if ((result & 8) == 8) {\r\n                        throw new IllegalStateException(\"Unsupported ZIP format.\");\r\n                    }\r\n                    result -= 1;\r\n                    compressedSize = 0;\r\n                    valuePos = 0;\r\n                    valueInc = DECRYPT_HEADER_SIZE;\r\n                    state = State.COMPRESSED_SIZE;\r\n                    skipBytes = 11;\r\n                    break;\r\n                case COMPRESSED_SIZE:\r\n                    compressedSize += result << (8 * valuePos);\r\n                    result -= valueInc;\r\n                    if (result < 0) {\r\n                        valueInc = 1;\r\n                        result += 256;\r\n                    } else {\r\n                        valueInc = 0;\r\n                    }\r\n                    valuePos++;\r\n                    if (valuePos > 3) {\r\n                        valuePos = 0;\r\n                        value = 0;\r\n                        state = State.FN_LENGTH;\r\n                        skipBytes = 4;\r\n                    }\r\n                    break;\r\n                case FN_LENGTH:\r\n                case EF_LENGTH:\r\n                    value += result << 8 * valuePos;\r\n                    if (valuePos == 1) {\r\n                        valuePos = 0;\r\n                        if (state == State.FN_LENGTH) {\r\n                            state = State.EF_LENGTH;\r\n                        } else {\r\n                            state = State.HEADER;\r\n                            skipBytes = value;\r\n                        }\r\n                    } else {\r\n                        valuePos = 1;\r\n                    }\r\n                    break;\r\n                case HEADER:\r\n                    initKeys(password);\r\n                    for (int i = 0; i < DECRYPT_HEADER_SIZE; i++) {\r\n                        updateKeys((byte) (result ^ decryptByte()));\r\n                        result = delegate.read();\r\n                    }\r\n                    compressedSize -= DECRYPT_HEADER_SIZE;\r\n                    state = State.DATA;\r\n                    // intentionally no break\r\n                case DATA:\r\n                    result = (result ^ decryptByte()) & 0xff;\r\n                    updateKeys((byte) result);\r\n                    compressedSize--;\r\n                    if (compressedSize == 0) {\r\n                        valuePos = 0;\r\n                        state = State.SIGNATURE;\r\n                    }\r\n                    break;\r\n                case TAIL:\r\n                    // do nothing\r\n            }\r\n        } else {\r\n            skipBytes--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void close() throws IOException {\r\n        delegate.close();\r\n        super.close();\r\n    }\r\n\r\n    private void initKeys(String password) {\r\n        keys[0] = 305419896;\r\n        keys[1] = 591751049;\r\n        keys[2] = 878082192;\r\n        for (int i = 0; i < password.length(); i++) {\r\n            updateKeys((byte) (password.charAt(i) & 0xff));\r\n        }\r\n    }\r\n\r\n    private void updateKeys(byte charAt) {\r\n        keys[0] = crc32(keys[0], charAt);\r\n        keys[1] += keys[0] & 0xff;\r\n        keys[1] = keys[1] * 134775813 + 1;\r\n        keys[2] = crc32(keys[2], (byte) (keys[1] >> 24));\r\n    }\r\n\r\n    private byte decryptByte() {\r\n        int temp = keys[2] | 2;\r\n        return (byte) ((temp * (temp ^ 1)) >>> 8);\r\n    }\r\n\r\n    private int crc32(int oldCrc, byte charAt) {\r\n        return ((oldCrc >>> 8) ^ CRC_TABLE[(oldCrc ^ charAt) & 0xff]);\r\n    }\r\n\r\n    private static enum State {\r\n        SIGNATURE, FLAGS, COMPRESSED_SIZE, FN_LENGTH, EF_LENGTH, HEADER, DATA, TAIL\r\n    }\r\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipInputStream;\r\n\r\n// usage: java Main [filename] [password]\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n        // password-protected zip file I need to read\r\n        FileInputStream fis = new FileInputStream(args[0]);\r\n        // wrap it in the decrypt stream\r\n        ZipDecryptInputStream zdis = new ZipDecryptInputStream(fis, args[1]);\r\n        // wrap the decrypt stream by the ZIP input stream\r\n        ZipInputStream zis = new ZipInputStream(zdis);\r\n\r\n        // read all the zip entries and save them as files\r\n        ZipEntry ze;\r\n        while ((ze = zis.getNextEntry()) != null) {\r\n            FileOutputStream fos = new FileOutputStream(ze.getName());\r\n            int b;\r\n            while ((b = zis.read()) != -1) {\r\n                fos.write(b);\r\n            }\r\n            fos.close();\r\n            zis.closeEntry();\r\n        }\r\n        zis.close();\r\n    }\r\n}", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "http://www.discoversdk.com/blog/processing-zip-files-with-java", "url position": 37, "segments": [{"code": "import java.util.zip.ZipEntry ;\nimport java.util.zip.ZipInputStream ;\nimport java.util.zip.ZipOutputStream ;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\npublic class JavaZip {\n   public static void main(String[] args){\n\n   }\n}", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "ZipEntry zen = ZipEntry(\"file1.txt\");", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "import java.util.zip.ZipEntry ;\nimport java.util.zip.ZipInputStream ;\nimport java.util.zip.ZipOutputStream ;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\npublic class JavaZip {\n   public static void main(String[] args) throws Exception{\n       FileOutputStream fos = new FileOutputStream(\"my_archive.zip\");\n       FileInputStream fin = new FileInputStream(\"file1.txt\");\n       ZipOutputStream zos = new ZipOutputStream(fos);\n       byte[] byteBuffer = new byte[200];\n       ZipEntry zen = new ZipEntry(\"file1.txt\");\n       zos.putNextEntry(zen);\n\n       int size;\n       while( (size = fin.read(byteBuffer)) > 0){\n           zos.write(byteBuffer, 0, size);\n       }\n       zos.closeEntry();\n       zos.close();\n       fos.close();\n       fin.close();\n   }\n}", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "import java.util.zip.ZipEntry ;\nimport java.util.zip.ZipInputStream ;\nimport java.util.zip.ZipOutputStream ;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\npublic class JavaZip {\n   public static void main(String[] args) throws Exception{\n       FileInputStream fin = new FileInputStream(\"my_archive.zip\");\n       ZipInputStream zis = new ZipInputStream(fin);\n       ZipEntry zipEntry = zis.getNextEntry();\n\n       System.out.println(\"File Size: \" + zipEntry.getSize());\n       System.out.println(\"Last Modification Date: \" + zipEntry.getLastModifiedTime());\n\n       FileOutputStream fout = new FileOutputStream(\"Extracted - \" + zipEntry.getName());\n       for (int c = zis.read(); c != -1; c = zis.read()) {\n           fout.write(c);\n       }\n       zis.closeEntry();\n       fout.close();\n\n       zis.close();\n       fin.close();\n   }\n}", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://www.mathworks.com/matlabcentral/answers/10945-read-files-in-zip-file-without-unzipping?requestedDomain=true", "url position": 36, "segments": [{"code": "function filelist = listzipcontents(zipFilename)\r\n% Create a Java file of the ZIP filename.\r\nzipJavaFile  = java.io.File(zipFilename);\r\n% Create a Java ZipFile and validate it.\r\nzipFile = org.apache.tools.zip.ZipFile(zipJavaFile);\r\n% Extract the entries from the ZipFile.\r\nentries = zipFile.getEntries;\r\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "% Initialize the file list.\r\nfilelist={};\r\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "% Loop through the entries and add to the file list.\r\nwhile entries.hasMoreElements\r\n    filelist = cat(1,filelist,char(entries.nextElement));\r\nend\r\nend\r\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": " entries = zipFile.getEntries; ", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "1. Change the number of accepted input arguments to 3.\n2. Handle the third input agument (say a cell array of requested files) or set to default (empty cell array)\n3. Pass the 3rd argument into the private function extractArchive  \n4. In the private function do a strcmp on the entryName and your cell array of requested file(s) - if match found extract, if not skip to next (use continue in the while loop)\r\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "a = fopen('ZIPFILENAME.zip','r');\r\nc2 = fread(a,'uint8=>uint8');\r\nzipname = char(c2(31:31+c2(27)-1));\r\nzipname = strcat(zipname')\r\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://www.javaworld.com/article/2077548/learn-java/java-tip-49--how-to-extract-java-resources-from-jar-and-zip-archives.html", "url position": 35, "segments": [{"code": "    JarResources jar = new JarResources (\"Images.jar\");\n    Image logo =\n    Toolkit.getDefaultToolkit().createImage (jar.getResource (\"logo.gif\");\n", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "public final class JarResources {\n   public boolean debugOn=false;\n   private Hashtable htSizes=new Hashtable();  \n   private Hashtable htJarContents=new Hashtable();\n   private String jarFileName;\n", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "   public JarResources(String jarFileName) {\n      this.jarFileName=jarFileName;\n      init();\n   }\n", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": true}, {"code": "   private void init() {\n      try {\n          ZipFile zf=new ZipFile(jarFileName);\n          Enumeration e=zf.entries();\n          while (e.hasMoreElements()) {\n              ZipEntry ze=(ZipEntry)e.nextElement();\n              if (debugOn) {\n                 System.out.println(dumpZipEntry(ze));\n              }\n              htSizes.put(ze.getName(),new Integer((int)ze.getSize()));\n          }\n          zf.close();\n", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "          FileInputStream fis=new FileInputStream(jarFileName);\n          BufferedInputStream bis=new BufferedInputStream(fis);\n          ZipInputStream zis=new ZipInputStream(bis);\n          ZipEntry ze=null;\n          while ((ze=zis.getNextEntry())!=null) {\n             if (ze.isDirectory()) {\n                continue;\n             }\n             if (debugOn) {\n                System.out.println(\n                   \"ze.getName()=\"+ze.getName()+\",\"+\"getSize()=\"+ze.getSize()\n                   );\n             }\n             int size=(int)ze.getSize();\n             // -1 means unknown size. \n             if (size==-1) {\n                size=((Integer)htSizes.get(ze.getName())).intValue();\n             }\n             byte[] b=new byte[(int)size];\n             int rb=0;\n             int chunk=0;\n             while (((int)size - rb) > 0) {\n                 chunk=zis.read(b,rb,(int)size - rb);\n                 if (chunk==-1) {\n                    break;\n                 }\n                 rb+=chunk;\n             }\n             // add to internal resource hashtable\n             htJarContents.put(ze.getName(),b);\n             if (debugOn) {\n                System.out.println(\n                   ze.getName()+\"  rb=\"+rb+\n                   \",size=\"+size+\n                   \",csize=\"+ze.getCompressedSize()\n                   );\n             }\n          }\n       } catch (NullPointerException e) {\n          System.out.println(\"done.\");\n       } catch (FileNotFoundException e) {\n          e.printStackTrace();\n       } catch (IOException e) {\n          e.printStackTrace();\n       }\n   }\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "   public static void main(String[] args) throws IOException {\n       if (args.length!=2) {\n          System.err.println(\n             \"usage: java JarResources <jar file name> <resource name>\"\n             );\n          System.exit(1);\n       }\n       JarResources jr=new JarResources(args[0]);\n       byte[] buff=jr.getResource(args[1]);\n       if (buff==null) {\n          System.out.println(\"Could not find \"+args[1]+\".\");\n       } else {\n          System.out.println(\"Found \"+args[1]+ \" (length=\"+buff.length+\").\");\n       }\n   }\n}   // End of JarResources class.\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}]},
{"query": "How to read ZIP archive", "url": "https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36560", "url position": 31, "segments": [{"code": "I will attach a sample zip file which contains an empty file slight under 50MB.\n\nSample code:\n\nimport java.io.File;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport junit.framework.TestCase;\nimport org.apache.commons.io.IOUtils;\n\npublic class TestZipBug extends TestCase {\n    public void testZipBug() throws Exception {\n        ZipFile zip = new ZipFile(new File(\"D:\\\\gnu-zip-large-file-bug.zip\"));\n        ZipEntry entry = (ZipEntry) zip.entries().nextElement();\n        IOUtils.toByteArray(zip.getInputStream(entry));\n        // Omitting code to verify contents.\n    }\n}\n\nResulting error:\nCaused by: gnu.java.util.zip.ZipException: Code lengths don't add up properly.\n                at gnu.java.util.zip.InflaterInputStream.read(Unknown Source)\n                at java.io.FilterInputStream.read(FilterInputStream.java:90)", "in_page_order": 1, "first_in_page": true, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": true}, {"code": "Created attachment 15777 [details]\ngnu-zip-large-file-bug.zip\n\nAttaching test file.", "in_page_order": 2, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "It appears that the code != 65536 check in InflaterHuffmanTree.buildTree() is unnecessary (and causing this problem). I looked at the SharpZipLib version of this file (which is a port of this code to .NET) and they commented out the check (with a comment saying it is incompatible with dynamic trees and pkzip 2.04g).\n\nI've confirmed that removing the check fixes this bug and produces the correct output.", "in_page_order": 3, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Created attachment 15786 [details]\nproposed fix", "in_page_order": 4, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "I can confirm that this patch fixes the issue both for the test file I submitted here and for the original file in which I noticed the problem.\n", "in_page_order": 5, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "I think I've found a zip file where this check was necessary to stop it causing problems.\n\nI'll see if I can find some data I'm allowed to attach here.\n", "in_page_order": 6, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Created attachment 15832 [details]\nSample file which is broken by the patch\n\nAttached file which caused problems when the lines were commented out.", "in_page_order": 7, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "It seems the problems are caused by the fact that the entry is encrypted yet Classpath's implementation ignores this and attempts to decompress it anyway.\n\nIt seems there is a 2-byte \"general purpose flags\" value stored before the compression method, and if bit 0 is set the entry is encrypted.  This could potentially be used to make getInputStream fail earlier to avoid that issue, in which case the existing patch for the large file itself can remain without causing a problem.\n", "in_page_order": 8, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Created attachment 15833 [details]\nDetect encryption.patch\n\nProposed fix to properly detect encrypted entries and reject getInputStream() before trying to do anything which won't work.\n\nThrows ZipException.  Not sure if it should have been this or another kind of IOException.", "in_page_order": 9, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "*** Bug 41513 has been marked as a duplicate of this bug. ***", "in_page_order": 10, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "Created attachment 18682 [details]\nInflaterHuffmanTree.java.patch - better version\n\nStill perform the check but allow for a special condition where there is only one code.", "in_page_order": 11, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Created attachment 18683 [details]\nActually corrupt zip file\n\nCorrupt zip file sample I manually constructed to trigger the exception in the check.", "in_page_order": 12, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "I've confirmed the patch by Daniel Noll as correct and committed a variation of his patch (with a modified exception message).", "in_page_order": 13, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}, {"code": "Set to 0.99", "in_page_order": 14, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": false, "semicolon": false}, {"code": "*** Bug 260998 has been marked as a duplicate of this bug. ***\nSeen from the domain http://volichat.com\nPage where seen: http://volichat.com/adult-chat-rooms\nMarked for reference. Resolved as fixed @bugzilla.", "in_page_order": 15, "first_in_page": false, "accepted_answer": false, "answer_votes": 0, "answer_stars": 0, "length": true, "semicolon": false}]}
]