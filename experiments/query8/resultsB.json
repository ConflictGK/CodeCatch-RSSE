[
  {
    "query": "How to read ZIP archive",
    "url": "https://www.mkyong.com/java/how-to-decompress-files-from-a-zip-file/",
    "url position": 9,
    "segments": [
      {
        "code": "\r\npackage com.mkyong.zip;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipInputStream;\r\n\r\npublic class UnZip\r\n{\r\n    List<String> fileList;\r\n    private static final String INPUT_ZIP_FILE = \"C:\\\\MyFile.zip\";\r\n    private static final String OUTPUT_FOLDER = \"C:\\\\outputzip\";\r\n\t\t\r\n    public static void main( String[] args )\r\n    {\r\n    \tUnZip unZip = new UnZip();\r\n    \tunZip.unZipIt(INPUT_ZIP_FILE,OUTPUT_FOLDER);\r\n    }\r\n    \r\n    /**\r\n     * Unzip it\r\n     * @param zipFile input zip file\r\n     * @param output zip file output folder\r\n     */\r\n    public void unZipIt(String zipFile, String outputFolder){\r\n\r\n     byte[] buffer = new byte[1024];\r\n    \t\r\n     try{\r\n    \t\t\r\n    \t//create output directory is not exists\r\n    \tFile folder = new File(OUTPUT_FOLDER);\r\n    \tif(!folder.exists()){\r\n    \t\tfolder.mkdir();\r\n    \t}\r\n    \t\t\r\n    \t//get the zip file content\r\n    \tZipInputStream zis = \r\n    \t\tnew ZipInputStream(new FileInputStream(zipFile));\r\n    \t//get the zipped file list entry\r\n    \tZipEntry ze = zis.getNextEntry();\r\n    \t\t\r\n    \twhile(ze!=null){\r\n    \t\t\t\r\n    \t   String fileName = ze.getName();\r\n           File newFile = new File(outputFolder + File.separator + fileName);\r\n                \r\n           System.out.println(\"file unzip : \"+ newFile.getAbsoluteFile());\r\n                \r\n            //create all non exists folders\r\n            //else you will hit FileNotFoundException for compressed folder\r\n            new File(newFile.getParent()).mkdirs();\r\n              \r\n            FileOutputStream fos = new FileOutputStream(newFile);             \r\n\r\n            int len;\r\n            while ((len = zis.read(buffer)) > 0) {\r\n       \t\tfos.write(buffer, 0, len);\r\n            }\r\n        \t\t\r\n            fos.close();   \r\n            ze = zis.getNextEntry();\r\n    \t}\r\n    \t\r\n        zis.closeEntry();\r\n    \tzis.close();\r\n    \t\t\r\n    \tSystem.out.println(\"Done\");\r\n    \t\t\r\n    }catch(IOException ex){\r\n       ex.printStackTrace(); \r\n    }\r\n   }    \r\n}\r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "UnZip.__init__": false,
          "UnZip.unZipIt": false,
          "File.__init__": true,
          "File.exists": true,
          "File.mkdir": true,
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.closeEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "File.exists": 464,
          "File.mkdir": 185,
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.closeEntry": 9,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "File.exists": 4741,
          "File.mkdir": 680,
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.closeEntry": 12,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "File.exists": 10225,
          "File.mkdir": 1074,
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.closeEntry": 17,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "File.exists": "java.io.File.exists",
          "File.mkdir": "java.io.File.mkdir",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.closeEntry": "java.util.zip.ZipInputStream.closeEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 0.8
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://zetcode.com/java/zipinputstream/",
    "url position": 13,
    "segments": [
      {
        "code": "\npackage com.zetcode;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class JavaReadZip {\n\n    private final static Long MILLS_IN_DAY = 86400000L;\n\n    public static void main(String[] args) throws IOException {\n\n        String fileName = \"src/resources/myfile.zip\";\n\n        try (FileInputStream fis = new FileInputStream(fileName);\n                BufferedInputStream bis = new BufferedInputStream(fis);\n                ZipInputStream zis = new ZipInputStream(bis)) {\n            \n            ZipEntry ze;\n\n            while ((ze = zis.getNextEntry()) != null) {\n\n                System.out.format(\"File: %s Size: %d Last Modified %s %n\",\n                        ze.getName(), ze.getSize(),\n                        LocalDate.ofEpochDay(ze.getTime() / MILLS_IN_DAY));\n            }\n        }\n    }\n}\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true
        },
        "APIsProjects": {
          "AM.__init__": 62
        },
        "APIsFiles": {
          "AM.__init__": 555
        },
        "APIsSnippets": {
          "AM.__init__": 987
        },
        "APIsQualifiedNames": {},
        "API_Ratio": 1.0
      },
      {
        "code": "\nBufferedInputStream bis = new BufferedInputStream(fis);\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\npackage com.zetcode;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class JavaUnzip {\n\n    public static void main(String args[]) throws Exception {\n\n        byte[] buffer = new byte[2048];\n\n        Path outDir = Paths.get(\"src/resources/output/\");\n        String zipFileName = \"src/resources/myfile.zip\";\n\n        try (FileInputStream fis = new FileInputStream(zipFileName);\n                BufferedInputStream bis = new BufferedInputStream(fis);\n                ZipInputStream stream = new ZipInputStream(bis)) {\n\n            ZipEntry entry;\n            while ((entry = stream.getNextEntry()) != null) {\n\n                Path filePath = outDir.resolve(entry.getName());\n\n                try (FileOutputStream fos = new FileOutputStream(filePath.toFile());\n                        BufferedOutputStream bos = new BufferedOutputStream(fos, buffer.length)) {\n\n                    int len;\n                    while ((len = stream.read(buffer)) > 0) {\n                        bos.write(buffer, 0, len);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "in_page_order": 10,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true
        },
        "APIsProjects": {
          "AM.__init__": 62
        },
        "APIsFiles": {
          "AM.__init__": 555
        },
        "APIsSnippets": {
          "AM.__init__": 987
        },
        "APIsQualifiedNames": {},
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://tutorials.jenkov.com/java-zip/zipfile.html",
    "url position": 16,
    "segments": [
      {
        "code": "\n ZipFile zipFile = new ZipFile(\"d:\\\\data\\\\myzipfile.zip\");\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89
        },
        "APIsFiles": {
          "ZipFile.__init__": 213
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\nwhile(entries.hasMoreElements()){\n    ZipEntry entry = entries.nextElement();\n    if(entry.isDirectory()){\n        System.out.println(\"dir  : \" + entry.getName());\n    } else {\n        System.out.println(\"file : \" + entry.getName());\n    }\n}\n",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.isDirectory": true,
          "ZipEntry.getName": true
        },
        "APIsProjects": {
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.isDirectory": 41,
          "ZipEntry.getName": 71
        },
        "APIsFiles": {
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.isDirectory": 72,
          "ZipEntry.getName": 189
        },
        "APIsSnippets": {
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.isDirectory": 89,
          "ZipEntry.getName": 354
        },
        "APIsQualifiedNames": {
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.isDirectory": "java.util.zip.ZipEntry.isDirectory",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://stackoverflow.com/questions/15667125/read-content-from-files-which-are-inside-zip-file",
    "url position": 1,
    "segments": [
      {
        "code": "public static void main(String[] args) throws IOException {\n    ZipFile zipFile = new ZipFile(\"C:/test.zip\");\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    while(entries.hasMoreElements()){\n        ZipEntry entry = entries.nextElement();\n        InputStream stream = zipFile.getInputStream(entry);\n    }\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": true,
        "answer_votes": "103",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipFile.getInputStream": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipFile.getInputStream": 73
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipFile.getInputStream": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipFile.getInputStream": 211
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "private void extractAll(URI fromZip, Path toDirectory) throws IOException{\n    FileSystem zipFs = FileSystems.newFileSystem(fromZip, Collections.emptyMap());\n\n    for(Path root : zipFs.getRootDirectories()) {\n        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \n                    throws IOException {\n                // You can do anything you want with the path here\n                Files.copy(file, toDirectory);\n                return FileVisitResult.CONTINUE;\n            }\n\n            @Override\n            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) \n                    throws IOException {\n                // In a full implementation, you'd need to create each \n                // sub-directory of the destination directory before \n                // copying files into it\n                return super.preVisitDirectory(dir, attrs);\n            }\n        });\n    }\n}\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "24",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "SimpleFileVisitor.__init__": true
        },
        "APIsProjects": {
          "SimpleFileVisitor.__init__": 18
        },
        "APIsFiles": {
          "SimpleFileVisitor.__init__": 37
        },
        "APIsSnippets": {
          "SimpleFileVisitor.__init__": 49
        },
        "APIsQualifiedNames": {
          "SimpleFileVisitor.__init__": "java.nio.file.SimpleFileVisitor.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public class ZippedFileInputStream extends InputStream {\n\n    private ZipInputStream is;\n\n    public ZippedFileInputStream(ZipInputStream is){\n        this.is = is;\n    }\n\n    @Override\n    public int read() throws IOException {\n        return is.read();\n    }\n\n    @Override\n    public void close() throws IOException {\n        is.closeEntry();\n    }\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "1",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipInputStream.read": true,
          "ZipInputStream.closeEntry": true
        },
        "APIsProjects": {
          "ZipInputStream.read": 14,
          "ZipInputStream.closeEntry": 9
        },
        "APIsFiles": {
          "ZipInputStream.read": 17,
          "ZipInputStream.closeEntry": 12
        },
        "APIsSnippets": {
          "ZipInputStream.read": 21,
          "ZipInputStream.closeEntry": 17
        },
        "APIsQualifiedNames": {
          "ZipInputStream.read": "java.util.zip.ZipInputStream.read",
          "ZipInputStream.closeEntry": "java.util.zip.ZipInputStream.closeEntry"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(\"SomeFile.zip\"));\n\n    while((entry = zipInputStream.getNextEntry())!= null) {\n\n     ZippedFileInputStream archivedFileInputStream = new ZippedFileInputStream(zipInputStream);\n\n     //... perform whatever logic you want here with ZippedFileInputStream \n\n     // note that this will only close the current entry stream and not the ZipInputStream\n     archivedFileInputStream.close();\n\n    }\n    zipInputStream.close();\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "1",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.oracle.com/technetwork/articles/java/compress-1565076.html",
    "url position": 14,
    "segments": [
      {
        "code": "\nFileInputStream fis = new FileInputStream(\"figs.zip\"); ZipInputStream zin = new    ZipInputStream(new BufferedInputStream(fis)); ",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "BufferedInputStream.__init__": true,
          "ZipInputStream.__init__": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "BufferedInputStream.__init__": 224,
          "ZipInputStream.__init__": 80
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "BufferedInputStream.__init__": 793,
          "ZipInputStream.__init__": 172
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "BufferedInputStream.__init__": 1031,
          "ZipInputStream.__init__": 206
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nint BUFFER = 2048;\nFileOutputStream fos = new \n  FileOutputStream(entry.getName());\nBufferedOutputStream dest = new \n  BufferedOutputStream(fos, BUFFER);\n ",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class UnZip {\n   final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedOutputStream dest = null;\n         FileInputStream fis = new \n\t   FileInputStream(argv[0]);\n         ZipInputStream zis = new \n\t   ZipInputStream(new BufferedInputStream(fis));\n         ZipEntry entry;\n         while((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" +entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            // write the files to the disk\n            FileOutputStream fos = new \n\t      FileOutputStream(entry.getName());\n            dest = new \n              BufferedOutputStream(fos, BUFFER);\n            while ((count = zis.read(data, 0, BUFFER)) \n              != -1) {\n               dest.write(data, 0, count);\n            }\n            dest.flush();\n            dest.close();\n         }\n         zis.close();\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n}",
        "in_page_order": 7,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "BufferedInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "BufferedInputStream.__init__": 224,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "BufferedInputStream.__init__": 793,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "BufferedInputStream.__init__": 1031,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nis = new \n  BufferedInputStream(zipfile.getInputStream(entry)); ",
        "in_page_order": 9,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nbyte data[] = new byte[BUFFER];\nFileOutputStream fos = new \n  FileOutputStream(entry.getName());\ndest = new BufferedOutputStream(fos, BUFFER);\nwhile ((count = is.read(data, 0, BUFFER)) != -1) {\n   dest.write(data, 0, count);\n} ",
        "in_page_order": 10,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nimport java.io.*;\nimport java.util.*;\nimport java.util.zip.*;\n\npublic class UnZip2 {\n   static final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedOutputStream dest = null;\n         BufferedInputStream is = null;\n         ZipEntry entry;\n         ZipFile zipfile = new ZipFile(argv[0]);\n         Enumeration e = zipfile.entries();\n         while(e.hasMoreElements()) {\n            entry = (ZipEntry) e.nextElement();\n            System.out.println(\"Extracting: \" +entry);\n            is = new BufferedInputStream\n              (zipfile.getInputStream(entry));\n            int count;\n            byte data[] = new byte[BUFFER];\n            FileOutputStream fos = new \n              FileOutputStream(entry.getName());\n            dest = new \n              BufferedOutputStream(fos, BUFFER);\n            while ((count = is.read(data, 0, BUFFER)) \n              != -1) {\n               dest.write(data, 0, count);\n            }\n            dest.flush();\n            dest.close();\n            is.close();\n         }\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n}",
        "in_page_order": 12,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipFile.getInputStream": true,
          "BufferedInputStream.__init__": true,
          "ZipEntry.getName": true,
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true,
          "BufferedInputStream.read": true,
          "BufferedOutputStream.flush": true,
          "BufferedOutputStream.close": true,
          "BufferedInputStream.close": true,
          "Enumeration.printStackTrace": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipFile.getInputStream": 73,
          "BufferedInputStream.__init__": 224,
          "ZipEntry.getName": 71,
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179,
          "BufferedInputStream.read": 94,
          "BufferedOutputStream.flush": 50,
          "BufferedOutputStream.close": 87,
          "BufferedInputStream.close": 91,
          "Enumeration.printStackTrace": 5
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipFile.getInputStream": 153,
          "BufferedInputStream.__init__": 793,
          "ZipEntry.getName": 189,
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622,
          "BufferedInputStream.read": 171,
          "BufferedOutputStream.flush": 96,
          "BufferedOutputStream.close": 188,
          "BufferedInputStream.close": 196,
          "Enumeration.printStackTrace": 7
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipFile.getInputStream": 211,
          "BufferedInputStream.__init__": 1031,
          "ZipEntry.getName": 354,
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789,
          "BufferedInputStream.read": 219,
          "BufferedOutputStream.flush": 110,
          "BufferedOutputStream.close": 233,
          "BufferedInputStream.close": 246,
          "Enumeration.printStackTrace": 7
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "BufferedInputStream.read": "java.io.BufferedInputStream.read",
          "BufferedOutputStream.flush": "java.io.BufferedOutputStream.flush",
          "BufferedOutputStream.close": "java.io.BufferedOutputStream.close",
          "BufferedInputStream.close": "java.io.BufferedInputStream.close",
          "Enumeration.printStackTrace": "java.util.Enumeration.printStackTrace"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nFileOutputStream dest = new \n  FileOutputStream(\"myfigs.zip\");\nZipOutputStream out = new \n  ZipOutputStream(new BufferedOutputStream(dest)); ",
        "in_page_order": 13,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true,
          "ZipOutputStream.__init__": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179,
          "ZipOutputStream.__init__": 74
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622,
          "ZipOutputStream.__init__": 166
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789,
          "ZipOutputStream.__init__": 224
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nFile f = new File(\".\");\nString files[] = f.list();\nfor (int i=0; i<files.length; i++) {\n   System.out.println(\"Adding: \"+files[i]);\n   FileInputStream fi = new FileInputStream(files[i]);\n   // create zip entry\n   // add entries to ZIP file\n}",
        "in_page_order": 14,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "File.list": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "File.list": 141
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "File.list": 363
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "File.list": 497
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "File.list": "java.io.File.list"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class Zip {\n   static final int BUFFER = 2048;\n   public static void main (String argv[]) {\n      try {\n         BufferedInputStream origin = null;\n         FileOutputStream dest = new \n           FileOutputStream(\"c:\\\\zip\\\\myfigs.zip\");\n         ZipOutputStream out = new ZipOutputStream(new \n           BufferedOutputStream(dest));\n         //out.setMethod(ZipOutputStream.DEFLATED);\n         byte data[] = new byte[BUFFER];\n         // get a list of files from current directory\n         File f = new File(\".\");\n         String files[] = f.list();\n\n         for (int i=0; i<files.length; i++) {\n            System.out.println(\"Adding: \"+files[i]);\n            FileInputStream fi = new \n              FileInputStream(files[i]);\n            origin = new \n              BufferedInputStream(fi, BUFFER);\n            ZipEntry entry = new ZipEntry(files[i]);\n            out.putNextEntry(entry);\n            int count;\n            while((count = origin.read(data, 0, \n              BUFFER)) != -1) {\n               out.write(data, 0, count);\n            }\n            origin.close();\n         }\n         out.close();\n      } catch(Exception e) {\n         e.printStackTrace();\n      }\n   }\n} ",
        "in_page_order": 17,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true,
          "ZipOutputStream.__init__": true,
          "File.__init__": true,
          "File.list": true,
          "ZipOutputStream.close": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179,
          "ZipOutputStream.__init__": 74,
          "File.__init__": 591,
          "File.list": 141,
          "ZipOutputStream.close": 69
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622,
          "ZipOutputStream.__init__": 166,
          "File.__init__": 13065,
          "File.list": 363,
          "ZipOutputStream.close": 134
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789,
          "ZipOutputStream.__init__": 224,
          "File.__init__": 40468,
          "File.list": 497,
          "ZipOutputStream.close": 179
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__",
          "File.__init__": "java.io.File.__init__",
          "File.list": "java.io.File.list",
          "ZipOutputStream.close": "java.util.zip.ZipOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class SaveEmployee {\n   public static void main(String argv[]) throws \n     Exception {\n      // create some objects\n      Employee sarah = new Employee(\"S. Jordan\", 28, \n        56000);\n      Employee sam = new Employee(\"S. McDonald\", 29, \n        58000);\n      // serialize the objects sarah and sam\n      FileOutputStream fos = new \n        FileOutputStream(\"db\");\n      GZIPOutputStream gz = new GZIPOutputStream(fos);\n      ObjectOutputStream oos = new \n        ObjectOutputStream(gz);\n      oos.writeObject(sarah);\n      oos.writeObject(sam);\n      oos.flush();\n      oos.close();\n      fos.close();\n   }\n} ",
        "in_page_order": 21,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Employee.__init__": true,
          "FileOutputStream.__init__": true,
          "GZIPOutputStream.__init__": true,
          "ObjectOutputStream.__init__": true,
          "ObjectOutputStream.writeObject": true,
          "ObjectOutputStream.flush": true,
          "ObjectOutputStream.close": true,
          "FileOutputStream.close": true
        },
        "APIsProjects": {
          "Employee.__init__": 23,
          "FileOutputStream.__init__": 430,
          "GZIPOutputStream.__init__": 120,
          "ObjectOutputStream.__init__": 203,
          "ObjectOutputStream.writeObject": 205,
          "ObjectOutputStream.flush": 71,
          "ObjectOutputStream.close": 152,
          "FileOutputStream.close": 267
        },
        "APIsFiles": {
          "Employee.__init__": 152,
          "FileOutputStream.__init__": 2603,
          "GZIPOutputStream.__init__": 225,
          "ObjectOutputStream.__init__": 739,
          "ObjectOutputStream.writeObject": 966,
          "ObjectOutputStream.flush": 182,
          "ObjectOutputStream.close": 470,
          "FileOutputStream.close": 1003
        },
        "APIsSnippets": {
          "Employee.__init__": 318,
          "FileOutputStream.__init__": 3767,
          "GZIPOutputStream.__init__": 296,
          "ObjectOutputStream.__init__": 1011,
          "ObjectOutputStream.writeObject": 1713,
          "ObjectOutputStream.flush": 225,
          "ObjectOutputStream.close": 654,
          "FileOutputStream.close": 1322
        },
        "APIsQualifiedNames": {
          "Employee.__init__": "com.demo.form.Employee.__init__",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "GZIPOutputStream.__init__": "java.util.zip.GZIPOutputStream.__init__",
          "ObjectOutputStream.__init__": "java.io.ObjectOutputStream.__init__",
          "ObjectOutputStream.writeObject": "java.io.ObjectOutputStream.writeObject",
          "ObjectOutputStream.flush": "java.io.ObjectOutputStream.flush",
          "ObjectOutputStream.close": "java.io.ObjectOutputStream.close",
          "FileOutputStream.close": "java.io.FileOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nimport java.io.*;\nimport java.util.zip.*;\n\npublic class ReadEmployee {\n   public static void main(String argv[]) throws \n     Exception{\n      //deserialize objects sarah and sam\n      FileInputStream fis = new FileInputStream(\"db\");\n      GZIPInputStream gs = new GZIPInputStream(fis);\n      ObjectInputStream ois = new ObjectInputStream(gs);\n      Employee sarah = (Employee) ois.readObject();\n      Employee sam = (Employee) ois.readObject();\n      //print the records after reconstruction of state\n      sarah.print();\n      sam.print();\n      ois.close();\n      fis.close();\n   }\n}\n ",
        "in_page_order": 22,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "GZIPInputStream.__init__": true,
          "ObjectInputStream.__init__": true,
          "ObjectInputStream.readObject": true,
          "Employee.print": false,
          "ObjectInputStream.close": true,
          "FileInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "GZIPInputStream.__init__": 137,
          "ObjectInputStream.__init__": 194,
          "ObjectInputStream.readObject": 197,
          "ObjectInputStream.close": 124,
          "FileInputStream.close": 218
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "GZIPInputStream.__init__": 249,
          "ObjectInputStream.__init__": 699,
          "ObjectInputStream.readObject": 888,
          "ObjectInputStream.close": 337,
          "FileInputStream.close": 664
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "GZIPInputStream.__init__": 293,
          "ObjectInputStream.__init__": 990,
          "ObjectInputStream.readObject": 1579,
          "ObjectInputStream.close": 475,
          "FileInputStream.close": 861
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "GZIPInputStream.__init__": "java.util.zip.GZIPInputStream.__init__",
          "ObjectInputStream.__init__": "java.io.ObjectInputStream.__init__",
          "ObjectInputStream.readObject": "java.io.ObjectInputStream.readObject",
          "ObjectInputStream.close": "java.io.ObjectInputStream.close",
          "FileInputStream.close": "java.io.FileInputStream.close"
        },
        "API_Ratio": 0.8571428571428571
      },
      {
        "code": "\n// write to client\nGZIPOutputStream gzipout = new \n  GZIPOutputStream(socket.getOutputStream());\nObjectOutputStream oos = new \n  ObjectOutputStream(gzipout);\noos.writeObject(obj);\ngzipos.finish(); ",
        "in_page_order": 23,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "GZIPOutputStream.__init__": true,
          "ObjectOutputStream.__init__": true,
          "ObjectOutputStream.writeObject": true
        },
        "APIsProjects": {
          "GZIPOutputStream.__init__": 120,
          "ObjectOutputStream.__init__": 203,
          "ObjectOutputStream.writeObject": 205
        },
        "APIsFiles": {
          "GZIPOutputStream.__init__": 225,
          "ObjectOutputStream.__init__": 739,
          "ObjectOutputStream.writeObject": 966
        },
        "APIsSnippets": {
          "GZIPOutputStream.__init__": 296,
          "ObjectOutputStream.__init__": 1011,
          "ObjectOutputStream.writeObject": 1713
        },
        "APIsQualifiedNames": {
          "GZIPOutputStream.__init__": "java.util.zip.GZIPOutputStream.__init__",
          "ObjectOutputStream.__init__": "java.io.ObjectOutputStream.__init__",
          "ObjectOutputStream.writeObject": "java.io.ObjectOutputStream.writeObject"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\n// read from server\nSocket socket = new Socket(remoteServerIP, PORT);\nGZIPInputStream gzipin = new \n  GZIPInputStream(socket.getInputStream());\nObjectInputStream ois = new ObjectInputStream(gzipin);\nObject o = ois.readObject(); ",
        "in_page_order": 24,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Socket.__init__": true,
          "Socket.getInputStream": true,
          "GZIPInputStream.__init__": true,
          "ObjectInputStream.__init__": true,
          "ObjectInputStream.readObject": true
        },
        "APIsProjects": {
          "Socket.__init__": 139,
          "Socket.getInputStream": 134,
          "GZIPInputStream.__init__": 137,
          "ObjectInputStream.__init__": 194,
          "ObjectInputStream.readObject": 197
        },
        "APIsFiles": {
          "Socket.__init__": 403,
          "Socket.getInputStream": 439,
          "GZIPInputStream.__init__": 249,
          "ObjectInputStream.__init__": 699,
          "ObjectInputStream.readObject": 888
        },
        "APIsSnippets": {
          "Socket.__init__": 709,
          "Socket.getInputStream": 716,
          "GZIPInputStream.__init__": 293,
          "ObjectInputStream.__init__": 990,
          "ObjectInputStream.readObject": 1579
        },
        "APIsQualifiedNames": {
          "Socket.__init__": "java.net.Socket.__init__",
          "Socket.getInputStream": "java.net.Socket.getInputStream",
          "GZIPInputStream.__init__": "java.util.zip.GZIPInputStream.__init__",
          "ObjectInputStream.__init__": "java.io.ObjectInputStream.__init__",
          "ObjectInputStream.readObject": "java.io.ObjectInputStream.readObject"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://www.java-tips.org/java-se-tips-100019/38-java-util-zip/601-how-to-read-files-within-a-zip-file.html",
    "url position": 8,
    "segments": [
      {
        "code": " import java.io.*;\r\nimport java.util.zip.*;\r\n\r\nclass  readZipFiles \r\n{\r\n    public static void main(String[] args) \r\n    {\r\n         if (args.length != 1) \r\n        {\r\n            System.out.println(\"Usage: java testFiles [zipfile path] \");\r\n            return;\r\n        }\r\n        try\r\n        {\r\n            String filename = args[0];\r\n            readZipFiles list = new readZipFiles( );\r\n            list.readZipFiles(filename);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void readZipFiles(String filename)\r\n    {\r\n        try\r\n        {\r\n            byte[] buf = new byte[1024];\r\n            ZipInputStream zipinputstream = null;\r\n            ZipEntry zipentry;\r\n            zipinputstream = new ZipInputStream(\r\n                 new FileInputStream(filename));\r\n\r\n            zipentry = zipinputstream.getNextEntry();\r\n            while (zipentry != null) \r\n            { \r\n                //for each entry to be extracted\r\n                String entryName = zipentry.getName();\r\n                System.out.println(\"File ::\"+entryName);\r\n                RandomAccessFile  rf;\r\n                File newFile = new File(entryName);\r\n                String directory = newFile.getParent();\r\n\r\n                if(directory == null)\r\n                {\r\n                    if(newFile.isDirectory())\r\n                        break;\r\n                }\r\n\r\n                rf = new RandomAccessFile(entryName,\"r\");               \r\n                String line;\r\n\r\n                if ((line =rf.readLine()) !=null)\r\n                {\r\n                    System.out.println(line);\r\n                }\r\n\r\n                rf.close(); \r\n                zipinputstream.closeEntry();\r\n                zipentry = zipinputstream.getNextEntry();\r\n\r\n            }//while\r\n\r\n            zipinputstream.close();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "readZipFiles.__init__": false,
          "readZipFiles.readZipFiles": false,
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 0.6666666666666666
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://stackoverflow.com/questions/46217926/how-to-read-all-java-files-from-a-zip-file",
    "url position": 2,
    "segments": [
      {
        "code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport org.apache.commons.io.IOUtils;\n\npublic class test {\n    public static void main(String[] args) throws IOException {\n        ZipFile zipFile = new ZipFile(\"test.zip\");\n        Enumeration<? extends ZipEntry> entries = zipFile.entries();\n        System.out.println(entries);\n\n        while(entries.hasMoreElements()){\n            ZipEntry entry = entries.nextElement();\n            System.out.println(entry.getName());\n            if(entry.getName().contains(\"java\")){\n                InputStream stream = zipFile.getInputStream(entry);\n                System.out.println(IOUtils.toString(stream, StandardCharsets.UTF_8));\n            }\n        }\n    }\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": "1",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getName": true,
          "ZipFile.getInputStream": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getName": 71,
          "ZipFile.getInputStream": 73
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getName": 189,
          "ZipFile.getInputStream": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getName": 354,
          "ZipFile.getInputStream": 211
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "File javaFile = new File(zipEntry.getName());\njavaFiles.add(javaFile); \n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "0",
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "File.__init__": true
        },
        "APIsProjects": {
          "File.__init__": 591
        },
        "APIsFiles": {
          "File.__init__": 13065
        },
        "APIsSnippets": {
          "File.__init__": 40468
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": " ZipFile zipFile = new ZipFile(\"C:/test.zip\");\n\nEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\nwhile(entries.hasMoreElements()){\n    ZipEntry entry = entries.nextElement();\n    InputStream stream = zipFile.getInputStream(entry);\n}\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "0",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipFile.getInputStream": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipFile.getInputStream": 73
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipFile.getInputStream": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipFile.getInputStream": 211
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.thecoderscorner.com/team-blog/java-and-jvm/12-reading-a-zip-file-from-java-using-zipinputstream/",
    "url position": 7,
    "segments": [
      {
        "code": "package com.thecoderscorner.example.compression;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Date;\nimport java.util.logging.Logger;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * ZipReader reads the zip file specified using ZipInputStream,\n * it then outputs the raw files into the output directory\n * specified as a parameter.\n */\npublic class ZipReader\n{\n    private static final Logger LOGGER = Logger.getLogger(\"ZipReader\");\n    // Expands the zip file passed as argument 1, into the\n    // directory provided in argument 2\n    public static void main(String args[]) throws Exception\n    {\n        if(args.length != 2)\n        {\n            LOGGER.severe(\"zipreader zipfile outputdir\");\n            return;\n        }\n\n        // create a buffer to improve copy performance later.\n        byte[] buffer = new byte[2048];\n\n        Path outDir = Paths.get(args[1]);\n\n        try(\n                // we open the zip file using a java 7 try with resources block so\n                // that we don't need a finally.\n                ZipInputStream stream = new ZipInputStream(new FileInputStream(args[0]))\n        )\n        {\n            LOGGER.info(\"Zip file: \" + args[0] + \" has been opened\");\n\n            // now iterate through each file in the zip archive. The get\n            // next entry call will return a ZipEntry for each file in\n            // the stream\n            ZipEntry entry;\n            while((entry = stream.getNextEntry())!=null)\n            {\n                // We can read the file information from the ZipEntry.\n                String fileInfo = String.format(\"Entry: [%s] len %d added %TD\",\n                                entry.getName(), entry.getSize(),\n                                new Date(entry.getTime()));\n                LOGGER.info(fileInfo);\n\n                Path filePath = outDir.resolve(entry.getName());\n\n                // Now we can read the file data from the stream. We now\n                // treat the stream like a usual input stream reading from\n                // it until it returns 0 or less.\n                try (\n                        FileOutputStream  output = new FileOutputStream(filePath.toFile())\n                )\n                {\n                    LOGGER.info(\"Writing file: \" + filePath);\n                    int len;\n                    while ((len = stream.read(buffer)) > 0)\n                    {\n                        output.write(buffer, 0, len);\n                    }\n                }\n            }\n        }\n    }\n}\n\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "Logger.severe": true,
          "AM.__init__": true,
          "Logger.info": true
        },
        "APIsProjects": {
          "Logger.severe": 53,
          "AM.__init__": 62,
          "Logger.info": 316
        },
        "APIsFiles": {
          "Logger.severe": 196,
          "AM.__init__": 555,
          "Logger.info": 7705
        },
        "APIsSnippets": {
          "Logger.severe": 430,
          "AM.__init__": 987,
          "Logger.info": 27926
        },
        "APIsQualifiedNames": {
          "Logger.severe": "java.util.logging.Logger.severe",
          "Logger.info": "org.slf4j.Logger.info"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.avajava.com/tutorials/lessons/how-do-i-unzip-the-contents-of-a-zip-file.html",
    "url position": 12,
    "segments": [
      {
        "code": "package test;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.Enumeration;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipFile;\r\n\r\npublic class ExtractZipContents {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\ttry {\r\n\t\t\tZipFile zipFile = new ZipFile(\"test.zip\");\r\n\t\t\tEnumeration<?> enu = zipFile.entries();\r\n\t\t\twhile (enu.hasMoreElements()) {\r\n\t\t\t\tZipEntry zipEntry = (ZipEntry) enu.nextElement();\r\n\r\n\t\t\t\tString name = zipEntry.getName();\r\n\t\t\t\tlong size = zipEntry.getSize();\r\n\t\t\t\tlong compressedSize = zipEntry.getCompressedSize();\r\n\t\t\t\tSystem.out.printf(\"name: %-20s | size: %6d | compressed size: %6d\\n\", \r\n\t\t\t\t\t\tname, size, compressedSize);\r\n\r\n\t\t\t\tFile file = new File(name);\r\n\t\t\t\tif (name.endsWith(\"/\")) {\r\n\t\t\t\t\tfile.mkdirs();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tFile parent = file.getParentFile();\r\n\t\t\t\tif (parent != null) {\r\n\t\t\t\t\tparent.mkdirs();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tInputStream is = zipFile.getInputStream(zipEntry);\r\n\t\t\t\tFileOutputStream fos = new FileOutputStream(file);\r\n\t\t\t\tbyte[] bytes = new byte[1024];\r\n\t\t\t\tint length;\r\n\t\t\t\twhile ((length = is.read(bytes)) >= 0) {\r\n\t\t\t\t\tfos.write(bytes, 0, length);\r\n\t\t\t\t}\r\n\t\t\t\tis.close();\r\n\t\t\t\tfos.close();\r\n\r\n\t\t\t}\r\n\t\t\tzipFile.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getName": true,
          "ZipEntry.getSize": true,
          "ZipEntry.getCompressedSize": true,
          "File.__init__": true,
          "File.mkdirs": true,
          "ZipFile.getInputStream": true,
          "FileOutputStream.__init__": true,
          "InputStream.read": true,
          "InputStream.close": true,
          "FileOutputStream.close": true,
          "ZipFile.close": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getName": 71,
          "ZipEntry.getSize": 21,
          "ZipEntry.getCompressedSize": 7,
          "File.__init__": 591,
          "File.mkdirs": 319,
          "ZipFile.getInputStream": 73,
          "FileOutputStream.__init__": 430,
          "InputStream.read": 397,
          "InputStream.close": 441,
          "FileOutputStream.close": 267,
          "ZipFile.close": 69
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getName": 189,
          "ZipEntry.getSize": 46,
          "ZipEntry.getCompressedSize": 12,
          "File.__init__": 13065,
          "File.mkdirs": 1681,
          "ZipFile.getInputStream": 153,
          "FileOutputStream.__init__": 2603,
          "InputStream.read": 1923,
          "InputStream.close": 2481,
          "FileOutputStream.close": 1003,
          "ZipFile.close": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getName": 354,
          "ZipEntry.getSize": 83,
          "ZipEntry.getCompressedSize": 37,
          "File.__init__": 40468,
          "File.mkdirs": 2446,
          "ZipFile.getInputStream": 211,
          "FileOutputStream.__init__": 3767,
          "InputStream.read": 4134,
          "InputStream.close": 3284,
          "FileOutputStream.close": 1322,
          "ZipFile.close": 215
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "ZipEntry.getSize": "java.util.zip.ZipEntry.getSize",
          "ZipEntry.getCompressedSize": "java.util.zip.ZipEntry.getCompressedSize",
          "File.__init__": "java.io.File.__init__",
          "File.mkdirs": "java.io.File.mkdirs",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close",
          "FileOutputStream.close": "java.io.FileOutputStream.close",
          "ZipFile.close": "java.util.zip.ZipFile.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://stackoverflow.com/questions/36548755/read-zip-file-content-without-extracting-in-java",
    "url position": 3,
    "segments": [
      {
        "code": "public static void main(String[] args) throws IOException {\n    ZipFile zip = new ZipFile(\"C:\\\\Users\\\\mofh\\\\Desktop\\\\test.zip\");\n\n\n    for (Enumeration e = zip.entries(); e.hasMoreElements(); ) {\n        ZipEntry entry = (ZipEntry) e.nextElement();\n        if (!entry.isDirectory()) {\n            if (FilenameUtils.getExtension(entry.getName()).equals(\"png\")) {\n                byte[] image = getImage(zip.getInputStream(entry));\n                //do your thing\n            } else if (FilenameUtils.getExtension(entry.getName()).equals(\"txt\")) {\n                StringBuilder out = getTxtFiles(zip.getInputStream(entry));\n                //do your thing\n            }\n        }\n    }\n\n\n}\n\nprivate  static StringBuilder getTxtFiles(InputStream in)  {\n    StringBuilder out = new StringBuilder();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n    String line;\n    try {\n        while ((line = reader.readLine()) != null) {\n            out.append(line);\n        }\n    } catch (IOException e) {\n        // do something, probably not a text file\n        e.printStackTrace();\n    }\n    return out;\n}\n\nprivate static byte[] getImage(InputStream in)  {\n    try {\n        BufferedImage image = ImageIO.read(in); //just checking if the InputStream belongs in fact to an image\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"png\", baos);\n        return baos.toByteArray();\n    } catch (IOException e) {\n        // do something, it is not a image\n        e.printStackTrace();\n    }\n    return null;\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": true,
        "answer_votes": "1",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "ZipEntry.isDirectory": true,
          "ZipFile.getInputStream": true,
          "StringBuilder.__init__": true,
          "InputStreamReader.__init__": true,
          "BufferedReader.__init__": true,
          "BufferedReader.readLine": true,
          "ByteArrayOutputStream.__init__": true,
          "ByteArrayOutputStream.toByteArray": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "ZipEntry.isDirectory": 41,
          "ZipFile.getInputStream": 73,
          "StringBuilder.__init__": 662,
          "InputStreamReader.__init__": 463,
          "BufferedReader.__init__": 450,
          "BufferedReader.readLine": 429,
          "ByteArrayOutputStream.__init__": 447,
          "ByteArrayOutputStream.toByteArray": 418
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "ZipEntry.isDirectory": 72,
          "ZipFile.getInputStream": 153,
          "StringBuilder.__init__": 20643,
          "InputStreamReader.__init__": 2683,
          "BufferedReader.__init__": 2803,
          "BufferedReader.readLine": 2480,
          "ByteArrayOutputStream.__init__": 3528,
          "ByteArrayOutputStream.toByteArray": 2862
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "ZipEntry.isDirectory": 89,
          "ZipFile.getInputStream": 211,
          "StringBuilder.__init__": 30174,
          "InputStreamReader.__init__": 3903,
          "BufferedReader.__init__": 4179,
          "BufferedReader.readLine": 4047,
          "ByteArrayOutputStream.__init__": 6155,
          "ByteArrayOutputStream.toByteArray": 5168
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "ZipEntry.isDirectory": "java.util.zip.ZipEntry.isDirectory",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "StringBuilder.__init__": "java.lang.StringBuilder.__init__",
          "InputStreamReader.__init__": "java.io.InputStreamReader.__init__",
          "BufferedReader.__init__": "java.io.BufferedReader.__init__",
          "BufferedReader.readLine": "java.io.BufferedReader.readLine",
          "ByteArrayOutputStream.__init__": "java.io.ByteArrayOutputStream.__init__",
          "ByteArrayOutputStream.toByteArray": "java.io.ByteArrayOutputStream.toByteArray"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.java2s.com/Code/Java/File-Input-Output/ReadingtheContentsofaZIPFile.htm",
    "url position": 6,
    "segments": [
      {
        "code": "         \nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\npublic class ReadZip {\n  public static void main(String args[]) {\n    try {\n      ZipFile zf = new ZipFile(\"ReadZip.zip\");\n      Enumeration entries = zf.entries();\n\n      BufferedReader input = new BufferedReader(new InputStreamReader(\n          System.in));\n      while (entries.hasMoreElements()) {\n        ZipEntry ze = (ZipEntry) entries.nextElement();\n        System.out.println(\"Read \" + ze.getName() + \"?\");\n        String inputLine = input.readLine();\n        if (inputLine.equalsIgnoreCase(\"yes\")) {\n          long size = ze.getSize();\n          if (size > 0) {\n            System.out.println(\"Length is \" + size);\n            BufferedReader br = new BufferedReader(\n                new InputStreamReader(zf.getInputStream(ze)));\n            String line;\n            while ((line = br.readLine()) != null) {\n              System.out.println(line);\n            }\n            br.close();\n          }\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n\n\n           \n         \n    \n    \n    \n    \n    \n    \n    \n    \n  \n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "InputStreamReader.__init__": true,
          "BufferedReader.__init__": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getName": true,
          "BufferedReader.readLine": true,
          "ZipEntry.getSize": true,
          "ZipFile.getInputStream": true,
          "BufferedReader.close": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "InputStreamReader.__init__": 463,
          "BufferedReader.__init__": 450,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getName": 71,
          "BufferedReader.readLine": 429,
          "ZipEntry.getSize": 21,
          "ZipFile.getInputStream": 73,
          "BufferedReader.close": 295
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "InputStreamReader.__init__": 2683,
          "BufferedReader.__init__": 2803,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getName": 189,
          "BufferedReader.readLine": 2480,
          "ZipEntry.getSize": 46,
          "ZipFile.getInputStream": 153,
          "BufferedReader.close": 1287
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "InputStreamReader.__init__": 3903,
          "BufferedReader.__init__": 4179,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getName": 354,
          "BufferedReader.readLine": 4047,
          "ZipEntry.getSize": 83,
          "ZipFile.getInputStream": 211,
          "BufferedReader.close": 1804
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "InputStreamReader.__init__": "java.io.InputStreamReader.__init__",
          "BufferedReader.__init__": "java.io.BufferedReader.__init__",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "BufferedReader.readLine": "java.io.BufferedReader.readLine",
          "ZipEntry.getSize": "java.util.zip.ZipEntry.getSize",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "BufferedReader.close": "java.io.BufferedReader.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://stackoverflow.com/questions/23869228/how-to-read-file-from-zip-using-inputstream",
    "url position": 5,
    "segments": [
      {
        "code": " zipStream = new ZipInputStream(channelSftp.get(\"Port_Increment_201405261400_2251.zip\"));\n zipStream.getNextEntry();\n\n sc = new Scanner(zipStream);\n while (sc.hasNextLine()) {\n     System.out.println(sc.nextLine());\n }\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": true,
        "answer_votes": "14",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipInputStream.__init__": true,
          "Scanner.__init__": true
        },
        "APIsProjects": {
          "ZipInputStream.__init__": 80,
          "Scanner.__init__": 123
        },
        "APIsFiles": {
          "ZipInputStream.__init__": 172,
          "Scanner.__init__": 290
        },
        "APIsSnippets": {
          "ZipInputStream.__init__": 206,
          "Scanner.__init__": 918
        },
        "APIsQualifiedNames": {
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "Scanner.__init__": "java.util.Scanner.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "// Expands the zip file passed as argument 1, into the\n// directory provided in argument 2\npublic static void main(String args[]) throws Exception\n{\n    if(args.length != 2)\n    {\n        System.err.println(\"zipreader zipfile outputdir\");\n        return;\n    }\n\n    // create a buffer to improve copy performance later.\n    byte[] buffer = new byte[2048];\n\n    // open the zip file stream\n    InputStream theFile = new FileInputStream(args[0]);\n    ZipInputStream stream = new ZipInputStream(theFile);\n    String outdir = args[1];\n\n    try\n    {\n\n        // now iterate through each item in the stream. The get next\n        // entry call will return a ZipEntry for each file in the\n        // stream\n        ZipEntry entry;\n        while((entry = stream.getNextEntry())!=null)\n        {\n            String s = String.format(\"Entry: %s len %d added %TD\",\n                            entry.getName(), entry.getSize(),\n                            new Date(entry.getTime()));\n            System.out.println(s);\n\n            // Once we get the entry from the stream, the stream is\n            // positioned read to read the raw data, and we keep\n            // reading until read returns 0 or less.\n            String outpath = outdir + \"/\" + entry.getName();\n            FileOutputStream output = null;\n            try\n            {\n                output = new FileOutputStream(outpath);\n                int len = 0;\n                while ((len = stream.read(buffer)) > 0)\n                {\n                    output.write(buffer, 0, len);\n                }\n            }\n            finally\n            {\n                // we must always close the output file\n                if(output!=null) output.close();\n            }\n        }\n    }\n    finally\n    {\n        // we must always close the zip file.\n        stream.close();\n    }\n}\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": "11",
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "InputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "InputStream.__init__": 350,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "InputStream.__init__": 1711,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "InputStream.__init__": 2609,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "InputStream.__init__": "java.io.InputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://javarevisited.blogspot.gr/2014/06/2-examples-to-read-zip-files-in-java-zipFile-vs-zipInputStream.html",
    "url position": 11,
    "segments": [
      {
        "code": "import java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\nimport java.util.zip.ZipInputStream;\n\n/**\n * Java program to iterate and read file entries from Zip archive.\n * This program demonstrate two ways to retrieve files from Zip using ZipFile and by using ZipInputStream class.\n * @author Javin\n */\n\npublic class ZipFileReader {\n\n    // This Zip file contains 11 PNG images\n    private static final String FILE_NAME = \"C:\\\\temp\\\\pics.zip\";\n    private static final String OUTPUT_DIR = \"C:\\\\temp\\\\Images\\\\\";\n    private static final int BUFFER_SIZE = 8192;\n\n    public static void main(String args[]) throws IOException {\n\n        // Prefer ZipFile over ZipInputStream\n        readUsingZipFile();\n    //  readUsingZipInputStream();\n\n    }\n\n    /*\n     * Example of reading Zip archive using ZipFile class\n     */\n\n    private static void readUsingZipFile() throws IOException {\n        final ZipFile file = new ZipFile(FILE_NAME);\n        System.out.println(\"Iterating over zip file : \" + FILE_NAME);\n\n        try {\n            final Enumeration<? extends ZipEntry> entries = file.entries();\n            while (entries.hasMoreElements()) {\n                final ZipEntry entry = entries.nextElement();\n                System.out.printf(\"File: %s Size %d  Modified on %TD %n\", entry.getName(), entry.getSize(), new Date(entry.getTime()));\n                extractEntry(entry, file.getInputStream(entry));\n            }\n            System.out.printf(\"Zip file %s extracted successfully in %s\", FILE_NAME, OUTPUT_DIR);\n        } finally {\n            file.close();\n        }\n\n    }\n\n    /*\n     * Example of reading Zip file using ZipInputStream in Java.\n     */\n\n    private static void readUsingZipInputStream() throws IOException {\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(FILE_NAME));\n        final ZipInputStream is = new ZipInputStream(bis);\n\n        try {\n            ZipEntry entry;\n            while ((entry = is.getNextEntry()) != null) {\n                System.out.printf(\"File: %s Size %d  Modified on %TD %n\", entry.getName(), entry.getSize(), new Date(entry.getTime()));\n                extractEntry(entry, is);\n            }\n        } finally {\n            is.close();\n        }\n\n    }\n\n    /*\n     * Utility method to read  data from InputStream\n     */\n\n    private static void extractEntry(final ZipEntry entry, InputStream is) throws IOException {\n        String exractedFile = OUTPUT_DIR + entry.getName();\n        FileOutputStream fos = null;\n\n        try {\n            fos = new FileOutputStream(exractedFile);\n            final byte[] buf = new byte[BUFFER_SIZE];\n            int read = 0;\n            int length;\n\n            while ((length = is.read(buf, 0, buf.length)) >= 0) {\n                fos.write(buf, 0, length);\n            }\n\n        } catch (IOException ioex) {\n            fos.close();\n        }\n\n    }\n\n}\n\nOutput:\nIterating over zip file : C:\\temp\\pics.zip\nFile: Image  (11).png Size 21294  Modified on 10/24/13\nFile: Image  (1).png Size 22296  Modified on 11/19/13\nFile: Image  (2).png Size 10458  Modified on 10/24/13\nFile: Image  (3).png Size 18425  Modified on 11/19/13\nFile: Image  (4).png Size 31888  Modified on 11/19/13\nFile: Image  (5).png Size 27454  Modified on 11/19/13\nFile: Image  (6).png Size 67608  Modified on 11/19/13\nFile: Image  (7).png Size 8659  Modified on 11/19/13\nFile: Image  (8).png Size 40015  Modified on 11/19/13\nFile: Image  (9).png Size 17062  Modified on 10/24/13\nFile: Image  (10).png Size 42467  Modified on 10/24/13\nZip file C:\\temp\\pics.zip extracted successfully in C:\\temp\\Images\\",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "IOException": true,
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getTime": true,
          "Date.__init__": true,
          "ZipEntry.getSize": true,
          "ZipEntry.getName": true,
          "ZipFile.getInputStream": true,
          "IOException.entry": true,
          "ZipFile.close": true,
          "FileInputStream.__init__": true,
          "BufferedInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true,
          "FileOutputStream.__init__": true,
          "InputStream.read": true,
          "FileOutputStream.close": true
        },
        "APIsProjects": {
          "IOException": 444,
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getTime": 15,
          "Date.__init__": 441,
          "ZipEntry.getSize": 21,
          "ZipEntry.getName": 71,
          "ZipFile.getInputStream": 73,
          "IOException.entry": 18,
          "ZipFile.close": 69,
          "FileInputStream.__init__": 443,
          "BufferedInputStream.__init__": 224,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53,
          "FileOutputStream.__init__": 430,
          "InputStream.read": 397,
          "FileOutputStream.close": 267
        },
        "APIsFiles": {
          "IOException": 6092,
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getTime": 24,
          "Date.__init__": 5276,
          "ZipEntry.getSize": 46,
          "ZipEntry.getName": 189,
          "ZipFile.getInputStream": 153,
          "IOException.entry": 29,
          "ZipFile.close": 153,
          "FileInputStream.__init__": 2808,
          "BufferedInputStream.__init__": 793,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86,
          "FileOutputStream.__init__": 2603,
          "InputStream.read": 1923,
          "FileOutputStream.close": 1003
        },
        "APIsSnippets": {
          "IOException": 57973,
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getTime": 38,
          "Date.__init__": 13241,
          "ZipEntry.getSize": 83,
          "ZipEntry.getName": 354,
          "ZipFile.getInputStream": 211,
          "IOException.entry": 48,
          "ZipFile.close": 215,
          "FileInputStream.__init__": 4023,
          "BufferedInputStream.__init__": 1031,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99,
          "FileOutputStream.__init__": 3767,
          "InputStream.read": 4134,
          "FileOutputStream.close": 1322
        },
        "APIsQualifiedNames": {
          "IOException": "java.io.IOException.IOException",
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getTime": "java.util.zip.ZipEntry.getTime",
          "Date.__init__": "java.util.Date.__init__",
          "ZipEntry.getSize": "java.util.zip.ZipEntry.getSize",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "IOException.entry": "java.io.IOException.entry",
          "ZipFile.close": "java.util.zip.ZipFile.close",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "FileOutputStream.close": "java.io.FileOutputStream.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.baeldung.com/java-compress-and-uncompress",
    "url position": 15,
    "segments": [
      {
        "code": "public class ZipFile {\r\n    public static void main(String[] args) throws IOException {\r\n        String sourceFile = \"test1.txt\";\r\n        FileOutputStream fos = new FileOutputStream(\"compressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        File fileToZip = new File(sourceFile);\r\n        FileInputStream fis = new FileInputStream(fileToZip);\r\n        ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\r\n        zipOut.putNextEntry(zipEntry);\r\n        final byte[] bytes = new byte[1024];\r\n        int length;\r\n        while((length = fis.read(bytes)) >= 0) {\r\n            zipOut.write(bytes, 0, length);\r\n        }\r\n        zipOut.close();\r\n        fis.close();\r\n        fos.close();\r\n    }\r\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "ZipOutputStream.__init__": true,
          "File.__init__": true,
          "FileInputStream.__init__": true,
          "File.getName": true,
          "ZipEntry.__init__": true,
          "ZipOutputStream.putNextEntry": true,
          "FileInputStream.read": true,
          "ZipOutputStream.close": true,
          "FileInputStream.close": true,
          "FileOutputStream.close": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "ZipOutputStream.__init__": 74,
          "File.__init__": 591,
          "FileInputStream.__init__": 443,
          "File.getName": 300,
          "ZipEntry.__init__": 81,
          "ZipOutputStream.putNextEntry": 74,
          "FileInputStream.read": 123,
          "ZipOutputStream.close": 69,
          "FileInputStream.close": 218,
          "FileOutputStream.close": 267
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "ZipOutputStream.__init__": 166,
          "File.__init__": 13065,
          "FileInputStream.__init__": 2808,
          "File.getName": 1846,
          "ZipEntry.__init__": 190,
          "ZipOutputStream.putNextEntry": 153,
          "FileInputStream.read": 263,
          "ZipOutputStream.close": 134,
          "FileInputStream.close": 664,
          "FileOutputStream.close": 1003
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "ZipOutputStream.__init__": 224,
          "File.__init__": 40468,
          "FileInputStream.__init__": 4023,
          "File.getName": 3551,
          "ZipEntry.__init__": 378,
          "ZipOutputStream.putNextEntry": 305,
          "FileInputStream.read": 358,
          "ZipOutputStream.close": 179,
          "FileInputStream.close": 861,
          "FileOutputStream.close": 1322
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__",
          "File.__init__": "java.io.File.__init__",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "File.getName": "java.io.File.getName",
          "ZipEntry.__init__": "java.util.zip.ZipEntry.__init__",
          "ZipOutputStream.putNextEntry": "java.util.zip.ZipOutputStream.putNextEntry",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "ZipOutputStream.close": "java.util.zip.ZipOutputStream.close",
          "FileInputStream.close": "java.io.FileInputStream.close",
          "FileOutputStream.close": "java.io.FileOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public class ZipMultipleFiles {\r\n    public static void main(String[] args) throws IOException {\r\n        List<String> srcFiles = Arrays.asList(\"test1.txt\", \"test2.txt\");\r\n        FileOutputStream fos = new FileOutputStream(\"multiCompressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        for (String srcFile : srcFiles) {\r\n            File fileToZip = new File(srcFile);\r\n            FileInputStream fis = new FileInputStream(fileToZip);\r\n            ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\r\n            zipOut.putNextEntry(zipEntry);\r\n\r\n            byte[] bytes = new byte[1024];\r\n            int length;\r\n            while((length = fis.read(bytes)) >= 0) {\r\n                zipOut.write(bytes, 0, length);\r\n            }\r\n            fis.close();\r\n        }\r\n        zipOut.close();\r\n        fos.close();\r\n    }\r\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "ZipOutputStream.__init__": true,
          "File.__init__": true,
          "FileInputStream.__init__": true,
          "File.getName": true,
          "ZipEntry.__init__": true,
          "ZipOutputStream.putNextEntry": true,
          "FileInputStream.read": true,
          "FileInputStream.close": true,
          "ZipOutputStream.close": true,
          "FileOutputStream.close": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "ZipOutputStream.__init__": 74,
          "File.__init__": 591,
          "FileInputStream.__init__": 443,
          "File.getName": 300,
          "ZipEntry.__init__": 81,
          "ZipOutputStream.putNextEntry": 74,
          "FileInputStream.read": 123,
          "FileInputStream.close": 218,
          "ZipOutputStream.close": 69,
          "FileOutputStream.close": 267
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "ZipOutputStream.__init__": 166,
          "File.__init__": 13065,
          "FileInputStream.__init__": 2808,
          "File.getName": 1846,
          "ZipEntry.__init__": 190,
          "ZipOutputStream.putNextEntry": 153,
          "FileInputStream.read": 263,
          "FileInputStream.close": 664,
          "ZipOutputStream.close": 134,
          "FileOutputStream.close": 1003
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "ZipOutputStream.__init__": 224,
          "File.__init__": 40468,
          "FileInputStream.__init__": 4023,
          "File.getName": 3551,
          "ZipEntry.__init__": 378,
          "ZipOutputStream.putNextEntry": 305,
          "FileInputStream.read": 358,
          "FileInputStream.close": 861,
          "ZipOutputStream.close": 179,
          "FileOutputStream.close": 1322
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__",
          "File.__init__": "java.io.File.__init__",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "File.getName": "java.io.File.getName",
          "ZipEntry.__init__": "java.util.zip.ZipEntry.__init__",
          "ZipOutputStream.putNextEntry": "java.util.zip.ZipOutputStream.putNextEntry",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "FileInputStream.close": "java.io.FileInputStream.close",
          "ZipOutputStream.close": "java.util.zip.ZipOutputStream.close",
          "FileOutputStream.close": "java.io.FileOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public class ZipDirectory {\r\n    public static void main(String[] args) throws IOException {\r\n        String sourceFile = \"zipTest\";\r\n        FileOutputStream fos = new FileOutputStream(\"dirCompressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        File fileToZip = new File(sourceFile);\r\n\r\n        zipFile(fileToZip, fileToZip.getName(), zipOut);\r\n        zipOut.close();\r\n        fos.close();\r\n    }\r\n\r\n    private static void zipFile(File fileToZip, String fileName, ZipOutputStream zipOut) throws IOException {\r\n        if (fileToZip.isHidden()) {\r\n            return;\r\n        }\r\n        if (fileToZip.isDirectory()) {\r\n            File[] children = fileToZip.listFiles();\r\n            for (File childFile : children) {\r\n                zipFile(childFile, fileName + \"/\" + childFile.getName(), zipOut);\r\n            }\r\n            return;\r\n        }\r\n        FileInputStream fis = new FileInputStream(fileToZip);\r\n        ZipEntry zipEntry = new ZipEntry(fileName);\r\n        zipOut.putNextEntry(zipEntry);\r\n        byte[] bytes = new byte[1024];\r\n        int length;\r\n        while ((length = fis.read(bytes)) >= 0) {\r\n            zipOut.write(bytes, 0, length);\r\n        }\r\n        fis.close();\r\n    }\r\n}",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "ZipOutputStream.__init__": true,
          "File.__init__": true,
          "File.getName": true,
          "IOException.fileToZip": false,
          "ZipOutputStream.close": true,
          "FileOutputStream.close": true,
          "File.isHidden": true,
          "File.isDirectory": true,
          "IOException.childFile": false,
          "FileInputStream.__init__": true,
          "ZipEntry.__init__": true,
          "ZipOutputStream.putNextEntry": true,
          "FileInputStream.read": true,
          "FileInputStream.close": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "ZipOutputStream.__init__": 74,
          "File.__init__": 591,
          "File.getName": 300,
          "ZipOutputStream.close": 69,
          "FileOutputStream.close": 267,
          "File.isHidden": 28,
          "File.isDirectory": 323,
          "FileInputStream.__init__": 443,
          "ZipEntry.__init__": 81,
          "ZipOutputStream.putNextEntry": 74,
          "FileInputStream.read": 123,
          "FileInputStream.close": 218
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "ZipOutputStream.__init__": 166,
          "File.__init__": 13065,
          "File.getName": 1846,
          "ZipOutputStream.close": 134,
          "FileOutputStream.close": 1003,
          "File.isHidden": 33,
          "File.isDirectory": 1819,
          "FileInputStream.__init__": 2808,
          "ZipEntry.__init__": 190,
          "ZipOutputStream.putNextEntry": 153,
          "FileInputStream.read": 263,
          "FileInputStream.close": 664
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "ZipOutputStream.__init__": 224,
          "File.__init__": 40468,
          "File.getName": 3551,
          "ZipOutputStream.close": 179,
          "FileOutputStream.close": 1322,
          "File.isHidden": 38,
          "File.isDirectory": 2669,
          "FileInputStream.__init__": 4023,
          "ZipEntry.__init__": 378,
          "ZipOutputStream.putNextEntry": 305,
          "FileInputStream.read": 358,
          "FileInputStream.close": 861
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__",
          "File.__init__": "java.io.File.__init__",
          "File.getName": "java.io.File.getName",
          "ZipOutputStream.close": "java.util.zip.ZipOutputStream.close",
          "FileOutputStream.close": "java.io.FileOutputStream.close",
          "File.isHidden": "java.io.File.isHidden",
          "File.isDirectory": "java.io.File.isDirectory",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipEntry.__init__": "java.util.zip.ZipEntry.__init__",
          "ZipOutputStream.putNextEntry": "java.util.zip.ZipOutputStream.putNextEntry",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "FileInputStream.close": "java.io.FileInputStream.close"
        },
        "API_Ratio": 0.8666666666666667
      },
      {
        "code": "public class UnzipFile {\r\n    public static void main(String[] args) throws IOException {\r\n        String fileZip = \"compressed.zip\";\r\n        byte[] buffer = new byte[1024];\r\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(fileZip));\r\n        ZipEntry zipEntry = zis.getNextEntry();\r\n        while(zipEntry != null){\r\n            String fileName = zipEntry.getName();\r\n            File newFile = new File(\"unzipTest/\" + fileName);\r\n            FileOutputStream fos = new FileOutputStream(newFile);\r\n            int len;\r\n            while ((len = zis.read(buffer)) > 0) {\r\n                fos.write(buffer, 0, len);\r\n            }\r\n            fos.close();\r\n            zipEntry = zis.getNextEntry();\r\n        }\r\n        zis.closeEntry();\r\n        zis.close();\r\n    }\r\n}",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.closeEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.closeEntry": 9,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.closeEntry": 12,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.closeEntry": 17,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.closeEntry": "java.util.zip.ZipInputStream.closeEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.java2novice.com/java-collections-and-util/zip/file-list/",
    "url position": 20,
    "segments": [
      {
        "code": "package com.java2novice.zip;\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class MyZipFileList {\n\npublic void printFileList(String filePath){\n\t\t\n\t\tFileInputStream fis = null;\n\t\tZipInputStream zipIs = null;\n\t\tZipEntry zEntry = null;\n\t\ttry {\n\t\t\tfis = new FileInputStream(filePath);\n\t\t\tzipIs = new ZipInputStream(new BufferedInputStream(fis));\n\t\t\twhile((zEntry = zipIs.getNextEntry()) != null){\n\t\t\t\tSystem.out.println(zEntry.getName());\n\t\t\t}\n\t\t\tzipIs.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String a[]){\n\t\t\n\t\tMyZipFileList mfe = new MyZipFileList();\n\t\tmfe.printFileList(\"C:/Archive.zip\");\n\t}\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "BufferedInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true,
          "MyZipFileList.__init__": false,
          "MyZipFileList.printFileList": false
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "BufferedInputStream.__init__": 224,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "BufferedInputStream.__init__": 793,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "BufferedInputStream.__init__": 1031,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 0.7142857142857143
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://blog.codeleak.pl/2014/06/listing-zip-file-content-java-8.html",
    "url position": 21,
    "segments": [
      {
        "code": "public class Zipper {\n    public void printEntries(PrintStream stream, String zip)  {\n        ZipFile zipFile = null;\n        try {\n            zipFile = new ZipFile(zip);\n            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry zipEntry = entries.nextElement();\n                stream.println(zipEntry.getName());\n            }\n        } catch (IOException e) {\n            // error while opening a ZIP file\n        } finally {\n            if (zipFile != null) {\n                try {\n                    zipFile.close();\n                } catch (IOException e) {\n                    // do something\n                }\n            }\n        }\n    }\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getName": true,
          "PrintStream.println": true,
          "ZipFile.close": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getName": 71,
          "PrintStream.println": 160,
          "ZipFile.close": 69
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getName": 189,
          "PrintStream.println": 685,
          "ZipFile.close": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getName": 354,
          "PrintStream.println": 4064,
          "ZipFile.close": 215
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "PrintStream.println": "java.io.PrintStream.println",
          "ZipFile.close": "java.util.zip.ZipFile.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public class Zipper {\n    public void printEntries(PrintStream stream, String zip) {\n        try (ZipFile zipFile = new ZipFile(zip)) {\n            Enumeration<? extends ZipEntry> entries = zipFile.entries();\n            while (entries.hasMoreElements()) {\n                ZipEntry zipEntry = entries.nextElement();\n                stream.println(zipEntry.getName());\n            }\n        } catch (IOException e) {\n            // error while opening a ZIP file\n        }\n    }\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getName": true,
          "PrintStream.println": true
        },
        "APIsProjects": {
          "AM.__init__": 62,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getName": 71,
          "PrintStream.println": 160
        },
        "APIsFiles": {
          "AM.__init__": 555,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getName": 189,
          "PrintStream.println": 685
        },
        "APIsSnippets": {
          "AM.__init__": 987,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getName": 354,
          "PrintStream.println": 4064
        },
        "APIsQualifiedNames": {
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "PrintStream.println": "java.io.PrintStream.println"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "public class Zipper {\n    public void printEntries(PrintStream stream, String zip) {\n        try (ZipFile zipFile = new ZipFile(zip)) {\n            zipFile.stream()\n                    .forEach(stream::println);\n        } catch (IOException e) {\n            // error while opening a ZIP file\n        }\n    }\n}",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true
        },
        "APIsProjects": {
          "AM.__init__": 62
        },
        "APIsFiles": {
          "AM.__init__": 555
        },
        "APIsSnippets": {
          "AM.__init__": 987
        },
        "APIsQualifiedNames": {},
        "API_Ratio": 1.0
      },
      {
        "code": "public void printEntries(PrintStream stream, String zip) {\n    try (ZipFile zipFile = new ZipFile(zip)) {\n        Predicate<ZipEntry> isFile = ze -> !ze.isDirectory();\n        Predicate<ZipEntry> isJava = ze -> ze.getName().matches(\".*java\");\n        Comparator<ZipEntry> bySize = \n                (ze1, ze2) -> Long.valueOf(ze2.getSize() - ze1.getSize()).intValue();\n        zipFile.stream()\n                .filter(isFile.and(isJava))\n                .sorted(bySize)\n                .forEach(ze -> print(stream, ze));\n    } catch (IOException e) {\n        // error while opening a ZIP file\n    }\n}\n\nprivate void print(PrintStream stream, ZipEntry zipEntry) {\n    stream.println(zipEntry.getName() + \", size = \" + zipEntry.getSize());\n}",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true,
          "Predicate.and": false,
          "ZipEntry.getSize": true,
          "ZipEntry.getName": true,
          "PrintStream.println": true
        },
        "APIsProjects": {
          "AM.__init__": 62,
          "ZipEntry.getSize": 21,
          "ZipEntry.getName": 71,
          "PrintStream.println": 160
        },
        "APIsFiles": {
          "AM.__init__": 555,
          "ZipEntry.getSize": 46,
          "ZipEntry.getName": 189,
          "PrintStream.println": 685
        },
        "APIsSnippets": {
          "AM.__init__": 987,
          "ZipEntry.getSize": 83,
          "ZipEntry.getName": 354,
          "PrintStream.println": 4064
        },
        "APIsQualifiedNames": {
          "ZipEntry.getSize": "java.util.zip.ZipEntry.getSize",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "PrintStream.println": "java.io.PrintStream.println"
        },
        "API_Ratio": 0.8
      },
      {
        "code": "public void printEntries(PrintStream stream, String zip) {\n    try (ZipFile zipFile = new ZipFile(zip)) {\n        Predicate<ZipEntry> isFile = ze -> !ze.isDirectory();\n        Predicate<ZipEntry> isJava = ze -> ze.getName().matches(\".*java\");\n        Comparator<ZipEntry> bySize =\n            (ze1, ze2) -> Long.valueOf(ze2.getSize()).compareTo(Long.valueOf(ze1.getSize()));\n\n        Map<String, List<ZipEntry>> result = zipFile.stream()\n                .filter(isFile.and(isJava))\n                .sorted(bySize)\n                .collect(groupingBy(this::fileIndex));\n\n        result.entrySet().stream().forEach(stream::println);\n\n    } catch (IOException e) {\n        // error while opening a ZIP file\n    }\n}\n\nprivate String fileIndex(ZipEntry zipEntry) {\n    Path path = Paths.get(zipEntry.getName());\n    Path fileName = path.getFileName();\n    return fileName.toString().substring(0, 1).toLowerCase();\n}",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true,
          "Predicate.and": false,
          "Map.entrySet": true,
          "PrintStream": true,
          "ZipEntry.getName": true,
          "Path.toString": true
        },
        "APIsProjects": {
          "AM.__init__": 62,
          "Map.entrySet": 260,
          "PrintStream": 19,
          "ZipEntry.getName": 71,
          "Path.toString": 73
        },
        "APIsFiles": {
          "AM.__init__": 555,
          "Map.entrySet": 1243,
          "PrintStream": 30,
          "ZipEntry.getName": 189,
          "Path.toString": 1084
        },
        "APIsSnippets": {
          "AM.__init__": 987,
          "Map.entrySet": 1707,
          "PrintStream": 198,
          "ZipEntry.getName": 354,
          "Path.toString": 2938
        },
        "APIsQualifiedNames": {
          "Map.entrySet": "java.util.Map.entrySet",
          "PrintStream": "java.io.PrintStream.PrintStream",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "Path.toString": "java.nio.file.Path.toString"
        },
        "API_Ratio": 0.8333333333333334
      },
      {
        "code": "public void printEntries(PrintStream stream, String zip) {\n\n    try (ZipFile zipFile = new ZipFile(zip)) {\n        Predicate<ZipEntry> isFile = ze -> !ze.isDirectory();\n        Predicate<ZipEntry> isJava = ze -> ze.getName().matches(\".*java\");\n\n        List<ZipEntry> result = zipFile.stream()\n                .filter(isFile.and(isJava))\n                .filter(ze -> containsText(zipFile, ze, \"@Test\"))\n                .collect(Collectors.toList());\n\n        result.forEach(stream::println);\n\n\n    } catch (IOException e) {\n        // error while opening a ZIP file\n    }\n}\n\nprivate boolean containsText(ZipFile zipFile, ZipEntry zipEntry, String needle) {\n    try (InputStream inputStream = zipFile.getInputStream(zipEntry);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n\n        Optional<String> found = reader.lines()\n                .filter(l -> l.contains(needle))\n                .findFirst();\n\n        return found.isPresent();\n\n    } catch (IOException e) {\n        return false;\n    }\n}",
        "in_page_order": 7,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true,
          "Predicate.and": false,
          "List.forEach": false,
          "ZipFile.getInputStream": true,
          "Optional.isPresent": true
        },
        "APIsProjects": {
          "AM.__init__": 62,
          "ZipFile.getInputStream": 73,
          "Optional.isPresent": 37
        },
        "APIsFiles": {
          "AM.__init__": 555,
          "ZipFile.getInputStream": 153,
          "Optional.isPresent": 573
        },
        "APIsSnippets": {
          "AM.__init__": 987,
          "ZipFile.getInputStream": 211,
          "Optional.isPresent": 1511
        },
        "APIsQualifiedNames": {
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "Optional.isPresent": "com.google.common.base.Optional.isPresent"
        },
        "API_Ratio": 0.6
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://www.javamex.com/tutorials/compression/zip.shtml",
    "url position": 19,
    "segments": [
      {
        "code": "\r\nZipFile zf = new ZipFile(file);\r\ntry {\r\n  InputStream in = zf.getInputStream(\"file.txt\");\r\n  // ... read from 'in' as normal\r\n} finally {\r\n  zf.close();\r\n}\r\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.getInputStream": true,
          "ZipFile.close": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.getInputStream": 73,
          "ZipFile.close": 69
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.getInputStream": 153,
          "ZipFile.close": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.getInputStream": 211,
          "ZipFile.close": 215
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "ZipFile.close": "java.util.zip.ZipFile.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.codejava.net/java-se/file-io/how-to-read-contents-of-a-zip-file-in-java",
    "url position": 10,
    "segments": [
      {
        "code": "ZipFile zipFile = new ZipFile(zipFilePath);\nEnumeration<? extends ZipEntry> entries = zipFile.entries();",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.io.*;\nimport java.util.*;\nimport java.util.zip.*;\n\n/**\n * This program reads contents of a ZIP file.\n *\n * @author www.codejava.net\n */\npublic class ReadZipFile {\n\n\tprivate static void read(String zipFilePath) {\n\t\ttry {\n\t\t\tZipFile zipFile = new ZipFile(zipFilePath);\n\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tZipEntry entry = entries.nextElement();\n\t\t\t\tString name = entry.getName();\n\t\t\t\tlong compressedSize = entry.getCompressedSize();\n\t\t\t\tlong normalSize = entry.getSize();\n\t\t\t\tString type = entry.isDirectory() ? \"DIR\" : \"FILE\";\n\n\t\t\t\tSystem.out.println(name);\n\t\t\t\tSystem.out.format(\"\\t %s - %d - %d\\n\", type, compressedSize, normalSize);\n\t\t\t}\n\n\t\t\tzipFile.close();\n\t\t} catch (IOException ex) {\n\t\t\tSystem.err.println(ex);\n\t\t}\n\t}\n\n\n\tpublic static void main(String[] args) {\n\t\tString zipFilePath = args[0];\n\t\tread(zipFilePath);\n\t}\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.getName": true,
          "ZipEntry.getCompressedSize": true,
          "ZipEntry.getSize": true,
          "ZipEntry.isDirectory": true,
          "ZipFile.close": true
        },
        "APIsProjects": {
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.getName": 71,
          "ZipEntry.getCompressedSize": 7,
          "ZipEntry.getSize": 21,
          "ZipEntry.isDirectory": 41,
          "ZipFile.close": 69
        },
        "APIsFiles": {
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.getName": 189,
          "ZipEntry.getCompressedSize": 12,
          "ZipEntry.getSize": 46,
          "ZipEntry.isDirectory": 72,
          "ZipFile.close": 153
        },
        "APIsSnippets": {
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.getName": 354,
          "ZipEntry.getCompressedSize": 37,
          "ZipEntry.getSize": 83,
          "ZipEntry.isDirectory": 89,
          "ZipFile.close": 215
        },
        "APIsQualifiedNames": {
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "ZipEntry.getCompressedSize": "java.util.zip.ZipEntry.getCompressedSize",
          "ZipEntry.getSize": "java.util.zip.ZipEntry.getSize",
          "ZipEntry.isDirectory": "java.util.zip.ZipEntry.isDirectory",
          "ZipFile.close": "java.util.zip.ZipFile.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://commons.apache.org/proper/commons-compress/examples.html",
    "url position": 27,
    "segments": [
      {
        "code": "\nCompressorOutputStream gzippedOut = new CompressorStreamFactory()\n    .createCompressorOutputStream(CompressorStreamFactory.GZIP, myOutputStream);\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "CompressorStreamFactory.__init__": true
        },
        "APIsProjects": {
          "CompressorStreamFactory.__init__": 3
        },
        "APIsFiles": {
          "CompressorStreamFactory.__init__": 5
        },
        "APIsSnippets": {
          "CompressorStreamFactory.__init__": 7
        },
        "APIsQualifiedNames": {
          "CompressorStreamFactory.__init__": "org.apache.commons.compress.compressors.CompressorStreamFactory.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nArchiveInputStream input = new ArchiveStreamFactory()\n    .createArchiveInputStream(originalInput);\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ArchiveStreamFactory.__init__": true
        },
        "APIsProjects": {
          "ArchiveStreamFactory.__init__": 3
        },
        "APIsFiles": {
          "ArchiveStreamFactory.__init__": 4
        },
        "APIsSnippets": {
          "ArchiveStreamFactory.__init__": 4
        },
        "APIsQualifiedNames": {
          "ArchiveStreamFactory.__init__": "org.apache.commons.compress.archivers.ArchiveStreamFactory.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nCompressorInputStream input = new CompressorStreamFactory()\n    .createCompressorInputStream(originalInput);\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "CompressorStreamFactory.__init__": true
        },
        "APIsProjects": {
          "CompressorStreamFactory.__init__": 3
        },
        "APIsFiles": {
          "CompressorStreamFactory.__init__": 5
        },
        "APIsSnippets": {
          "CompressorStreamFactory.__init__": 7
        },
        "APIsQualifiedNames": {
          "CompressorStreamFactory.__init__": "org.apache.commons.compress.compressors.CompressorStreamFactory.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nArArchiveEntry entry = new ArArchiveEntry(name, size);\narOutput.putArchiveEntry(entry);\narOutput.write(contentOfEntry);\narOutput.closeArchiveEntry();\n",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ArArchiveEntry.__init__": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      },
      {
        "code": "\nCpioArchiveEntry entry = new CpioArchiveEntry(name, size);\ncpioOutput.putArchiveEntry(entry);\ncpioOutput.write(contentOfEntry);\ncpioOutput.closeArchiveEntry();\n",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "CpioArchiveEntry.__init__": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      },
      {
        "code": "\nTarArchiveEntry entry = new TarArchiveEntry(name);\nentry.setSize(size);\ntarOutput.putArchiveEntry(entry);\ntarOutput.write(contentOfEntry);\ntarOutput.closeArchiveEntry();\n",
        "in_page_order": 9,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "TarArchiveEntry.__init__": true,
          "TarArchiveEntry.setSize": true
        },
        "APIsProjects": {
          "TarArchiveEntry.__init__": 9,
          "TarArchiveEntry.setSize": 6
        },
        "APIsFiles": {
          "TarArchiveEntry.__init__": 18,
          "TarArchiveEntry.setSize": 13
        },
        "APIsSnippets": {
          "TarArchiveEntry.__init__": 37,
          "TarArchiveEntry.setSize": 18
        },
        "APIsQualifiedNames": {
          "TarArchiveEntry.__init__": "org.apache.commons.compress.archivers.tar.TarArchiveEntry.__init__",
          "TarArchiveEntry.setSize": "org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nZipArchiveEntry entry = new ZipArchiveEntry(name);\nentry.setSize(size);\nzipOutput.putArchiveEntry(entry);\nzipOutput.write(contentOfEntry);\nzipOutput.closeArchiveEntry();\n",
        "in_page_order": 11,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipArchiveEntry.__init__": true,
          "ZipArchiveEntry.setSize": true
        },
        "APIsProjects": {
          "ZipArchiveEntry.__init__": 6,
          "ZipArchiveEntry.setSize": 3
        },
        "APIsFiles": {
          "ZipArchiveEntry.__init__": 7,
          "ZipArchiveEntry.setSize": 4
        },
        "APIsSnippets": {
          "ZipArchiveEntry.__init__": 19,
          "ZipArchiveEntry.setSize": 6
        },
        "APIsQualifiedNames": {
          "ZipArchiveEntry.__init__": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.__init__",
          "ZipArchiveEntry.setSize": "org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\npublic class ScatterSample {\n\n  ParallelScatterZipCreator scatterZipCreator = new ParallelScatterZipCreator();\n  ScatterZipOutputStream dirs = ScatterZipOutputStream.fileBased(File.createTempFile(\"scatter-dirs\", \"tmp\"));\n\n  public ScatterSample() throws IOException {\n  }\n\n  public void addEntry(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier streamSupplier) throws IOException {\n     if (zipArchiveEntry.isDirectory() && !zipArchiveEntry.isUnixSymlink())\n        dirs.addArchiveEntry(ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry, streamSupplier));\n     else\n        scatterZipCreator.addArchiveEntry( zipArchiveEntry, streamSupplier);\n  }\n\n  public void writeTo(ZipArchiveOutputStream zipArchiveOutputStream)\n  throws IOException, ExecutionException, InterruptedException {\n     dirs.writeTo(zipArchiveOutputStream);\n     dirs.close();\n     scatterZipCreator.writeTo(zipArchiveOutputStream);\n  }\n}\n",
        "in_page_order": 15,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipArchiveEntry.isUnixSymlink": false,
          "ScatterZipOutputStream.addArchiveEntry": false,
          "ParallelScatterZipCreator.addArchiveEntry": false,
          "ScatterZipOutputStream.writeTo": false,
          "ScatterZipOutputStream.close": false,
          "ParallelScatterZipCreator.writeTo": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      },
      {
        "code": "\nJarArchiveEntry entry = new JarArchiveEntry(name, size);\nentry.setSize(size);\njarOutput.putArchiveEntry(entry);\njarOutput.write(contentOfEntry);\njarOutput.closeArchiveEntry();\n",
        "in_page_order": 16,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "JarArchiveEntry.__init__": false,
          "JarArchiveEntry.setSize": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      },
      {
        "code": "\nSevenZOutputFile sevenZOutput = new SevenZOutputFile(file);\nSevenZArchiveEntry entry = sevenZOutput.createArchiveEntry(fileToArchive, name);\nsevenZOutput.putArchiveEntry(entry);\nsevenZOutput.write(contentOfEntry);\nsevenZOutput.closeArchiveEntry();\n",
        "in_page_order": 18,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "SevenZOutputFile.__init__": false,
          "SevenZOutputFile.createArchiveEntry": false,
          "SevenZOutputFile.putArchiveEntry": false,
          "SevenZOutputFile.write": false,
          "SevenZOutputFile.closeArchiveEntry": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      },
      {
        "code": "\nbyte[] inputData; // 7z archive contents\nSeekableInMemoryByteChannel inMemoryByteChannel = new SeekableInMemoryByteChannel(inputData);\nSevenZFile sevenZFile = new SevenZFile(inMemoryByteChannel);\nSevenZArchiveEntry entry = sevenZFile.getNextEntry();\nsevenZFile.read();  // read current entry's data\n",
        "in_page_order": 20,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "SeekableInMemoryByteChannel.__init__": false,
          "SevenZFile.__init__": false,
          "SevenZFile.getNextEntry": false,
          "SevenZFile.read": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.br\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nBrotliCompressorInputStream brIn = new BrotliCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = brIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nbrIn.close();\n",
        "in_page_order": 22,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "BrotliCompressorInputStream.__init__": false,
          "BrotliCompressorInputStream.read": false,
          "OutputStream.close": true,
          "BrotliCompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.bz2\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nBZip2CompressorInputStream bzIn = new BZip2CompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = bzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nbzIn.close();\n",
        "in_page_order": 23,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "BZip2CompressorInputStream.__init__": true,
          "BZip2CompressorInputStream.read": true,
          "OutputStream.close": true,
          "BZip2CompressorInputStream.close": true
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "BZip2CompressorInputStream.__init__": 8,
          "BZip2CompressorInputStream.read": 4,
          "OutputStream.close": 308,
          "BZip2CompressorInputStream.close": 4
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "BZip2CompressorInputStream.__init__": 12,
          "BZip2CompressorInputStream.read": 7,
          "OutputStream.close": 1330,
          "BZip2CompressorInputStream.close": 7
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "BZip2CompressorInputStream.__init__": 16,
          "BZip2CompressorInputStream.read": 9,
          "OutputStream.close": 1855,
          "BZip2CompressorInputStream.close": 7
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "BZip2CompressorInputStream.__init__": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.__init__",
          "BZip2CompressorInputStream.read": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read",
          "OutputStream.close": "java.io.OutputStream.close",
          "BZip2CompressorInputStream.close": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.gz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nBZip2CompressorOutputStream bzOut = new BZip2CompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    bzOut.write(buffer, 0, n);\n}\nbzOut.close();\nin.close();\n",
        "in_page_order": 24,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "BZip2CompressorOutputStream.__init__": true,
          "InputStream.read": true,
          "BZip2CompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "BZip2CompressorOutputStream.__init__": 4,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "BZip2CompressorOutputStream.__init__": 5,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "BZip2CompressorOutputStream.__init__": 5,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "BZip2CompressorOutputStream.__init__": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.8
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.gz\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nGZipCompressorInputStream gzIn = new GZipCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = gzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\ngzIn.close();\n",
        "in_page_order": 25,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "GZipCompressorInputStream.__init__": false,
          "GZipCompressorInputStream.read": false,
          "OutputStream.close": true,
          "GZipCompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.gz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nGZipCompressorOutputStream gzOut = new GZipCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    gzOut.write(buffer, 0, n);\n}\ngzOut.close();\nin.close();\n",
        "in_page_order": 26,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "GZipCompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "GZipCompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.pack\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.jar\"));\nPack200CompressorInputStream pIn = new Pack200CompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = pIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\npIn.close();\n",
        "in_page_order": 27,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "Pack200CompressorInputStream.__init__": false,
          "Pack200CompressorInputStream.read": false,
          "OutputStream.close": true,
          "Pack200CompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.jar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.pack\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nPack200CompressorOutputStream pOut = new Pack200CompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    pOut.write(buffer, 0, n);\n}\npOut.close();\nin.close();\n",
        "in_page_order": 28,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "Pack200CompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "Pack200CompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.xz\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nXZCompressorInputStream xzIn = new XZCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = xzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nxzIn.close();\n",
        "in_page_order": 29,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "XZCompressorInputStream.__init__": false,
          "XZCompressorInputStream.read": false,
          "OutputStream.close": true,
          "XZCompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.xz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nXZCompressorOutputStream xzOut = new XZCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    xzOut.write(buffer, 0, n);\n}\nxzOut.close();\nin.close();\n",
        "in_page_order": 30,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "XZCompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "XZCompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.Z\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nZCompressorInputStream zIn = new ZCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = zIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nzIn.close();\n",
        "in_page_order": 31,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "ZCompressorInputStream.__init__": false,
          "ZCompressorInputStream.read": false,
          "OutputStream.close": true,
          "ZCompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.lzma\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nLZMACompressorInputStream lzmaIn = new LZMACompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = xzIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nlzmaIn.close();\n",
        "in_page_order": 32,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "LZMACompressorInputStream.__init__": false,
          "OutputStream.close": true,
          "LZMACompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.5
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.lzma\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nLZMACompressorOutputStream lzOut = new LZMACompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    lzOut.write(buffer, 0, n);\n}\nlzOut.close();\nin.close();\n",
        "in_page_order": 33,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "LZMACompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "LZMACompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"some-file\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nDeflateCompressorInputStream defIn = new DeflateCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = defIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\ndefIn.close();\n",
        "in_page_order": 34,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "DeflateCompressorInputStream.__init__": false,
          "DeflateCompressorInputStream.read": false,
          "OutputStream.close": true,
          "DeflateCompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"some-file\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nDeflateCompressorOutputStream defOut = new DeflateCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    defOut.write(buffer, 0, n);\n}\ndefOut.close();\nin.close();\n",
        "in_page_order": 35,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "DeflateCompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "DeflateCompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.sz\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nFramedSnappyCompressorInputStream zIn = new FramedSnappyCompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = zIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nzIn.close();\n",
        "in_page_order": 36,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "FramedSnappyCompressorInputStream.__init__": false,
          "FramedSnappyCompressorInputStream.read": false,
          "OutputStream.close": true,
          "FramedSnappyCompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.sz\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nFramedSnappyCompressorOutputStream snOut = new FramedSnappyCompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    snOut.write(buffer, 0, n);\n}\nsnOut.close();\nin.close();\n",
        "in_page_order": 37,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "FramedSnappyCompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "FramedSnappyCompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      },
      {
        "code": "\nInputStream fin = Files.newInputStream(Paths.get(\"archive.tar.lz4\"));\nBufferedInputStream in = new BufferedInputStream(fin);\nOutputStream out = Files.newOutputStream(Paths.get(\"archive.tar\"));\nFramedLZ4CompressorInputStream zIn = new FramedLZ4CompressorInputStream(in);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = zIn.read(buffer))) {\n    out.write(buffer, 0, n);\n}\nout.close();\nzIn.close();\n",
        "in_page_order": 38,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedInputStream.__init__": true,
          "FramedLZ4CompressorInputStream.__init__": false,
          "FramedLZ4CompressorInputStream.read": false,
          "OutputStream.close": true,
          "FramedLZ4CompressorInputStream.close": false
        },
        "APIsProjects": {
          "BufferedInputStream.__init__": 224,
          "OutputStream.close": 308
        },
        "APIsFiles": {
          "BufferedInputStream.__init__": 793,
          "OutputStream.close": 1330
        },
        "APIsSnippets": {
          "BufferedInputStream.__init__": 1031,
          "OutputStream.close": 1855
        },
        "APIsQualifiedNames": {
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "OutputStream.close": "java.io.OutputStream.close"
        },
        "API_Ratio": 0.4
      },
      {
        "code": "\nInputStream in = Files.newInputStream(Paths.get(\"archive.tar\"));\nOutputStream fout = Files.newOutputStream(Paths.get(\"archive.tar.lz4\"));\nBufferedOutputStream out = new BufferedInputStream(fout);\nFramedLZ4CompressorOutputStream lzOut = new FramedLZ4CompressorOutputStream(out);\nfinal byte[] buffer = new byte[buffersize];\nint n = 0;\nwhile (-1 != (n = in.read(buffer))) {\n    lzOut.write(buffer, 0, n);\n}\nlzOut.close();\nin.close();\n",
        "in_page_order": 39,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "BufferedOutputStream.__init__": true,
          "FramedLZ4CompressorOutputStream.__init__": false,
          "InputStream.read": true,
          "FramedLZ4CompressorOutputStream.close": false,
          "InputStream.close": true
        },
        "APIsProjects": {
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 0.6
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.speakingcs.com/2015/07/how-to-unzipextract-files-from-zip.html",
    "url position": 29,
    "segments": [
      {
        "code": "ZipEntry anEntry = null;\n\nwhile(entries.hasMoreElements()) {\n\n anEntry = entries.nextElement(); \n\n if(!anEntry.isDirectory() ) {\n\n  saveEntry(zFile,anEntry,newPath); // saves files which are not directories\n\n } else {  \n\n  newPath += File.seperator+anEntry.getName();\n\n }\n\n}\n\n",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "ZipEntry.isDirectory": true,
          "ZipEntry.getName": true
        },
        "APIsProjects": {
          "ZipEntry.isDirectory": 41,
          "ZipEntry.getName": 71
        },
        "APIsFiles": {
          "ZipEntry.isDirectory": 72,
          "ZipEntry.getName": 189
        },
        "APIsSnippets": {
          "ZipEntry.isDirectory": 89,
          "ZipEntry.getName": 354
        },
        "APIsQualifiedNames": {
          "ZipEntry.isDirectory": "java.util.zip.ZipEntry.isDirectory",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(newPath + \"/\" + anEntry.getName()));\n\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "     InputStream in = null;\n     BufferedOutputStream fos = null;\n   \n     File aFile = null;\n try{\n  aFile = new File(newPath +\"/\" + anEntry.getName());\n  aFile.getParentFile().mkdirs();\n  in = zFile.getInputStream(anEntry);\n  fos = new BufferedOutputStream(new FileOutputStream(aFile));\n  byte[] buffer = new byte[1024];\n  int length;\n  while((length = in.read(buffer)) > 0) {\n   fos.write(buffer,0,length);\n  }\n  \n } finally {\n  if(in != null) {\n   in.close();\n  }\n  if(fos != null) {\n   fos.close();\n }\n}\n",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "File.getParentFile": true,
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true,
          "InputStream.read": true,
          "InputStream.close": true,
          "BufferedOutputStream.close": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "File.getParentFile": 194,
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441,
          "BufferedOutputStream.close": 87
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "File.getParentFile": 863,
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481,
          "BufferedOutputStream.close": 188
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "File.getParentFile": 1289,
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284,
          "BufferedOutputStream.close": 233
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "File.getParentFile": "java.io.File.getParentFile",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close",
          "BufferedOutputStream.close": "java.io.BufferedOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "package com.speakingcs.zip;\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipException;\nimport java.util.zip.ZipFile;\n\npublic class UnZipFile {\n\n public static void main(String[] args) {\n  \n  UnZipFile uzf = new UnZipFile();\n  try {\n   uzf.unZipFile(new File(\"C:/Users/A8020/Desktop/xyz.zip\"));\n  } catch (ZipException e) {\n   e.printStackTrace();\n  } catch (IOException e) {\n   e.printStackTrace();\n  }\n }\n\n private void unZipFile(File src) throws ZipException, IOException {\n  String newPath = \"\";\n  String filePath = src.getAbsolutePath();\n  ZipFile zFile = new ZipFile(src);\n  new File(filePath.substring(0, filePath.lastIndexOf('.'))).mkdir();\n  newPath = filePath.substring(0,filePath.lastIndexOf('.'));\n  \n  Enumeration entries = zFile.entries();\n  \n  while(entries.hasMoreElements()) {\n   \n   ZipEntry anEntry = entries.nextElement();\n   if(!anEntry.isDirectory()) {    \n    saveEntry(zFile,anEntry,newPath);\n   } else { \n    newPath += File.separator+anEntry.getName();\n   }\n  }\n  \n }\n\n private void saveEntry(ZipFile zFile, ZipEntry anEntry, String newPath) throws IOException {\n  InputStream in = null;\n  BufferedOutputStream fos = null;\n   \n  File aFile = null;\n  try{\n   aFile = new File(newPath +\"/\" + anEntry.getName());\n   aFile.getParentFile().mkdirs();\n   in = zFile.getInputStream(anEntry);\n   fos = new BufferedOutputStream(new FileOutputStream(aFile));\n   byte[] buffer = new byte[1024];\n   int length;\n   while((length = in.read(buffer)) > 0) {\n    fos.write(buffer,0,length);\n   }\n   \n  } finally {\n   if(in != null) {\n    in.close();\n   }\n   if(fos != null) {\n    fos.close();\n   }\n  }  \n } \n}\n\n",
        "in_page_order": 7,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "UnZipFile.__init__": false,
          "File.__init__": true,
          "UnZipFile.unZipFile": false,
          "File.getAbsolutePath": true,
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.isDirectory": true,
          "IOException.zFile": false,
          "ZipEntry.getName": true,
          "File.getParentFile": true,
          "ZipFile.getInputStream": true,
          "FileOutputStream.__init__": true,
          "BufferedOutputStream.__init__": true,
          "InputStream.read": true,
          "InputStream.close": true,
          "BufferedOutputStream.close": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "File.getAbsolutePath": 405,
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.isDirectory": 41,
          "ZipEntry.getName": 71,
          "File.getParentFile": 194,
          "ZipFile.getInputStream": 73,
          "FileOutputStream.__init__": 430,
          "BufferedOutputStream.__init__": 179,
          "InputStream.read": 397,
          "InputStream.close": 441,
          "BufferedOutputStream.close": 87
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "File.getAbsolutePath": 3857,
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.isDirectory": 72,
          "ZipEntry.getName": 189,
          "File.getParentFile": 863,
          "ZipFile.getInputStream": 153,
          "FileOutputStream.__init__": 2603,
          "BufferedOutputStream.__init__": 622,
          "InputStream.read": 1923,
          "InputStream.close": 2481,
          "BufferedOutputStream.close": 188
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "File.getAbsolutePath": 9027,
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.isDirectory": 89,
          "ZipEntry.getName": 354,
          "File.getParentFile": 1289,
          "ZipFile.getInputStream": 211,
          "FileOutputStream.__init__": 3767,
          "BufferedOutputStream.__init__": 789,
          "InputStream.read": 4134,
          "InputStream.close": 3284,
          "BufferedOutputStream.close": 233
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "File.getAbsolutePath": "java.io.File.getAbsolutePath",
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.isDirectory": "java.util.zip.ZipEntry.isDirectory",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "File.getParentFile": "java.io.File.getParentFile",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "BufferedOutputStream.__init__": "java.io.BufferedOutputStream.__init__",
          "InputStream.read": "java.io.InputStream.read",
          "InputStream.close": "java.io.InputStream.close",
          "BufferedOutputStream.close": "java.io.BufferedOutputStream.close"
        },
        "API_Ratio": 0.8333333333333334
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://www.boraji.com/java-how-to-decompress-files-from-a-zip-file",
    "url position": 23,
    "segments": [
      {
        "code": "package com.boraji.tutorial.io;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\n/**\n * @author imssbora\n */\npublic class UnzipFileExample1 {\n  public static void main(String[] args) {\n    File zipFile = new File(\"Test.zip\");\n    File output = new File(\"Unzip\");\n    FileInputStream fileInputStream = null;\n    ZipInputStream zipInputStream = null;\n    try {\n      fileInputStream = new FileInputStream(zipFile);\n      zipInputStream = new ZipInputStream(fileInputStream);\n\n      // Get ZipEntry\n      ZipEntry entry = zipInputStream.getNextEntry();\n      while (entry != null) {\n        if (entry.isDirectory()) {\n\n          // Create directory\n          File dir = new File(output, entry.getName());\n          if (!dir.exists()) {\n            dir.mkdirs();\n          }\n        } else {\n\n          // Read zipEntry and write to a file.\n          File file = new File(output, entry.getName());\n          FileOutputStream fileOutputStream = new FileOutputStream(file);\n          int i;\n          byte[] data = new byte[1024];\n          while ((i = zipInputStream.read(data)) != -1) {\n            fileOutputStream.write(data, 0, i);\n          }\n\n          fileOutputStream.close();\n\n        }\n        // Get next entry\n        entry = zipInputStream.getNextEntry();\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (fileInputStream != null) {\n          fileInputStream.close();\n        }\n        if (zipInputStream != null) {\n          zipInputStream.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "FileInputStream.close": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "FileInputStream.close": 218,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "FileInputStream.close": 664,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "FileInputStream.close": 861,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "FileInputStream.close": "java.io.FileInputStream.close",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "package com.boraji.tutorial.io;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Enumeration;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\n/**\n * @author imssbora\n */\npublic class UnzipFileExample2 {\n  public static void main(String[] args) {\n    File output = new File(\"Unzip2\");\n    ZipFile zipFile = null;\n    try {\n\n      zipFile = new ZipFile(new File(\"Test.zip\"));\n\n      Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n      while (entries.hasMoreElements()) {\n        ZipEntry entry = (ZipEntry) entries.nextElement();\n        if (entry.isDirectory()) {\n\n          // Create directory\n          File dir = new File(output, entry.getName());\n          if (!dir.exists()) {\n            dir.mkdirs();\n          }\n        } else {\n\n          // Get zipEntry name and create an output stream.\n          File file = new File(output, entry.getName());\n          FileOutputStream fileOutputStream = new FileOutputStream(file);\n          InputStream inputStream = zipFile.getInputStream(entry);\n\n          // Read Zip file entry\n          int i;\n          byte[] data = new byte[1024];\n          while ((i = inputStream.read(data)) != -1) {\n            fileOutputStream.write(data, 0, i);\n          }\n\n          fileOutputStream.close();\n          inputStream.close();\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (zipFile != null) {\n          zipFile.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "Enumeration.hasMoreElements": true,
          "Enumeration.nextElement": true,
          "ZipEntry.isDirectory": true,
          "ZipEntry.getName": true,
          "File.exists": true,
          "FileOutputStream.__init__": true,
          "ZipFile.getInputStream": true,
          "InputStream.read": true,
          "FileOutputStream.close": true,
          "InputStream.close": true,
          "File.mkdirs": true,
          "ZipFile.close": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "Enumeration.hasMoreElements": 253,
          "Enumeration.nextElement": 254,
          "ZipEntry.isDirectory": 41,
          "ZipEntry.getName": 71,
          "File.exists": 464,
          "FileOutputStream.__init__": 430,
          "ZipFile.getInputStream": 73,
          "InputStream.read": 397,
          "FileOutputStream.close": 267,
          "InputStream.close": 441,
          "File.mkdirs": 319,
          "ZipFile.close": 69
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "Enumeration.hasMoreElements": 1722,
          "Enumeration.nextElement": 1704,
          "ZipEntry.isDirectory": 72,
          "ZipEntry.getName": 189,
          "File.exists": 4741,
          "FileOutputStream.__init__": 2603,
          "ZipFile.getInputStream": 153,
          "InputStream.read": 1923,
          "FileOutputStream.close": 1003,
          "InputStream.close": 2481,
          "File.mkdirs": 1681,
          "ZipFile.close": 153
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "Enumeration.hasMoreElements": 3084,
          "Enumeration.nextElement": 3031,
          "ZipEntry.isDirectory": 89,
          "ZipEntry.getName": 354,
          "File.exists": 10225,
          "FileOutputStream.__init__": 3767,
          "ZipFile.getInputStream": 211,
          "InputStream.read": 4134,
          "FileOutputStream.close": 1322,
          "InputStream.close": 3284,
          "File.mkdirs": 2446,
          "ZipFile.close": 215
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "Enumeration.hasMoreElements": "java.util.Enumeration.hasMoreElements",
          "Enumeration.nextElement": "java.util.Enumeration.nextElement",
          "ZipEntry.isDirectory": "java.util.zip.ZipEntry.isDirectory",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "File.exists": "java.io.File.exists",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream",
          "InputStream.read": "java.io.InputStream.read",
          "FileOutputStream.close": "java.io.FileOutputStream.close",
          "InputStream.close": "java.io.InputStream.close",
          "File.mkdirs": "java.io.File.mkdirs",
          "ZipFile.close": "java.util.zip.ZipFile.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://memorynotfound.com/java-7z-seven-zip-example-compress-decompress-file/",
    "url position": 32,
    "segments": [
      {
        "code": "package com.memorynotfound.resource;\n\nimport org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;\nimport org.apache.commons.compress.archivers.sevenz.SevenZFile;\nimport org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class SevenZ {\n\n    private SevenZ() {\n\n    }\n\n    public static void compress(String name, File... files) throws IOException {\n        try (SevenZOutputFile out = new SevenZOutputFile(new File(name))){\n            for (File file : files){\n                addToArchiveCompression(out, file, \".\");\n            }\n        }\n    }\n\n    public static void decompress(String in, File destination) throws IOException {\n        SevenZFile sevenZFile = new SevenZFile(new File(in));\n        SevenZArchiveEntry entry;\n        while ((entry = sevenZFile.getNextEntry()) != null){\n            if (entry.isDirectory()){\n                continue;\n            }\n            File curfile = new File(destination, entry.getName());\n            File parent = curfile.getParentFile();\n            if (!parent.exists()) {\n                parent.mkdirs();\n            }\n            FileOutputStream out = new FileOutputStream(curfile);\n            byte[] content = new byte[(int) entry.getSize()];\n            sevenZFile.read(content, 0, content.length);\n            out.write(content);\n            out.close();\n        }\n    }\n\n    private static void addToArchiveCompression(SevenZOutputFile out, File file, String dir) throws IOException {\n        String name = dir + File.separator + file.getName();\n        if (file.isFile()){\n            SevenZArchiveEntry entry = out.createArchiveEntry(file, name);\n            out.putArchiveEntry(entry);\n\n            FileInputStream in = new FileInputStream(file);\n            byte[] b = new byte[1024];\n            int count = 0;\n            while ((count = in.read(b)) > 0) {\n                out.write(b, 0, count);\n            }\n            out.closeArchiveEntry();\n\n        } else if (file.isDirectory()) {\n            File[] children = file.listFiles();\n            if (children != null){\n                for (File child : children){\n                    addToArchiveCompression(out, child, name);\n                }\n            }\n        } else {\n            System.out.println(file.getName() + \" is not supported\");\n        }\n    }\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "AM.__init__": true,
          "IOException.out": true,
          "File.__init__": true,
          "SevenZFile.__init__": false,
          "SevenZFile.getNextEntry": false,
          "File.getName": true,
          "File.isFile": true,
          "SevenZOutputFile.createArchiveEntry": false,
          "SevenZOutputFile.putArchiveEntry": false,
          "FileInputStream.__init__": true,
          "FileInputStream.read": true,
          "SevenZOutputFile.closeArchiveEntry": false,
          "File.isDirectory": true
        },
        "APIsProjects": {
          "AM.__init__": 62,
          "IOException.out": 121,
          "File.__init__": 591,
          "File.getName": 300,
          "File.isFile": 177,
          "FileInputStream.__init__": 443,
          "FileInputStream.read": 123,
          "File.isDirectory": 323
        },
        "APIsFiles": {
          "AM.__init__": 555,
          "IOException.out": 550,
          "File.__init__": 13065,
          "File.getName": 1846,
          "File.isFile": 641,
          "FileInputStream.__init__": 2808,
          "FileInputStream.read": 263,
          "File.isDirectory": 1819
        },
        "APIsSnippets": {
          "AM.__init__": 987,
          "IOException.out": 1445,
          "File.__init__": 40468,
          "File.getName": 3551,
          "File.isFile": 910,
          "FileInputStream.__init__": 4023,
          "FileInputStream.read": 358,
          "File.isDirectory": 2669
        },
        "APIsQualifiedNames": {
          "IOException.out": "java.io.IOException.out",
          "File.__init__": "java.io.File.__init__",
          "File.getName": "java.io.File.getName",
          "File.isFile": "java.io.File.isFile",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "File.isDirectory": "java.io.File.isDirectory"
        },
        "API_Ratio": 0.6153846153846154
      },
      {
        "code": "package com.memorynotfound.resource;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class SevenZProgram {\n\n    private static final String OUTPUT_DIRECTORY = \"/tmp\";\n    private static final String TAR_GZIP_SUFFIX = \".7z\";\n\n    private static final String MULTIPLE_RESOURCES = \"/example-multiple-resources\";\n    private static final String RECURSIVE_DIRECTORY = \"/example-recursive-directory\";\n\n    private static final String MULTIPLE_RESOURCES_PATH = OUTPUT_DIRECTORY + MULTIPLE_RESOURCES + TAR_GZIP_SUFFIX;\n    private static final String RECURSIVE_DIRECTORY_PATH = OUTPUT_DIRECTORY + RECURSIVE_DIRECTORY + TAR_GZIP_SUFFIX;\n\n\n    public static void main(String... args) throws IOException {\n\n        // class for resource classloading\n        Class clazz = SevenZProgram.class;\n\n        // get multiple resources files to compress\n        File resource1 = new File(clazz.getResource(\"/in/resource1.txt\").getFile());\n        File resource2 = new File(clazz.getResource(\"/in/resource2.txt\").getFile());\n        File resource3 = new File(clazz.getResource(\"/in/resource3.txt\").getFile());\n\n        // compress multiple resources\n        SevenZ.compress(MULTIPLE_RESOURCES_PATH, resource1, resource2, resource3);\n\n        // decompress multiple resources\n        SevenZ.decompress(MULTIPLE_RESOURCES_PATH, new File(OUTPUT_DIRECTORY + MULTIPLE_RESOURCES));\n\n\n\n        // get directory file to compress\n        File directory = new File(clazz.getResource(\"/in/dir\").getFile());\n\n        // compress recursive directory\n        SevenZ.compress(RECURSIVE_DIRECTORY_PATH, directory);\n\n        // decompress recursive directory\n        SevenZ.decompress(RECURSIVE_DIRECTORY_PATH, new File(OUTPUT_DIRECTORY + RECURSIVE_DIRECTORY));\n    }\n}",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "Class.getResource": true,
          "File.__init__": true
        },
        "APIsProjects": {
          "Class.getResource": 35,
          "File.__init__": 591
        },
        "APIsFiles": {
          "Class.getResource": 54,
          "File.__init__": 13065
        },
        "APIsSnippets": {
          "Class.getResource": 138,
          "File.__init__": 40468
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.dreamincode.net/forums/topic/244086-write-and-read-zip-file-from-java/",
    "url position": 25,
    "segments": [
      {
        "code": "import java.io.*;\nimport java.util.zip.*;\n/*\n * Creates a ZIP file to be read by Winzip or Winrar\n */\npublic class WriteZip {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// lets put 2 files\n\t\tString[] filename = {\"file1.dat\", \"file2.dat\"};\n\t\t// create a line of text for the files\n        byte[] buffer = new byte[27];        // the alphabet + <line feed?\n        byte letter = 'a';\n        for(int i = 0; i < 26; ++i)\n        \tbuffer[i] = letter++;\n        buffer[26] = '\\n';   // and an end of line\n        \n        try {\n\t\t    // Create the ZIP file\n\t\t    String outFilename = \"myzip.zip\";\n\t\t    ZipOutputStream out = new ZipOutputStream(new FileOutputStream(outFilename));\n\n\t\t    // Compress two files\n\t\t    for (int i=0; i<filename.length; i++) {\n\t\t        // Add ZIP entry to output stream.\n\t\t        out.putNextEntry(new ZipEntry(filename[i]));\n\n\t\t        // Transfer 10 lines into the file\n\t\t        for(int j = 0; j < 10; ++j)\n\t\t            out.write(buffer);\n\n\t\t        // Close the file\n\t\t        out.closeEntry();\n\t\t    }\n\n\t\t    // Close the ZIP file\n\t\t    out.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Problem writing ZIP file: \" + e);\n\t\t}\n\n\t}\n}\n\r",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "ZipOutputStream.__init__": true,
          "ZipOutputStream.close": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "ZipOutputStream.__init__": 74,
          "ZipOutputStream.close": 69
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "ZipOutputStream.__init__": 166,
          "ZipOutputStream.close": 134
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "ZipOutputStream.__init__": 224,
          "ZipOutputStream.close": 179
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__",
          "ZipOutputStream.close": "java.util.zip.ZipOutputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.io.*;\nimport java.util.zip.*;\n\npublic class ReadZip {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\t// Open the ZIP file\n\t\t\tString inFilename = \"myzip.zip\";\n\t\t\tZipInputStream in = new ZipInputStream(new FileInputStream(inFilename));\n\n\t\t\t// While we have other entry\n\t\t\tZipEntry entry = in.getNextEntry();\n\t\t\twhile(entry != null){\n\t\t\t\tSystem.out.println(\"Reading: \" + entry.getName());\n\t\t\t\t// Transfer bytes from the ZIP file to the output file\n\t\t\t\t// OK I know that my file contains 10 * 27 bytes the reading might\n\t\t\t\t// be more versatile and test if there is more bytes in the file\n\t\t\t\tbyte[] buf = new byte[1024];\n\t\t\t\t\n\t\t\t\tint len = in.read(buf);\n\t            String theFile = new String(buf, 0, len);\n\t\t\t\tSystem.out.println(theFile);\n\n\t\t\t\tentry = in.getNextEntry();\n\t\t\t} // end while\n\t\t\t// Close the ZIP file\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Probel reading back the ZIP file: \" + e);\n\t\t}\n\n\t}\n}\n\r",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.opencodez.com/java/zip-file-using-java.htm",
    "url position": 24,
    "segments": [
      {
        "code": "private List<File> getFileList(String sourceDir, String extensions) {\tList<File> fileList = new ArrayList<File>();\tFile dir = new File(sourceDir);\tif (dir.isDirectory()) {\t\tString[] fList = dir.list();\t\tfor (String filename : fList) {\t\t\tFile iFile = new File(getAbsolutePath(dir, filename));\t\t\tif (iFile.isFile()) {\t\t\t\tif (null != extensions) {\t\t\t\t\tif (extensions.toLowerCase().contains(getFileExtension(filename))) {\t\t\t\t\t\tfileList.add(iFile);\t\t\t\t\t}\t\t\t\t} else {\t\t\t\t\tfileList.add(iFile);\t\t\t\t}\t\t\t}\t\t}\t} else if (dir.isFile()) {\t\tfileList.add(dir);\t}\treturn fileList;}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "List.__init__": true,
          "File.__init__": true,
          "File.isDirectory": true,
          "File.list": true,
          "File.isFile": true,
          "List.add": true
        },
        "APIsProjects": {
          "List.__init__": 690,
          "File.__init__": 591,
          "File.isDirectory": 323,
          "File.list": 141,
          "File.isFile": 177,
          "List.add": 720
        },
        "APIsFiles": {
          "List.__init__": 28857,
          "File.__init__": 13065,
          "File.isDirectory": 1819,
          "File.list": 363,
          "File.isFile": 641,
          "List.add": 30122
        },
        "APIsSnippets": {
          "List.__init__": 59061,
          "File.__init__": 40468,
          "File.isDirectory": 2669,
          "File.list": 497,
          "File.isFile": 910,
          "List.add": 92886
        },
        "APIsQualifiedNames": {
          "List.__init__": "java.util.List.__init__",
          "File.__init__": "java.io.File.__init__",
          "File.isDirectory": "java.io.File.isDirectory",
          "File.list": "java.io.File.list",
          "File.isFile": "java.io.File.isFile",
          "List.add": "java.util.List.add"
        },
        "API_Ratio": 1.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://blog.alutam.com/2009/10/31/reading-password-protected-zip-files-in-java/",
    "url position": 22,
    "segments": [
      {
        "code": "import java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\npublic class ZipDecryptInputStream extends InputStream {\r\n    private static final int[] CRC_TABLE = new int[256];\r\n    // compute the table\r\n    // (could also have it pre-computed - see http://snippets.dzone.com/tag/crc32)\r\n    static {\r\n        for (int i = 0; i < 256; i++) {\r\n            int r = i;\r\n            for (int j = 0; j < 8; j++) {\r\n                if ((r & 1) == 1) {\r\n                    r = (r >>> 1) ^ 0xedb88320;\r\n                } else {\r\n                    r >>>= 1;\r\n                }\r\n            }\r\n            CRC_TABLE[i] = r;\r\n        }\r\n    }\r\n\r\n    private static final int DECRYPT_HEADER_SIZE = 12;\r\n    private static final int[] LFH_SIGNATURE = {0x50, 0x4b, 0x03, 0x04};\r\n\r\n    private final InputStream delegate;\r\n    private final String password;\r\n    private final int keys[] = new int[3];\r\n\r\n    private State state = State.SIGNATURE;\r\n    private int skipBytes;\r\n    private int compressedSize;\r\n    private int value;\r\n    private int valuePos;\r\n    private int valueInc;\r\n\r\n    public ZipDecryptInputStream(InputStream stream, String password) {\r\n        this.delegate = stream;\r\n        this.password = password;\r\n    }\r\n\r\n    @Override\r\n    public int read() throws IOException {\r\n        int result = delegate.read();\r\n        if (skipBytes == 0) {\r\n            switch (state) {\r\n                case SIGNATURE:\r\n                    if (result != LFH_SIGNATURE[valuePos]) {\r\n                        state = State.TAIL;\r\n                    } else {\r\n                        valuePos++;\r\n                        if (valuePos >= LFH_SIGNATURE.length) {\r\n                            skipBytes = 2;\r\n                            state = State.FLAGS;\r\n                        }\r\n                    }\r\n                    break;\r\n                case FLAGS:\r\n                    if ((result & 1) == 0) {\r\n                        throw new IllegalStateException(\"ZIP not password protected.\");\r\n                    }\r\n                    if ((result & 64) == 64) {\r\n                        throw new IllegalStateException(\"Strong encryption used.\");\r\n                    }\r\n                    if ((result & 8) == 8) {\r\n                        throw new IllegalStateException(\"Unsupported ZIP format.\");\r\n                    }\r\n                    result -= 1;\r\n                    compressedSize = 0;\r\n                    valuePos = 0;\r\n                    valueInc = DECRYPT_HEADER_SIZE;\r\n                    state = State.COMPRESSED_SIZE;\r\n                    skipBytes = 11;\r\n                    break;\r\n                case COMPRESSED_SIZE:\r\n                    compressedSize += result << (8 * valuePos);\r\n                    result -= valueInc;\r\n                    if (result < 0) {\r\n                        valueInc = 1;\r\n                        result += 256;\r\n                    } else {\r\n                        valueInc = 0;\r\n                    }\r\n                    valuePos++;\r\n                    if (valuePos > 3) {\r\n                        valuePos = 0;\r\n                        value = 0;\r\n                        state = State.FN_LENGTH;\r\n                        skipBytes = 4;\r\n                    }\r\n                    break;\r\n                case FN_LENGTH:\r\n                case EF_LENGTH:\r\n                    value += result << 8 * valuePos;\r\n                    if (valuePos == 1) {\r\n                        valuePos = 0;\r\n                        if (state == State.FN_LENGTH) {\r\n                            state = State.EF_LENGTH;\r\n                        } else {\r\n                            state = State.HEADER;\r\n                            skipBytes = value;\r\n                        }\r\n                    } else {\r\n                        valuePos = 1;\r\n                    }\r\n                    break;\r\n                case HEADER:\r\n                    initKeys(password);\r\n                    for (int i = 0; i < DECRYPT_HEADER_SIZE; i++) {\r\n                        updateKeys((byte) (result ^ decryptByte()));\r\n                        result = delegate.read();\r\n                    }\r\n                    compressedSize -= DECRYPT_HEADER_SIZE;\r\n                    state = State.DATA;\r\n                    // intentionally no break\r\n                case DATA:\r\n                    result = (result ^ decryptByte()) & 0xff;\r\n                    updateKeys((byte) result);\r\n                    compressedSize--;\r\n                    if (compressedSize == 0) {\r\n                        valuePos = 0;\r\n                        state = State.SIGNATURE;\r\n                    }\r\n                    break;\r\n                case TAIL:\r\n                    // do nothing\r\n            }\r\n        } else {\r\n            skipBytes--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void close() throws IOException {\r\n        delegate.close();\r\n        super.close();\r\n    }\r\n\r\n    private void initKeys(String password) {\r\n        keys[0] = 305419896;\r\n        keys[1] = 591751049;\r\n        keys[2] = 878082192;\r\n        for (int i = 0; i < password.length(); i++) {\r\n            updateKeys((byte) (password.charAt(i) & 0xff));\r\n        }\r\n    }\r\n\r\n    private void updateKeys(byte charAt) {\r\n        keys[0] = crc32(keys[0], charAt);\r\n        keys[1] += keys[0] & 0xff;\r\n        keys[1] = keys[1] * 134775813 + 1;\r\n        keys[2] = crc32(keys[2], (byte) (keys[1] >> 24));\r\n    }\r\n\r\n    private byte decryptByte() {\r\n        int temp = keys[2] | 2;\r\n        return (byte) ((temp * (temp ^ 1)) >>> 8);\r\n    }\r\n\r\n    private int crc32(int oldCrc, byte charAt) {\r\n        return ((oldCrc >>> 8) ^ CRC_TABLE[(oldCrc ^ charAt) & 0xff]);\r\n    }\r\n\r\n    private static enum State {\r\n        SIGNATURE, FLAGS, COMPRESSED_SIZE, FN_LENGTH, EF_LENGTH, HEADER, DATA, TAIL\r\n    }\r\n}",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": false,
        "semicolon": true,
        "APIs": {
          "InputStream.read": true,
          "IllegalStateException.__init__": true,
          "InputStream.close": true
        },
        "APIsProjects": {
          "InputStream.read": 397,
          "IllegalStateException.__init__": 589,
          "InputStream.close": 441
        },
        "APIsFiles": {
          "InputStream.read": 1923,
          "IllegalStateException.__init__": 9878,
          "InputStream.close": 2481
        },
        "APIsSnippets": {
          "InputStream.read": 4134,
          "IllegalStateException.__init__": 22622,
          "InputStream.close": 3284
        },
        "APIsQualifiedNames": {
          "InputStream.read": "java.io.InputStream.read",
          "IllegalStateException.__init__": "org.jboss.weld.exceptions.IllegalStateException.__init__",
          "InputStream.close": "java.io.InputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.zip.ZipEntry;\r\nimport java.util.zip.ZipInputStream;\r\n\r\n// usage: java Main [filename] [password]\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n        // password-protected zip file I need to read\r\n        FileInputStream fis = new FileInputStream(args[0]);\r\n        // wrap it in the decrypt stream\r\n        ZipDecryptInputStream zdis = new ZipDecryptInputStream(fis, args[1]);\r\n        // wrap the decrypt stream by the ZIP input stream\r\n        ZipInputStream zis = new ZipInputStream(zdis);\r\n\r\n        // read all the zip entries and save them as files\r\n        ZipEntry ze;\r\n        while ((ze = zis.getNextEntry()) != null) {\r\n            FileOutputStream fos = new FileOutputStream(ze.getName());\r\n            int b;\r\n            while ((b = zis.read()) != -1) {\r\n                fos.write(b);\r\n            }\r\n            fos.close();\r\n            zis.closeEntry();\r\n        }\r\n        zis.close();\r\n    }\r\n}",
        "in_page_order": 2,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "ZipDecryptInputStream.__init__": false,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipInputStream.close": 53
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipInputStream.close": 86
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipInputStream.close": 99
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close"
        },
        "API_Ratio": 0.8
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "http://www.discoversdk.com/blog/processing-zip-files-with-java",
    "url position": 37,
    "segments": [
      {
        "code": "import java.util.zip.ZipEntry ;\nimport java.util.zip.ZipInputStream ;\nimport java.util.zip.ZipOutputStream ;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\npublic class JavaZip {\n   public static void main(String[] args) throws Exception{\n       FileOutputStream fos = new FileOutputStream(\"my_archive.zip\");\n       FileInputStream fin = new FileInputStream(\"file1.txt\");\n       ZipOutputStream zos = new ZipOutputStream(fos);\n       byte[] byteBuffer = new byte[200];\n       ZipEntry zen = new ZipEntry(\"file1.txt\");\n       zos.putNextEntry(zen);\n\n       int size;\n       while( (size = fin.read(byteBuffer)) > 0){\n           zos.write(byteBuffer, 0, size);\n       }\n       zos.closeEntry();\n       zos.close();\n       fos.close();\n       fin.close();\n   }\n}",
        "in_page_order": 3,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileOutputStream.__init__": true,
          "FileInputStream.__init__": true,
          "ZipOutputStream.__init__": true,
          "ZipEntry.__init__": true,
          "ZipOutputStream.putNextEntry": true,
          "FileInputStream.read": true,
          "ZipOutputStream.closeEntry": true,
          "ZipOutputStream.close": true,
          "FileOutputStream.close": true,
          "FileInputStream.close": true
        },
        "APIsProjects": {
          "FileOutputStream.__init__": 430,
          "FileInputStream.__init__": 443,
          "ZipOutputStream.__init__": 74,
          "ZipEntry.__init__": 81,
          "ZipOutputStream.putNextEntry": 74,
          "FileInputStream.read": 123,
          "ZipOutputStream.closeEntry": 60,
          "ZipOutputStream.close": 69,
          "FileOutputStream.close": 267,
          "FileInputStream.close": 218
        },
        "APIsFiles": {
          "FileOutputStream.__init__": 2603,
          "FileInputStream.__init__": 2808,
          "ZipOutputStream.__init__": 166,
          "ZipEntry.__init__": 190,
          "ZipOutputStream.putNextEntry": 153,
          "FileInputStream.read": 263,
          "ZipOutputStream.closeEntry": 113,
          "ZipOutputStream.close": 134,
          "FileOutputStream.close": 1003,
          "FileInputStream.close": 664
        },
        "APIsSnippets": {
          "FileOutputStream.__init__": 3767,
          "FileInputStream.__init__": 4023,
          "ZipOutputStream.__init__": 224,
          "ZipEntry.__init__": 378,
          "ZipOutputStream.putNextEntry": 305,
          "FileInputStream.read": 358,
          "ZipOutputStream.closeEntry": 200,
          "ZipOutputStream.close": 179,
          "FileOutputStream.close": 1322,
          "FileInputStream.close": 861
        },
        "APIsQualifiedNames": {
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipOutputStream.__init__": "java.util.zip.ZipOutputStream.__init__",
          "ZipEntry.__init__": "java.util.zip.ZipEntry.__init__",
          "ZipOutputStream.putNextEntry": "java.util.zip.ZipOutputStream.putNextEntry",
          "FileInputStream.read": "java.io.FileInputStream.read",
          "ZipOutputStream.closeEntry": "java.util.zip.ZipOutputStream.closeEntry",
          "ZipOutputStream.close": "java.util.zip.ZipOutputStream.close",
          "FileOutputStream.close": "java.io.FileOutputStream.close",
          "FileInputStream.close": "java.io.FileInputStream.close"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "import java.util.zip.ZipEntry ;\nimport java.util.zip.ZipInputStream ;\nimport java.util.zip.ZipOutputStream ;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\n\npublic class JavaZip {\n   public static void main(String[] args) throws Exception{\n       FileInputStream fin = new FileInputStream(\"my_archive.zip\");\n       ZipInputStream zis = new ZipInputStream(fin);\n       ZipEntry zipEntry = zis.getNextEntry();\n\n       System.out.println(\"File Size: \" + zipEntry.getSize());\n       System.out.println(\"Last Modification Date: \" + zipEntry.getLastModifiedTime());\n\n       FileOutputStream fout = new FileOutputStream(\"Extracted - \" + zipEntry.getName());\n       for (int c = zis.read(); c != -1; c = zis.read()) {\n           fout.write(c);\n       }\n       zis.closeEntry();\n       fout.close();\n\n       zis.close();\n       fin.close();\n   }\n}",
        "in_page_order": 4,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true,
          "ZipEntry.getSize": true,
          "ZipEntry.getLastModifiedTime": false,
          "ZipEntry.getName": true,
          "FileOutputStream.__init__": true,
          "ZipInputStream.read": true,
          "ZipInputStream.closeEntry": true,
          "FileOutputStream.close": true,
          "ZipInputStream.close": true,
          "FileInputStream.close": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75,
          "ZipEntry.getSize": 21,
          "ZipEntry.getName": 71,
          "FileOutputStream.__init__": 430,
          "ZipInputStream.read": 14,
          "ZipInputStream.closeEntry": 9,
          "FileOutputStream.close": 267,
          "ZipInputStream.close": 53,
          "FileInputStream.close": 218
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141,
          "ZipEntry.getSize": 46,
          "ZipEntry.getName": 189,
          "FileOutputStream.__init__": 2603,
          "ZipInputStream.read": 17,
          "ZipInputStream.closeEntry": 12,
          "FileOutputStream.close": 1003,
          "ZipInputStream.close": 86,
          "FileInputStream.close": 664
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188,
          "ZipEntry.getSize": 83,
          "ZipEntry.getName": 354,
          "FileOutputStream.__init__": 3767,
          "ZipInputStream.read": 21,
          "ZipInputStream.closeEntry": 17,
          "FileOutputStream.close": 1322,
          "ZipInputStream.close": 99,
          "FileInputStream.close": 861
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry",
          "ZipEntry.getSize": "java.util.zip.ZipEntry.getSize",
          "ZipEntry.getName": "java.util.zip.ZipEntry.getName",
          "FileOutputStream.__init__": "java.io.FileOutputStream.__init__",
          "ZipInputStream.read": "java.util.zip.ZipInputStream.read",
          "ZipInputStream.closeEntry": "java.util.zip.ZipInputStream.closeEntry",
          "FileOutputStream.close": "java.io.FileOutputStream.close",
          "ZipInputStream.close": "java.util.zip.ZipInputStream.close",
          "FileInputStream.close": "java.io.FileInputStream.close"
        },
        "API_Ratio": 0.9166666666666666
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://www.javaworld.com/article/2077548/learn-java/java-tip-49--how-to-extract-java-resources-from-jar-and-zip-archives.html",
    "url position": 35,
    "segments": [
      {
        "code": "          FileInputStream fis=new FileInputStream(jarFileName);\n          BufferedInputStream bis=new BufferedInputStream(fis);\n          ZipInputStream zis=new ZipInputStream(bis);\n          ZipEntry ze=null;\n          while ((ze=zis.getNextEntry())!=null) {\n             if (ze.isDirectory()) {\n                continue;\n             }\n             if (debugOn) {\n                System.out.println(\n                   \"ze.getName()=\"+ze.getName()+\",\"+\"getSize()=\"+ze.getSize()\n                   );\n             }\n             int size=(int)ze.getSize();\n             // -1 means unknown size. \n             if (size==-1) {\n                size=((Integer)htSizes.get(ze.getName())).intValue();\n             }\n             byte[] b=new byte[(int)size];\n             int rb=0;\n             int chunk=0;\n             while (((int)size - rb) > 0) {\n                 chunk=zis.read(b,rb,(int)size - rb);\n                 if (chunk==-1) {\n                    break;\n                 }\n                 rb+=chunk;\n             }\n             // add to internal resource hashtable\n             htJarContents.put(ze.getName(),b);\n             if (debugOn) {\n                System.out.println(\n                   ze.getName()+\"  rb=\"+rb+\n                   \",size=\"+size+\n                   \",csize=\"+ze.getCompressedSize()\n                   );\n             }\n          }\n       } catch (NullPointerException e) {\n          System.out.println(\"done.\");\n       } catch (FileNotFoundException e) {\n          e.printStackTrace();\n       } catch (IOException e) {\n          e.printStackTrace();\n       }\n   }\n",
        "in_page_order": 5,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "FileInputStream.__init__": true,
          "BufferedInputStream.__init__": true,
          "ZipInputStream.__init__": true,
          "ZipInputStream.getNextEntry": true
        },
        "APIsProjects": {
          "FileInputStream.__init__": 443,
          "BufferedInputStream.__init__": 224,
          "ZipInputStream.__init__": 80,
          "ZipInputStream.getNextEntry": 75
        },
        "APIsFiles": {
          "FileInputStream.__init__": 2808,
          "BufferedInputStream.__init__": 793,
          "ZipInputStream.__init__": 172,
          "ZipInputStream.getNextEntry": 141
        },
        "APIsSnippets": {
          "FileInputStream.__init__": 4023,
          "BufferedInputStream.__init__": 1031,
          "ZipInputStream.__init__": 206,
          "ZipInputStream.getNextEntry": 188
        },
        "APIsQualifiedNames": {
          "FileInputStream.__init__": "java.io.FileInputStream.__init__",
          "BufferedInputStream.__init__": "java.io.BufferedInputStream.__init__",
          "ZipInputStream.__init__": "java.util.zip.ZipInputStream.__init__",
          "ZipInputStream.getNextEntry": "java.util.zip.ZipInputStream.getNextEntry"
        },
        "API_Ratio": 1.0
      },
      {
        "code": "   public static void main(String[] args) throws IOException {\n       if (args.length!=2) {\n          System.err.println(\n             \"usage: java JarResources <jar file name> <resource name>\"\n             );\n          System.exit(1);\n       }\n       JarResources jr=new JarResources(args[0]);\n       byte[] buff=jr.getResource(args[1]);\n       if (buff==null) {\n          System.out.println(\"Could not find \"+args[1]+\".\");\n       } else {\n          System.out.println(\"Found \"+args[1]+ \" (length=\"+buff.length+\").\");\n       }\n   }\n}   // End of JarResources class.\n",
        "in_page_order": 6,
        "first_in_page": false,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "JarResources.__init__": false,
          "JarResources.getResource": false
        },
        "APIsProjects": {},
        "APIsFiles": {},
        "APIsSnippets": {},
        "APIsQualifiedNames": {},
        "API_Ratio": 0.0
      }
    ]
  },
  {
    "query": "How to read ZIP archive",
    "url": "https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36560",
    "url position": 31,
    "segments": [
      {
        "code": "I will attach a sample zip file which contains an empty file slight under 50MB.\n\nSample code:\n\nimport java.io.File;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport junit.framework.TestCase;\nimport org.apache.commons.io.IOUtils;\n\npublic class TestZipBug extends TestCase {\n    public void testZipBug() throws Exception {\n        ZipFile zip = new ZipFile(new File(\"D:\\\\gnu-zip-large-file-bug.zip\"));\n        ZipEntry entry = (ZipEntry) zip.entries().nextElement();\n        IOUtils.toByteArray(zip.getInputStream(entry));\n        // Omitting code to verify contents.\n    }\n}\n\nResulting error:\nCaused by: gnu.java.util.zip.ZipException: Code lengths don't add up properly.\n                at gnu.java.util.zip.InflaterInputStream.read(Unknown Source)\n                at java.io.FilterInputStream.read(FilterInputStream.java:90)",
        "in_page_order": 1,
        "first_in_page": true,
        "accepted_answer": false,
        "answer_votes": 0,
        "answer_stars": 0,
        "length": true,
        "semicolon": true,
        "APIs": {
          "File.__init__": true,
          "ZipFile.__init__": true,
          "ZipFile.entries": true,
          "ZipFile.getInputStream": true
        },
        "APIsProjects": {
          "File.__init__": 591,
          "ZipFile.__init__": 89,
          "ZipFile.entries": 69,
          "ZipFile.getInputStream": 73
        },
        "APIsFiles": {
          "File.__init__": 13065,
          "ZipFile.__init__": 213,
          "ZipFile.entries": 125,
          "ZipFile.getInputStream": 153
        },
        "APIsSnippets": {
          "File.__init__": 40468,
          "ZipFile.__init__": 324,
          "ZipFile.entries": 148,
          "ZipFile.getInputStream": 211
        },
        "APIsQualifiedNames": {
          "File.__init__": "java.io.File.__init__",
          "ZipFile.__init__": "java.util.zip.ZipFile.__init__",
          "ZipFile.entries": "java.util.zip.ZipFile.entries",
          "ZipFile.getInputStream": "java.util.zip.ZipFile.getInputStream"
        },
        "API_Ratio": 1.0
      }
    ]
  }
]